program zk_deck_shuffle.aleo;

struct Stack:
    capacity as u8;
    top as u8;
    member_size as u8;
    s00 as u128;
    s01 as u128;
    s02 as u128;
    s03 as u128;


function setup_shuffle:
    input r0 as i8.private;
    input r1 as [[u128; 26u32]; 2u32].private;
    abs r0 into r2;
    lt r0 0i8 into r3;
    ternary r3 r2 r2 into r4;
    ternary r3 r1[0u32][0u32] r1[1u32][0u32] into r5;
    ternary r3 r1[0u32][1u32] r1[1u32][1u32] into r6;
    ternary r3 r1[0u32][2u32] r1[1u32][2u32] into r7;
    ternary r3 r1[0u32][3u32] r1[1u32][3u32] into r8;
    ternary r3 r1[0u32][4u32] r1[1u32][4u32] into r9;
    ternary r3 r1[0u32][5u32] r1[1u32][5u32] into r10;
    ternary r3 r1[0u32][6u32] r1[1u32][6u32] into r11;
    ternary r3 r1[0u32][7u32] r1[1u32][7u32] into r12;
    ternary r3 r1[0u32][8u32] r1[1u32][8u32] into r13;
    ternary r3 r1[0u32][9u32] r1[1u32][9u32] into r14;
    ternary r3 r1[0u32][10u32] r1[1u32][10u32] into r15;
    ternary r3 r1[0u32][11u32] r1[1u32][11u32] into r16;
    ternary r3 r1[0u32][12u32] r1[1u32][12u32] into r17;
    ternary r3 r1[0u32][13u32] r1[1u32][13u32] into r18;
    ternary r3 r1[0u32][14u32] r1[1u32][14u32] into r19;
    ternary r3 r1[0u32][15u32] r1[1u32][15u32] into r20;
    ternary r3 r1[0u32][16u32] r1[1u32][16u32] into r21;
    ternary r3 r1[0u32][17u32] r1[1u32][17u32] into r22;
    ternary r3 r1[0u32][18u32] r1[1u32][18u32] into r23;
    ternary r3 r1[0u32][19u32] r1[1u32][19u32] into r24;
    ternary r3 r1[0u32][20u32] r1[1u32][20u32] into r25;
    ternary r3 r1[0u32][21u32] r1[1u32][21u32] into r26;
    ternary r3 r1[0u32][22u32] r1[1u32][22u32] into r27;
    ternary r3 r1[0u32][23u32] r1[1u32][23u32] into r28;
    ternary r3 r1[0u32][24u32] r1[1u32][24u32] into r29;
    ternary r3 r1[0u32][25u32] r1[1u32][25u32] into r30;
    cast r5r6r7r8r9r10r11r12r13r14r15r16r17r18r19r20r21r22r23r24r25r26r27r28r29r30 into r31 as [u128; 26u32];
    ternary r3 r1[1u32][0u32] r1[0u32][0u32] into r32;
    ternary r3 r1[1u32][1u32] r1[0u32][1u32] into r33;
    ternary r3 r1[1u32][2u32] r1[0u32][2u32] into r34;
    ternary r3 r1[1u32][3u32] r1[0u32][3u32] into r35;
    ternary r3 r1[1u32][4u32] r1[0u32][4u32] into r36;
    ternary r3 r1[1u32][5u32] r1[0u32][5u32] into r37;
    ternary r3 r1[1u32][6u32] r1[0u32][6u32] into r38;
    ternary r3 r1[1u32][7u32] r1[0u32][7u32] into r39;
    ternary r3 r1[1u32][8u32] r1[0u32][8u32] into r40;
    ternary r3 r1[1u32][9u32] r1[0u32][9u32] into r41;
    ternary r3 r1[1u32][10u32] r1[0u32][10u32] into r42;
    ternary r3 r1[1u32][11u32] r1[0u32][11u32] into r43;
    ternary r3 r1[1u32][12u32] r1[0u32][12u32] into r44;
    ternary r3 r1[1u32][13u32] r1[0u32][13u32] into r45;
    ternary r3 r1[1u32][14u32] r1[0u32][14u32] into r46;
    ternary r3 r1[1u32][15u32] r1[0u32][15u32] into r47;
    ternary r3 r1[1u32][16u32] r1[0u32][16u32] into r48;
    ternary r3 r1[1u32][17u32] r1[0u32][17u32] into r49;
    ternary r3 r1[1u32][18u32] r1[0u32][18u32] into r50;
    ternary r3 r1[1u32][19u32] r1[0u32][19u32] into r51;
    ternary r3 r1[1u32][20u32] r1[0u32][20u32] into r52;
    ternary r3 r1[1u32][21u32] r1[0u32][21u32] into r53;
    ternary r3 r1[1u32][22u32] r1[0u32][22u32] into r54;
    ternary r3 r1[1u32][23u32] r1[0u32][23u32] into r55;
    ternary r3 r1[1u32][24u32] r1[0u32][24u32] into r56;
    ternary r3 r1[1u32][25u32] r1[0u32][25u32] into r57;
    cast r32r33r34r35r36r37r38r39r40r41r42r43r44r45r46r47r48r49r50r51r52r53r54r55r56r57 into r58 as [u128; 26u32];
    output r4 as i8.private;
    output r31 as [u128; 26u32].private;
    output r58 as [u128; 26u32].private;












closure init_stack:
    input r0 as u8;
    mul 4u16 8u16 into r1;
    mul r1 16u16 into r2;
    cast r0 into r3 as u16;
    div r2 r3 into r4;
    cast r4 into r5 as u8;
    gt r5 0u8 into r6;
    assert.eq r6 true;
    lte r5 64u8 into r7;
    assert.eq r7 true;
    gt r0 0u8 into r8;
    assert.eq r8 true;
    lte r0 128u8 into r9;
    assert.eq r9 true;
    rem r0 8u8 into r10;
    assert.eq r10 0u8;
    cast r5 0u8 r0 0u128 0u128 0u128 0u128 into r11 as Stack;
    output r11 as Stack;


closure push:
    input r0 as u128;
    input r1 as Stack;
    mul r1.top r1.member_size into r2;
    div r2 128u8 into r3;
    add r1.top 1u8 into r4;
    mul r4 r1.member_size into r5;
    rem r5 128u8 into r6;
    lt r6 r1.member_size into r7;
    add r1.top 1u8 into r8;
    mul r8 r1.member_size into r9;
    rem r9 128u8 into r10;
    is.neq r10 0u8 into r11;
    and r7 r11 into r12;
    add r3 1u8 into r13;
    ternary r12 r13 r3 into r14;
    is.eq r14 0u8 into r15;
    is.eq r14 1u8 into r16;
    is.eq r14 2u8 into r17;
    is.eq r14 3u8 into r18;
    mul 4u16 8u16 into r19;
    mul r19 16u16 into r20;
    cast r1.member_size into r21 as u16;
    div r20 r21 into r22;
    cast r22 into r23 as u8;
    lt r1.top r23 into r24;
    not r15 into r25;
    not r16 into r26;
    and r25 r26 into r27;
    not r17 into r28;
    and r27 r28 into r29;
    not r18 into r30;
    and r29 r30 into r31;
    not r31 into r32;
    or r32 r24 into r33;
    assert.eq r33 true;
    not r15 into r34;
    not r16 into r35;
    and r34 r35 into r36;
    not r17 into r37;
    and r36 r37 into r38;
    and r38 r18 into r39;
    ternary r39 r1.s03 0u128 into r40;
    not r15 into r41;
    not r16 into r42;
    and r41 r42 into r43;
    and r43 r17 into r44;
    ternary r44 r1.s02 r40 into r45;
    not r15 into r46;
    and r46 r16 into r47;
    ternary r47 r1.s01 r45 into r48;
    ternary r15 r1.s00 r48 into r49;
    not 0u128 into r50;
    gte r1.member_size 128u8 into r51;
    sub 128u8 r1.member_size into r52;
    shr r50 r52 into r53;
    ternary r51 r50 r53 into r54;
    ternary r51 128u8 r1.member_size into r55;
    lt r1.top r1.capacity into r56;
    assert.eq r56 true;
    lte r0 r54 into r57;
    assert.eq r57 true;
    lte r54 r50 into r58;
    assert.eq r58 true;
    add r1.top 1u8 into r59;
    shl.w r49 r55 into r60;
    and r0 r54 into r61;
    or r60 r61 into r62;
    is.eq r14 0u8 into r63;
    is.eq r14 1u8 into r64;
    is.eq r14 2u8 into r65;
    is.eq r14 3u8 into r66;
    mul 4u16 8u16 into r67;
    mul r67 16u16 into r68;
    cast r1.member_size into r69 as u16;
    div r68 r69 into r70;
    cast r70 into r71 as u8;
    lt r1.top r71 into r72;
    not r63 into r73;
    not r64 into r74;
    and r73 r74 into r75;
    not r65 into r76;
    and r75 r76 into r77;
    not r66 into r78;
    and r77 r78 into r79;
    not r79 into r80;
    or r80 r72 into r81;
    assert.eq r81 true;
    ternary r66 r62 r1.s03 into r82;
    ternary r65 r62 r1.s02 into r83;
    ternary r65 r1.s03 r82 into r84;
    ternary r64 r62 r1.s01 into r85;
    ternary r64 r1.s02 r83 into r86;
    ternary r64 r1.s03 r84 into r87;
    ternary r63 r62 r1.s00 into r88;
    ternary r63 r1.s01 r85 into r89;
    ternary r63 r1.s02 r86 into r90;
    ternary r63 r1.s03 r87 into r91;
    cast r1.capacity r59 r55 r88 r89 r90 r91 into r92 as Stack;
    output r92 as Stack;


closure pop:
    input r0 as Stack;
    is.eq r0.top 0u8 into r1;
    not r1 into r2;
    assert.eq r2 true;
    mul r0.top r0.member_size into r3;
    div r3 128u8 into r4;
    is.eq r4 0u8 into r5;
    is.eq r4 1u8 into r6;
    is.eq r4 2u8 into r7;
    is.eq r4 3u8 into r8;
    mul 4u16 8u16 into r9;
    mul r9 16u16 into r10;
    cast r0.member_size into r11 as u16;
    div r10 r11 into r12;
    cast r12 into r13 as u8;
    lt r0.top r13 into r14;
    not r5 into r15;
    not r6 into r16;
    and r15 r16 into r17;
    not r7 into r18;
    and r17 r18 into r19;
    not r8 into r20;
    and r19 r20 into r21;
    not r21 into r22;
    or r22 r14 into r23;
    assert.eq r23 true;
    not r5 into r24;
    not r6 into r25;
    and r24 r25 into r26;
    not r7 into r27;
    and r26 r27 into r28;
    and r28 r8 into r29;
    ternary r29 r0.s03 0u128 into r30;
    not r5 into r31;
    not r6 into r32;
    and r31 r32 into r33;
    and r33 r7 into r34;
    ternary r34 r0.s02 r30 into r35;
    not r5 into r36;
    and r36 r6 into r37;
    ternary r37 r0.s01 r35 into r38;
    ternary r5 r0.s00 r38 into r39;
    not 0u128 into r40;
    gte r0.member_size 128u8 into r41;
    sub 128u8 r0.member_size into r42;
    shr r40 r42 into r43;
    ternary r41 r40 r43 into r44;
    ternary r41 128u8 r0.member_size into r45;
    is.neq r0.top 0u8 into r46;
    assert.eq r46 true;
    sub r0.top 1u8 into r47;
    and r39 r44 into r48;
    lt r45 128u8 into r49;
    shr.w r39 r45 into r50;
    rem 128u8 r45 into r51;
    shr r40 r51 into r52;
    and r50 r52 into r53;
    ternary r49 r53 0u128 into r54;
    is.eq r4 0u8 into r55;
    is.eq r4 1u8 into r56;
    is.eq r4 2u8 into r57;
    is.eq r4 3u8 into r58;
    mul 4u16 8u16 into r59;
    mul r59 16u16 into r60;
    cast r0.member_size into r61 as u16;
    div r60 r61 into r62;
    cast r62 into r63 as u8;
    lt r0.top r63 into r64;
    not r55 into r65;
    not r56 into r66;
    and r65 r66 into r67;
    not r57 into r68;
    and r67 r68 into r69;
    not r58 into r70;
    and r69 r70 into r71;
    not r71 into r72;
    or r72 r64 into r73;
    assert.eq r73 true;
    ternary r58 r54 r0.s03 into r74;
    ternary r57 r54 r0.s02 into r75;
    ternary r57 r0.s03 r74 into r76;
    ternary r56 r54 r0.s01 into r77;
    ternary r56 r0.s02 r75 into r78;
    ternary r56 r0.s03 r76 into r79;
    ternary r55 r54 r0.s00 into r80;
    ternary r55 r0.s01 r77 into r81;
    ternary r55 r0.s02 r78 into r82;
    ternary r55 r0.s03 r79 into r83;
    cast r0.capacity r47 r45 r80 r81 r82 r83 into r84 as Stack;
    output r48 as u128;
    output r84 as Stack;


function shuffle_deck:
    input r0 as i8.private;
    input r1 as [u128; 26u32].private;
    input r2 as [u128; 26u32].private;
    gte r0 1i8 into r3;
    assert.eq r3 true;
    lte r0 26i8 into r4;
    assert.eq r4 true;
    call init_stack 8u8 into r5;
    call init_stack 8u8 into r6;
    call init_stack 8u8 into r7;
    call push r1[0u32] r5 into r8;
    call push r1[1u32] r8 into r9;
    call push r1[2u32] r9 into r10;
    call push r1[3u32] r10 into r11;
    call push r1[4u32] r11 into r12;
    call push r1[5u32] r12 into r13;
    call push r1[6u32] r13 into r14;
    call push r1[7u32] r14 into r15;
    call push r1[8u32] r15 into r16;
    call push r1[9u32] r16 into r17;
    call push r1[10u32] r17 into r18;
    call push r1[11u32] r18 into r19;
    call push r1[12u32] r19 into r20;
    call push r1[13u32] r20 into r21;
    call push r1[14u32] r21 into r22;
    call push r1[15u32] r22 into r23;
    call push r1[16u32] r23 into r24;
    call push r1[17u32] r24 into r25;
    call push r1[18u32] r25 into r26;
    call push r1[19u32] r26 into r27;
    call push r1[20u32] r27 into r28;
    call push r1[21u32] r28 into r29;
    call push r1[22u32] r29 into r30;
    call push r1[23u32] r30 into r31;
    call push r1[24u32] r31 into r32;
    call push r1[25u32] r32 into r33;
    call push r2[0u32] r6 into r34;
    call push r2[1u32] r34 into r35;
    call push r2[2u32] r35 into r36;
    call push r2[3u32] r36 into r37;
    call push r2[4u32] r37 into r38;
    call push r2[5u32] r38 into r39;
    call push r2[6u32] r39 into r40;
    call push r2[7u32] r40 into r41;
    call push r2[8u32] r41 into r42;
    call push r2[9u32] r42 into r43;
    call push r2[10u32] r43 into r44;
    call push r2[11u32] r44 into r45;
    call push r2[12u32] r45 into r46;
    call push r2[13u32] r46 into r47;
    call push r2[14u32] r47 into r48;
    call push r2[15u32] r48 into r49;
    call push r2[16u32] r49 into r50;
    call push r2[17u32] r50 into r51;
    call push r2[18u32] r51 into r52;
    call push r2[19u32] r52 into r53;
    call push r2[20u32] r53 into r54;
    call push r2[21u32] r54 into r55;
    call push r2[22u32] r55 into r56;
    call push r2[23u32] r56 into r57;
    call push r2[24u32] r57 into r58;
    call push r2[25u32] r58 into r59;
    lt 0i8 r0 into r60;
    sub 0i8 r0 into r61;
    rem r61 2i8 into r62;
    is.eq r62 0i8 into r63;
    lte 0u8 25u8 into r64;
    ternary r64 true false into r65;
    ternary r64 false true into r66;
    ternary r63 true r66 into r67;
    ternary r63 false r65 into r68;
    ternary r60 true r68 into r69;
    ternary r60 false r67 into r70;
    or r70 r69 into r71;
    assert.eq r71 true;
    call init_stack 8u8 into r72;
    call pop r33 into r73 r74;
    call push r73 r7 into r75;
    add 0u8 1u8 into r76;
    ternary r70 r73 0u128 into r77;
    ternary r70 r74.capacity r72.capacity into r78;
    ternary r70 r74.top r72.top into r79;
    ternary r70 r74.member_size r72.member_size into r80;
    ternary r70 r74.s00 r72.s00 into r81;
    ternary r70 r74.s01 r72.s01 into r82;
    ternary r70 r74.s02 r72.s02 into r83;
    ternary r70 r74.s03 r72.s03 into r84;
    cast r78 r79 r80 r81 r82 r83 r84 into r85 as Stack;
    ternary r70 r73 0u128 into r86;
    ternary r70 r74.capacity r33.capacity into r87;
    ternary r70 r74.top r33.top into r88;
    ternary r70 r74.member_size r33.member_size into r89;
    ternary r70 r74.s00 r33.s00 into r90;
    ternary r70 r74.s01 r33.s01 into r91;
    ternary r70 r74.s02 r33.s02 into r92;
    ternary r70 r74.s03 r33.s03 into r93;
    cast r87 r88 r89 r90 r91 r92 r93 into r94 as Stack;
    ternary r70 r75.capacity r7.capacity into r95;
    ternary r70 r75.top r7.top into r96;
    ternary r70 r75.member_size r7.member_size into r97;
    ternary r70 r75.s00 r7.s00 into r98;
    ternary r70 r75.s01 r7.s01 into r99;
    ternary r70 r75.s02 r7.s02 into r100;
    ternary r70 r75.s03 r7.s03 into r101;
    cast r95 r96 r97 r98 r99 r100 r101 into r102 as Stack;
    ternary r70 r76 0u8 into r103;
    call pop r59 into r104 r105;
    call push r104 r102 into r106;
    add 0u8 1u8 into r107;
    ternary r69 r104 r77 into r108;
    ternary r69 r105.capacity r85.capacity into r109;
    ternary r69 r105.top r85.top into r110;
    ternary r69 r105.member_size r85.member_size into r111;
    ternary r69 r105.s00 r85.s00 into r112;
    ternary r69 r105.s01 r85.s01 into r113;
    ternary r69 r105.s02 r85.s02 into r114;
    ternary r69 r105.s03 r85.s03 into r115;
    cast r109 r110 r111 r112 r113 r114 r115 into r116 as Stack;
    ternary r69 r104 r86 into r117;
    ternary r69 r105.capacity r59.capacity into r118;
    ternary r69 r105.top r59.top into r119;
    ternary r69 r105.member_size r59.member_size into r120;
    ternary r69 r105.s00 r59.s00 into r121;
    ternary r69 r105.s01 r59.s01 into r122;
    ternary r69 r105.s02 r59.s02 into r123;
    ternary r69 r105.s03 r59.s03 into r124;
    cast r118 r119 r120 r121 r122 r123 r124 into r125 as Stack;
    ternary r69 r106.capacity r102.capacity into r126;
    ternary r69 r106.top r102.top into r127;
    ternary r69 r106.member_size r102.member_size into r128;
    ternary r69 r106.s00 r102.s00 into r129;
    ternary r69 r106.s01 r102.s01 into r130;
    ternary r69 r106.s02 r102.s02 into r131;
    ternary r69 r106.s03 r102.s03 into r132;
    cast r126 r127 r128 r129 r130 r131 r132 into r133 as Stack;
    ternary r69 r107 0u8 into r134;
    lt 1i8 r0 into r135;
    sub 1i8 r0 into r136;
    rem r136 2i8 into r137;
    is.eq r137 0i8 into r138;
    lte r134 25u8 into r139;
    ternary r139 true false into r140;
    ternary r139 false true into r141;
    ternary r138 true r141 into r142;
    ternary r138 false r140 into r143;
    ternary r135 true r143 into r144;
    ternary r135 false r142 into r145;
    or r145 r144 into r146;
    assert.eq r146 true;
    call init_stack 8u8 into r147;
    call pop r94 into r148 r149;
    call push r148 r133 into r150;
    add r103 1u8 into r151;
    ternary r145 r148 0u128 into r152;
    ternary r145 r149.capacity r147.capacity into r153;
    ternary r145 r149.top r147.top into r154;
    ternary r145 r149.member_size r147.member_size into r155;
    ternary r145 r149.s00 r147.s00 into r156;
    ternary r145 r149.s01 r147.s01 into r157;
    ternary r145 r149.s02 r147.s02 into r158;
    ternary r145 r149.s03 r147.s03 into r159;
    cast r153 r154 r155 r156 r157 r158 r159 into r160 as Stack;
    ternary r145 r148 0u128 into r161;
    ternary r145 r149.capacity r94.capacity into r162;
    ternary r145 r149.top r94.top into r163;
    ternary r145 r149.member_size r94.member_size into r164;
    ternary r145 r149.s00 r94.s00 into r165;
    ternary r145 r149.s01 r94.s01 into r166;
    ternary r145 r149.s02 r94.s02 into r167;
    ternary r145 r149.s03 r94.s03 into r168;
    cast r162 r163 r164 r165 r166 r167 r168 into r169 as Stack;
    ternary r145 r150.capacity r133.capacity into r170;
    ternary r145 r150.top r133.top into r171;
    ternary r145 r150.member_size r133.member_size into r172;
    ternary r145 r150.s00 r133.s00 into r173;
    ternary r145 r150.s01 r133.s01 into r174;
    ternary r145 r150.s02 r133.s02 into r175;
    ternary r145 r150.s03 r133.s03 into r176;
    cast r170 r171 r172 r173 r174 r175 r176 into r177 as Stack;
    ternary r145 r151 r103 into r178;
    call pop r125 into r179 r180;
    call push r179 r177 into r181;
    add r134 1u8 into r182;
    ternary r144 r179 r152 into r183;
    ternary r144 r180.capacity r160.capacity into r184;
    ternary r144 r180.top r160.top into r185;
    ternary r144 r180.member_size r160.member_size into r186;
    ternary r144 r180.s00 r160.s00 into r187;
    ternary r144 r180.s01 r160.s01 into r188;
    ternary r144 r180.s02 r160.s02 into r189;
    ternary r144 r180.s03 r160.s03 into r190;
    cast r184 r185 r186 r187 r188 r189 r190 into r191 as Stack;
    ternary r144 r179 r161 into r192;
    ternary r144 r180.capacity r125.capacity into r193;
    ternary r144 r180.top r125.top into r194;
    ternary r144 r180.member_size r125.member_size into r195;
    ternary r144 r180.s00 r125.s00 into r196;
    ternary r144 r180.s01 r125.s01 into r197;
    ternary r144 r180.s02 r125.s02 into r198;
    ternary r144 r180.s03 r125.s03 into r199;
    cast r193 r194 r195 r196 r197 r198 r199 into r200 as Stack;
    ternary r144 r181.capacity r177.capacity into r201;
    ternary r144 r181.top r177.top into r202;
    ternary r144 r181.member_size r177.member_size into r203;
    ternary r144 r181.s00 r177.s00 into r204;
    ternary r144 r181.s01 r177.s01 into r205;
    ternary r144 r181.s02 r177.s02 into r206;
    ternary r144 r181.s03 r177.s03 into r207;
    cast r201 r202 r203 r204 r205 r206 r207 into r208 as Stack;
    ternary r144 r182 r134 into r209;
    lt 2i8 r0 into r210;
    sub 2i8 r0 into r211;
    rem r211 2i8 into r212;
    is.eq r212 0i8 into r213;
    lte r209 25u8 into r214;
    ternary r214 true false into r215;
    ternary r214 false true into r216;
    ternary r213 true r216 into r217;
    ternary r213 false r215 into r218;
    ternary r210 true r218 into r219;
    ternary r210 false r217 into r220;
    or r220 r219 into r221;
    assert.eq r221 true;
    call init_stack 8u8 into r222;
    call pop r169 into r223 r224;
    call push r223 r208 into r225;
    add r178 1u8 into r226;
    ternary r220 r223 0u128 into r227;
    ternary r220 r224.capacity r222.capacity into r228;
    ternary r220 r224.top r222.top into r229;
    ternary r220 r224.member_size r222.member_size into r230;
    ternary r220 r224.s00 r222.s00 into r231;
    ternary r220 r224.s01 r222.s01 into r232;
    ternary r220 r224.s02 r222.s02 into r233;
    ternary r220 r224.s03 r222.s03 into r234;
    cast r228 r229 r230 r231 r232 r233 r234 into r235 as Stack;
    ternary r220 r223 0u128 into r236;
    ternary r220 r224.capacity r169.capacity into r237;
    ternary r220 r224.top r169.top into r238;
    ternary r220 r224.member_size r169.member_size into r239;
    ternary r220 r224.s00 r169.s00 into r240;
    ternary r220 r224.s01 r169.s01 into r241;
    ternary r220 r224.s02 r169.s02 into r242;
    ternary r220 r224.s03 r169.s03 into r243;
    cast r237 r238 r239 r240 r241 r242 r243 into r244 as Stack;
    ternary r220 r225.capacity r208.capacity into r245;
    ternary r220 r225.top r208.top into r246;
    ternary r220 r225.member_size r208.member_size into r247;
    ternary r220 r225.s00 r208.s00 into r248;
    ternary r220 r225.s01 r208.s01 into r249;
    ternary r220 r225.s02 r208.s02 into r250;
    ternary r220 r225.s03 r208.s03 into r251;
    cast r245 r246 r247 r248 r249 r250 r251 into r252 as Stack;
    ternary r220 r226 r178 into r253;
    call pop r200 into r254 r255;
    call push r254 r252 into r256;
    add r209 1u8 into r257;
    ternary r219 r254 r227 into r258;
    ternary r219 r255.capacity r235.capacity into r259;
    ternary r219 r255.top r235.top into r260;
    ternary r219 r255.member_size r235.member_size into r261;
    ternary r219 r255.s00 r235.s00 into r262;
    ternary r219 r255.s01 r235.s01 into r263;
    ternary r219 r255.s02 r235.s02 into r264;
    ternary r219 r255.s03 r235.s03 into r265;
    cast r259 r260 r261 r262 r263 r264 r265 into r266 as Stack;
    ternary r219 r254 r236 into r267;
    ternary r219 r255.capacity r200.capacity into r268;
    ternary r219 r255.top r200.top into r269;
    ternary r219 r255.member_size r200.member_size into r270;
    ternary r219 r255.s00 r200.s00 into r271;
    ternary r219 r255.s01 r200.s01 into r272;
    ternary r219 r255.s02 r200.s02 into r273;
    ternary r219 r255.s03 r200.s03 into r274;
    cast r268 r269 r270 r271 r272 r273 r274 into r275 as Stack;
    ternary r219 r256.capacity r252.capacity into r276;
    ternary r219 r256.top r252.top into r277;
    ternary r219 r256.member_size r252.member_size into r278;
    ternary r219 r256.s00 r252.s00 into r279;
    ternary r219 r256.s01 r252.s01 into r280;
    ternary r219 r256.s02 r252.s02 into r281;
    ternary r219 r256.s03 r252.s03 into r282;
    cast r276 r277 r278 r279 r280 r281 r282 into r283 as Stack;
    ternary r219 r257 r209 into r284;
    lt 3i8 r0 into r285;
    sub 3i8 r0 into r286;
    rem r286 2i8 into r287;
    is.eq r287 0i8 into r288;
    lte r284 25u8 into r289;
    ternary r289 true false into r290;
    ternary r289 false true into r291;
    ternary r288 true r291 into r292;
    ternary r288 false r290 into r293;
    ternary r285 true r293 into r294;
    ternary r285 false r292 into r295;
    or r295 r294 into r296;
    assert.eq r296 true;
    call init_stack 8u8 into r297;
    call pop r244 into r298 r299;
    call push r298 r283 into r300;
    add r253 1u8 into r301;
    ternary r295 r298 0u128 into r302;
    ternary r295 r299.capacity r297.capacity into r303;
    ternary r295 r299.top r297.top into r304;
    ternary r295 r299.member_size r297.member_size into r305;
    ternary r295 r299.s00 r297.s00 into r306;
    ternary r295 r299.s01 r297.s01 into r307;
    ternary r295 r299.s02 r297.s02 into r308;
    ternary r295 r299.s03 r297.s03 into r309;
    cast r303 r304 r305 r306 r307 r308 r309 into r310 as Stack;
    ternary r295 r298 0u128 into r311;
    ternary r295 r299.capacity r244.capacity into r312;
    ternary r295 r299.top r244.top into r313;
    ternary r295 r299.member_size r244.member_size into r314;
    ternary r295 r299.s00 r244.s00 into r315;
    ternary r295 r299.s01 r244.s01 into r316;
    ternary r295 r299.s02 r244.s02 into r317;
    ternary r295 r299.s03 r244.s03 into r318;
    cast r312 r313 r314 r315 r316 r317 r318 into r319 as Stack;
    ternary r295 r300.capacity r283.capacity into r320;
    ternary r295 r300.top r283.top into r321;
    ternary r295 r300.member_size r283.member_size into r322;
    ternary r295 r300.s00 r283.s00 into r323;
    ternary r295 r300.s01 r283.s01 into r324;
    ternary r295 r300.s02 r283.s02 into r325;
    ternary r295 r300.s03 r283.s03 into r326;
    cast r320 r321 r322 r323 r324 r325 r326 into r327 as Stack;
    ternary r295 r301 r253 into r328;
    call pop r275 into r329 r330;
    call push r329 r327 into r331;
    add r284 1u8 into r332;
    ternary r294 r329 r302 into r333;
    ternary r294 r330.capacity r310.capacity into r334;
    ternary r294 r330.top r310.top into r335;
    ternary r294 r330.member_size r310.member_size into r336;
    ternary r294 r330.s00 r310.s00 into r337;
    ternary r294 r330.s01 r310.s01 into r338;
    ternary r294 r330.s02 r310.s02 into r339;
    ternary r294 r330.s03 r310.s03 into r340;
    cast r334 r335 r336 r337 r338 r339 r340 into r341 as Stack;
    ternary r294 r329 r311 into r342;
    ternary r294 r330.capacity r275.capacity into r343;
    ternary r294 r330.top r275.top into r344;
    ternary r294 r330.member_size r275.member_size into r345;
    ternary r294 r330.s00 r275.s00 into r346;
    ternary r294 r330.s01 r275.s01 into r347;
    ternary r294 r330.s02 r275.s02 into r348;
    ternary r294 r330.s03 r275.s03 into r349;
    cast r343 r344 r345 r346 r347 r348 r349 into r350 as Stack;
    ternary r294 r331.capacity r327.capacity into r351;
    ternary r294 r331.top r327.top into r352;
    ternary r294 r331.member_size r327.member_size into r353;
    ternary r294 r331.s00 r327.s00 into r354;
    ternary r294 r331.s01 r327.s01 into r355;
    ternary r294 r331.s02 r327.s02 into r356;
    ternary r294 r331.s03 r327.s03 into r357;
    cast r351 r352 r353 r354 r355 r356 r357 into r358 as Stack;
    ternary r294 r332 r284 into r359;
    lt 4i8 r0 into r360;
    sub 4i8 r0 into r361;
    rem r361 2i8 into r362;
    is.eq r362 0i8 into r363;
    lte r359 25u8 into r364;
    ternary r364 true false into r365;
    ternary r364 false true into r366;
    ternary r363 true r366 into r367;
    ternary r363 false r365 into r368;
    ternary r360 true r368 into r369;
    ternary r360 false r367 into r370;
    or r370 r369 into r371;
    assert.eq r371 true;
    call init_stack 8u8 into r372;
    call pop r319 into r373 r374;
    call push r373 r358 into r375;
    add r328 1u8 into r376;
    ternary r370 r373 0u128 into r377;
    ternary r370 r374.capacity r372.capacity into r378;
    ternary r370 r374.top r372.top into r379;
    ternary r370 r374.member_size r372.member_size into r380;
    ternary r370 r374.s00 r372.s00 into r381;
    ternary r370 r374.s01 r372.s01 into r382;
    ternary r370 r374.s02 r372.s02 into r383;
    ternary r370 r374.s03 r372.s03 into r384;
    cast r378 r379 r380 r381 r382 r383 r384 into r385 as Stack;
    ternary r370 r373 0u128 into r386;
    ternary r370 r374.capacity r319.capacity into r387;
    ternary r370 r374.top r319.top into r388;
    ternary r370 r374.member_size r319.member_size into r389;
    ternary r370 r374.s00 r319.s00 into r390;
    ternary r370 r374.s01 r319.s01 into r391;
    ternary r370 r374.s02 r319.s02 into r392;
    ternary r370 r374.s03 r319.s03 into r393;
    cast r387 r388 r389 r390 r391 r392 r393 into r394 as Stack;
    ternary r370 r375.capacity r358.capacity into r395;
    ternary r370 r375.top r358.top into r396;
    ternary r370 r375.member_size r358.member_size into r397;
    ternary r370 r375.s00 r358.s00 into r398;
    ternary r370 r375.s01 r358.s01 into r399;
    ternary r370 r375.s02 r358.s02 into r400;
    ternary r370 r375.s03 r358.s03 into r401;
    cast r395 r396 r397 r398 r399 r400 r401 into r402 as Stack;
    ternary r370 r376 r328 into r403;
    call pop r350 into r404 r405;
    call push r404 r402 into r406;
    add r359 1u8 into r407;
    ternary r369 r404 r377 into r408;
    ternary r369 r405.capacity r385.capacity into r409;
    ternary r369 r405.top r385.top into r410;
    ternary r369 r405.member_size r385.member_size into r411;
    ternary r369 r405.s00 r385.s00 into r412;
    ternary r369 r405.s01 r385.s01 into r413;
    ternary r369 r405.s02 r385.s02 into r414;
    ternary r369 r405.s03 r385.s03 into r415;
    cast r409 r410 r411 r412 r413 r414 r415 into r416 as Stack;
    ternary r369 r404 r386 into r417;
    ternary r369 r405.capacity r350.capacity into r418;
    ternary r369 r405.top r350.top into r419;
    ternary r369 r405.member_size r350.member_size into r420;
    ternary r369 r405.s00 r350.s00 into r421;
    ternary r369 r405.s01 r350.s01 into r422;
    ternary r369 r405.s02 r350.s02 into r423;
    ternary r369 r405.s03 r350.s03 into r424;
    cast r418 r419 r420 r421 r422 r423 r424 into r425 as Stack;
    ternary r369 r406.capacity r402.capacity into r426;
    ternary r369 r406.top r402.top into r427;
    ternary r369 r406.member_size r402.member_size into r428;
    ternary r369 r406.s00 r402.s00 into r429;
    ternary r369 r406.s01 r402.s01 into r430;
    ternary r369 r406.s02 r402.s02 into r431;
    ternary r369 r406.s03 r402.s03 into r432;
    cast r426 r427 r428 r429 r430 r431 r432 into r433 as Stack;
    ternary r369 r407 r359 into r434;
    lt 5i8 r0 into r435;
    sub 5i8 r0 into r436;
    rem r436 2i8 into r437;
    is.eq r437 0i8 into r438;
    lte r434 25u8 into r439;
    ternary r439 true false into r440;
    ternary r439 false true into r441;
    ternary r438 true r441 into r442;
    ternary r438 false r440 into r443;
    ternary r435 true r443 into r444;
    ternary r435 false r442 into r445;
    or r445 r444 into r446;
    assert.eq r446 true;
    call init_stack 8u8 into r447;
    call pop r394 into r448 r449;
    call push r448 r433 into r450;
    add r403 1u8 into r451;
    ternary r445 r448 0u128 into r452;
    ternary r445 r449.capacity r447.capacity into r453;
    ternary r445 r449.top r447.top into r454;
    ternary r445 r449.member_size r447.member_size into r455;
    ternary r445 r449.s00 r447.s00 into r456;
    ternary r445 r449.s01 r447.s01 into r457;
    ternary r445 r449.s02 r447.s02 into r458;
    ternary r445 r449.s03 r447.s03 into r459;
    cast r453 r454 r455 r456 r457 r458 r459 into r460 as Stack;
    ternary r445 r448 0u128 into r461;
    ternary r445 r449.capacity r394.capacity into r462;
    ternary r445 r449.top r394.top into r463;
    ternary r445 r449.member_size r394.member_size into r464;
    ternary r445 r449.s00 r394.s00 into r465;
    ternary r445 r449.s01 r394.s01 into r466;
    ternary r445 r449.s02 r394.s02 into r467;
    ternary r445 r449.s03 r394.s03 into r468;
    cast r462 r463 r464 r465 r466 r467 r468 into r469 as Stack;
    ternary r445 r450.capacity r433.capacity into r470;
    ternary r445 r450.top r433.top into r471;
    ternary r445 r450.member_size r433.member_size into r472;
    ternary r445 r450.s00 r433.s00 into r473;
    ternary r445 r450.s01 r433.s01 into r474;
    ternary r445 r450.s02 r433.s02 into r475;
    ternary r445 r450.s03 r433.s03 into r476;
    cast r470 r471 r472 r473 r474 r475 r476 into r477 as Stack;
    ternary r445 r451 r403 into r478;
    call pop r425 into r479 r480;
    call push r479 r477 into r481;
    add r434 1u8 into r482;
    ternary r444 r479 r452 into r483;
    ternary r444 r480.capacity r460.capacity into r484;
    ternary r444 r480.top r460.top into r485;
    ternary r444 r480.member_size r460.member_size into r486;
    ternary r444 r480.s00 r460.s00 into r487;
    ternary r444 r480.s01 r460.s01 into r488;
    ternary r444 r480.s02 r460.s02 into r489;
    ternary r444 r480.s03 r460.s03 into r490;
    cast r484 r485 r486 r487 r488 r489 r490 into r491 as Stack;
    ternary r444 r479 r461 into r492;
    ternary r444 r480.capacity r425.capacity into r493;
    ternary r444 r480.top r425.top into r494;
    ternary r444 r480.member_size r425.member_size into r495;
    ternary r444 r480.s00 r425.s00 into r496;
    ternary r444 r480.s01 r425.s01 into r497;
    ternary r444 r480.s02 r425.s02 into r498;
    ternary r444 r480.s03 r425.s03 into r499;
    cast r493 r494 r495 r496 r497 r498 r499 into r500 as Stack;
    ternary r444 r481.capacity r477.capacity into r501;
    ternary r444 r481.top r477.top into r502;
    ternary r444 r481.member_size r477.member_size into r503;
    ternary r444 r481.s00 r477.s00 into r504;
    ternary r444 r481.s01 r477.s01 into r505;
    ternary r444 r481.s02 r477.s02 into r506;
    ternary r444 r481.s03 r477.s03 into r507;
    cast r501 r502 r503 r504 r505 r506 r507 into r508 as Stack;
    ternary r444 r482 r434 into r509;
    lt 6i8 r0 into r510;
    sub 6i8 r0 into r511;
    rem r511 2i8 into r512;
    is.eq r512 0i8 into r513;
    lte r509 25u8 into r514;
    ternary r514 true false into r515;
    ternary r514 false true into r516;
    ternary r513 true r516 into r517;
    ternary r513 false r515 into r518;
    ternary r510 true r518 into r519;
    ternary r510 false r517 into r520;
    or r520 r519 into r521;
    assert.eq r521 true;
    call init_stack 8u8 into r522;
    call pop r469 into r523 r524;
    call push r523 r508 into r525;
    add r478 1u8 into r526;
    ternary r520 r523 0u128 into r527;
    ternary r520 r524.capacity r522.capacity into r528;
    ternary r520 r524.top r522.top into r529;
    ternary r520 r524.member_size r522.member_size into r530;
    ternary r520 r524.s00 r522.s00 into r531;
    ternary r520 r524.s01 r522.s01 into r532;
    ternary r520 r524.s02 r522.s02 into r533;
    ternary r520 r524.s03 r522.s03 into r534;
    cast r528 r529 r530 r531 r532 r533 r534 into r535 as Stack;
    ternary r520 r523 0u128 into r536;
    ternary r520 r524.capacity r469.capacity into r537;
    ternary r520 r524.top r469.top into r538;
    ternary r520 r524.member_size r469.member_size into r539;
    ternary r520 r524.s00 r469.s00 into r540;
    ternary r520 r524.s01 r469.s01 into r541;
    ternary r520 r524.s02 r469.s02 into r542;
    ternary r520 r524.s03 r469.s03 into r543;
    cast r537 r538 r539 r540 r541 r542 r543 into r544 as Stack;
    ternary r520 r525.capacity r508.capacity into r545;
    ternary r520 r525.top r508.top into r546;
    ternary r520 r525.member_size r508.member_size into r547;
    ternary r520 r525.s00 r508.s00 into r548;
    ternary r520 r525.s01 r508.s01 into r549;
    ternary r520 r525.s02 r508.s02 into r550;
    ternary r520 r525.s03 r508.s03 into r551;
    cast r545 r546 r547 r548 r549 r550 r551 into r552 as Stack;
    ternary r520 r526 r478 into r553;
    call pop r500 into r554 r555;
    call push r554 r552 into r556;
    add r509 1u8 into r557;
    ternary r519 r554 r527 into r558;
    ternary r519 r555.capacity r535.capacity into r559;
    ternary r519 r555.top r535.top into r560;
    ternary r519 r555.member_size r535.member_size into r561;
    ternary r519 r555.s00 r535.s00 into r562;
    ternary r519 r555.s01 r535.s01 into r563;
    ternary r519 r555.s02 r535.s02 into r564;
    ternary r519 r555.s03 r535.s03 into r565;
    cast r559 r560 r561 r562 r563 r564 r565 into r566 as Stack;
    ternary r519 r554 r536 into r567;
    ternary r519 r555.capacity r500.capacity into r568;
    ternary r519 r555.top r500.top into r569;
    ternary r519 r555.member_size r500.member_size into r570;
    ternary r519 r555.s00 r500.s00 into r571;
    ternary r519 r555.s01 r500.s01 into r572;
    ternary r519 r555.s02 r500.s02 into r573;
    ternary r519 r555.s03 r500.s03 into r574;
    cast r568 r569 r570 r571 r572 r573 r574 into r575 as Stack;
    ternary r519 r556.capacity r552.capacity into r576;
    ternary r519 r556.top r552.top into r577;
    ternary r519 r556.member_size r552.member_size into r578;
    ternary r519 r556.s00 r552.s00 into r579;
    ternary r519 r556.s01 r552.s01 into r580;
    ternary r519 r556.s02 r552.s02 into r581;
    ternary r519 r556.s03 r552.s03 into r582;
    cast r576 r577 r578 r579 r580 r581 r582 into r583 as Stack;
    ternary r519 r557 r509 into r584;
    lt 7i8 r0 into r585;
    sub 7i8 r0 into r586;
    rem r586 2i8 into r587;
    is.eq r587 0i8 into r588;
    lte r584 25u8 into r589;
    ternary r589 true false into r590;
    ternary r589 false true into r591;
    ternary r588 true r591 into r592;
    ternary r588 false r590 into r593;
    ternary r585 true r593 into r594;
    ternary r585 false r592 into r595;
    or r595 r594 into r596;
    assert.eq r596 true;
    call init_stack 8u8 into r597;
    call pop r544 into r598 r599;
    call push r598 r583 into r600;
    add r553 1u8 into r601;
    ternary r595 r598 0u128 into r602;
    ternary r595 r599.capacity r597.capacity into r603;
    ternary r595 r599.top r597.top into r604;
    ternary r595 r599.member_size r597.member_size into r605;
    ternary r595 r599.s00 r597.s00 into r606;
    ternary r595 r599.s01 r597.s01 into r607;
    ternary r595 r599.s02 r597.s02 into r608;
    ternary r595 r599.s03 r597.s03 into r609;
    cast r603 r604 r605 r606 r607 r608 r609 into r610 as Stack;
    ternary r595 r598 0u128 into r611;
    ternary r595 r599.capacity r544.capacity into r612;
    ternary r595 r599.top r544.top into r613;
    ternary r595 r599.member_size r544.member_size into r614;
    ternary r595 r599.s00 r544.s00 into r615;
    ternary r595 r599.s01 r544.s01 into r616;
    ternary r595 r599.s02 r544.s02 into r617;
    ternary r595 r599.s03 r544.s03 into r618;
    cast r612 r613 r614 r615 r616 r617 r618 into r619 as Stack;
    ternary r595 r600.capacity r583.capacity into r620;
    ternary r595 r600.top r583.top into r621;
    ternary r595 r600.member_size r583.member_size into r622;
    ternary r595 r600.s00 r583.s00 into r623;
    ternary r595 r600.s01 r583.s01 into r624;
    ternary r595 r600.s02 r583.s02 into r625;
    ternary r595 r600.s03 r583.s03 into r626;
    cast r620 r621 r622 r623 r624 r625 r626 into r627 as Stack;
    ternary r595 r601 r553 into r628;
    call pop r575 into r629 r630;
    call push r629 r627 into r631;
    add r584 1u8 into r632;
    ternary r594 r629 r602 into r633;
    ternary r594 r630.capacity r610.capacity into r634;
    ternary r594 r630.top r610.top into r635;
    ternary r594 r630.member_size r610.member_size into r636;
    ternary r594 r630.s00 r610.s00 into r637;
    ternary r594 r630.s01 r610.s01 into r638;
    ternary r594 r630.s02 r610.s02 into r639;
    ternary r594 r630.s03 r610.s03 into r640;
    cast r634 r635 r636 r637 r638 r639 r640 into r641 as Stack;
    ternary r594 r629 r611 into r642;
    ternary r594 r630.capacity r575.capacity into r643;
    ternary r594 r630.top r575.top into r644;
    ternary r594 r630.member_size r575.member_size into r645;
    ternary r594 r630.s00 r575.s00 into r646;
    ternary r594 r630.s01 r575.s01 into r647;
    ternary r594 r630.s02 r575.s02 into r648;
    ternary r594 r630.s03 r575.s03 into r649;
    cast r643 r644 r645 r646 r647 r648 r649 into r650 as Stack;
    ternary r594 r631.capacity r627.capacity into r651;
    ternary r594 r631.top r627.top into r652;
    ternary r594 r631.member_size r627.member_size into r653;
    ternary r594 r631.s00 r627.s00 into r654;
    ternary r594 r631.s01 r627.s01 into r655;
    ternary r594 r631.s02 r627.s02 into r656;
    ternary r594 r631.s03 r627.s03 into r657;
    cast r651 r652 r653 r654 r655 r656 r657 into r658 as Stack;
    ternary r594 r632 r584 into r659;
    lt 8i8 r0 into r660;
    sub 8i8 r0 into r661;
    rem r661 2i8 into r662;
    is.eq r662 0i8 into r663;
    lte r659 25u8 into r664;
    ternary r664 true false into r665;
    ternary r664 false true into r666;
    ternary r663 true r666 into r667;
    ternary r663 false r665 into r668;
    ternary r660 true r668 into r669;
    ternary r660 false r667 into r670;
    or r670 r669 into r671;
    assert.eq r671 true;
    call init_stack 8u8 into r672;
    call pop r619 into r673 r674;
    call push r673 r658 into r675;
    add r628 1u8 into r676;
    ternary r670 r673 0u128 into r677;
    ternary r670 r674.capacity r672.capacity into r678;
    ternary r670 r674.top r672.top into r679;
    ternary r670 r674.member_size r672.member_size into r680;
    ternary r670 r674.s00 r672.s00 into r681;
    ternary r670 r674.s01 r672.s01 into r682;
    ternary r670 r674.s02 r672.s02 into r683;
    ternary r670 r674.s03 r672.s03 into r684;
    cast r678 r679 r680 r681 r682 r683 r684 into r685 as Stack;
    ternary r670 r673 0u128 into r686;
    ternary r670 r674.capacity r619.capacity into r687;
    ternary r670 r674.top r619.top into r688;
    ternary r670 r674.member_size r619.member_size into r689;
    ternary r670 r674.s00 r619.s00 into r690;
    ternary r670 r674.s01 r619.s01 into r691;
    ternary r670 r674.s02 r619.s02 into r692;
    ternary r670 r674.s03 r619.s03 into r693;
    cast r687 r688 r689 r690 r691 r692 r693 into r694 as Stack;
    ternary r670 r675.capacity r658.capacity into r695;
    ternary r670 r675.top r658.top into r696;
    ternary r670 r675.member_size r658.member_size into r697;
    ternary r670 r675.s00 r658.s00 into r698;
    ternary r670 r675.s01 r658.s01 into r699;
    ternary r670 r675.s02 r658.s02 into r700;
    ternary r670 r675.s03 r658.s03 into r701;
    cast r695 r696 r697 r698 r699 r700 r701 into r702 as Stack;
    ternary r670 r676 r628 into r703;
    call pop r650 into r704 r705;
    call push r704 r702 into r706;
    add r659 1u8 into r707;
    ternary r669 r704 r677 into r708;
    ternary r669 r705.capacity r685.capacity into r709;
    ternary r669 r705.top r685.top into r710;
    ternary r669 r705.member_size r685.member_size into r711;
    ternary r669 r705.s00 r685.s00 into r712;
    ternary r669 r705.s01 r685.s01 into r713;
    ternary r669 r705.s02 r685.s02 into r714;
    ternary r669 r705.s03 r685.s03 into r715;
    cast r709 r710 r711 r712 r713 r714 r715 into r716 as Stack;
    ternary r669 r704 r686 into r717;
    ternary r669 r705.capacity r650.capacity into r718;
    ternary r669 r705.top r650.top into r719;
    ternary r669 r705.member_size r650.member_size into r720;
    ternary r669 r705.s00 r650.s00 into r721;
    ternary r669 r705.s01 r650.s01 into r722;
    ternary r669 r705.s02 r650.s02 into r723;
    ternary r669 r705.s03 r650.s03 into r724;
    cast r718 r719 r720 r721 r722 r723 r724 into r725 as Stack;
    ternary r669 r706.capacity r702.capacity into r726;
    ternary r669 r706.top r702.top into r727;
    ternary r669 r706.member_size r702.member_size into r728;
    ternary r669 r706.s00 r702.s00 into r729;
    ternary r669 r706.s01 r702.s01 into r730;
    ternary r669 r706.s02 r702.s02 into r731;
    ternary r669 r706.s03 r702.s03 into r732;
    cast r726 r727 r728 r729 r730 r731 r732 into r733 as Stack;
    ternary r669 r707 r659 into r734;
    lt 9i8 r0 into r735;
    sub 9i8 r0 into r736;
    rem r736 2i8 into r737;
    is.eq r737 0i8 into r738;
    lte r734 25u8 into r739;
    ternary r739 true false into r740;
    ternary r739 false true into r741;
    ternary r738 true r741 into r742;
    ternary r738 false r740 into r743;
    ternary r735 true r743 into r744;
    ternary r735 false r742 into r745;
    or r745 r744 into r746;
    assert.eq r746 true;
    call init_stack 8u8 into r747;
    call pop r694 into r748 r749;
    call push r748 r733 into r750;
    add r703 1u8 into r751;
    ternary r745 r748 0u128 into r752;
    ternary r745 r749.capacity r747.capacity into r753;
    ternary r745 r749.top r747.top into r754;
    ternary r745 r749.member_size r747.member_size into r755;
    ternary r745 r749.s00 r747.s00 into r756;
    ternary r745 r749.s01 r747.s01 into r757;
    ternary r745 r749.s02 r747.s02 into r758;
    ternary r745 r749.s03 r747.s03 into r759;
    cast r753 r754 r755 r756 r757 r758 r759 into r760 as Stack;
    ternary r745 r748 0u128 into r761;
    ternary r745 r749.capacity r694.capacity into r762;
    ternary r745 r749.top r694.top into r763;
    ternary r745 r749.member_size r694.member_size into r764;
    ternary r745 r749.s00 r694.s00 into r765;
    ternary r745 r749.s01 r694.s01 into r766;
    ternary r745 r749.s02 r694.s02 into r767;
    ternary r745 r749.s03 r694.s03 into r768;
    cast r762 r763 r764 r765 r766 r767 r768 into r769 as Stack;
    ternary r745 r750.capacity r733.capacity into r770;
    ternary r745 r750.top r733.top into r771;
    ternary r745 r750.member_size r733.member_size into r772;
    ternary r745 r750.s00 r733.s00 into r773;
    ternary r745 r750.s01 r733.s01 into r774;
    ternary r745 r750.s02 r733.s02 into r775;
    ternary r745 r750.s03 r733.s03 into r776;
    cast r770 r771 r772 r773 r774 r775 r776 into r777 as Stack;
    ternary r745 r751 r703 into r778;
    call pop r725 into r779 r780;
    call push r779 r777 into r781;
    add r734 1u8 into r782;
    ternary r744 r779 r752 into r783;
    ternary r744 r780.capacity r760.capacity into r784;
    ternary r744 r780.top r760.top into r785;
    ternary r744 r780.member_size r760.member_size into r786;
    ternary r744 r780.s00 r760.s00 into r787;
    ternary r744 r780.s01 r760.s01 into r788;
    ternary r744 r780.s02 r760.s02 into r789;
    ternary r744 r780.s03 r760.s03 into r790;
    cast r784 r785 r786 r787 r788 r789 r790 into r791 as Stack;
    ternary r744 r779 r761 into r792;
    ternary r744 r780.capacity r725.capacity into r793;
    ternary r744 r780.top r725.top into r794;
    ternary r744 r780.member_size r725.member_size into r795;
    ternary r744 r780.s00 r725.s00 into r796;
    ternary r744 r780.s01 r725.s01 into r797;
    ternary r744 r780.s02 r725.s02 into r798;
    ternary r744 r780.s03 r725.s03 into r799;
    cast r793 r794 r795 r796 r797 r798 r799 into r800 as Stack;
    ternary r744 r781.capacity r777.capacity into r801;
    ternary r744 r781.top r777.top into r802;
    ternary r744 r781.member_size r777.member_size into r803;
    ternary r744 r781.s00 r777.s00 into r804;
    ternary r744 r781.s01 r777.s01 into r805;
    ternary r744 r781.s02 r777.s02 into r806;
    ternary r744 r781.s03 r777.s03 into r807;
    cast r801 r802 r803 r804 r805 r806 r807 into r808 as Stack;
    ternary r744 r782 r734 into r809;
    lt 10i8 r0 into r810;
    sub 10i8 r0 into r811;
    rem r811 2i8 into r812;
    is.eq r812 0i8 into r813;
    lte r809 25u8 into r814;
    ternary r814 true false into r815;
    ternary r814 false true into r816;
    ternary r813 true r816 into r817;
    ternary r813 false r815 into r818;
    ternary r810 true r818 into r819;
    ternary r810 false r817 into r820;
    or r820 r819 into r821;
    assert.eq r821 true;
    call init_stack 8u8 into r822;
    call pop r769 into r823 r824;
    call push r823 r808 into r825;
    add r778 1u8 into r826;
    ternary r820 r823 0u128 into r827;
    ternary r820 r824.capacity r822.capacity into r828;
    ternary r820 r824.top r822.top into r829;
    ternary r820 r824.member_size r822.member_size into r830;
    ternary r820 r824.s00 r822.s00 into r831;
    ternary r820 r824.s01 r822.s01 into r832;
    ternary r820 r824.s02 r822.s02 into r833;
    ternary r820 r824.s03 r822.s03 into r834;
    cast r828 r829 r830 r831 r832 r833 r834 into r835 as Stack;
    ternary r820 r823 0u128 into r836;
    ternary r820 r824.capacity r769.capacity into r837;
    ternary r820 r824.top r769.top into r838;
    ternary r820 r824.member_size r769.member_size into r839;
    ternary r820 r824.s00 r769.s00 into r840;
    ternary r820 r824.s01 r769.s01 into r841;
    ternary r820 r824.s02 r769.s02 into r842;
    ternary r820 r824.s03 r769.s03 into r843;
    cast r837 r838 r839 r840 r841 r842 r843 into r844 as Stack;
    ternary r820 r825.capacity r808.capacity into r845;
    ternary r820 r825.top r808.top into r846;
    ternary r820 r825.member_size r808.member_size into r847;
    ternary r820 r825.s00 r808.s00 into r848;
    ternary r820 r825.s01 r808.s01 into r849;
    ternary r820 r825.s02 r808.s02 into r850;
    ternary r820 r825.s03 r808.s03 into r851;
    cast r845 r846 r847 r848 r849 r850 r851 into r852 as Stack;
    ternary r820 r826 r778 into r853;
    call pop r800 into r854 r855;
    call push r854 r852 into r856;
    add r809 1u8 into r857;
    ternary r819 r854 r827 into r858;
    ternary r819 r855.capacity r835.capacity into r859;
    ternary r819 r855.top r835.top into r860;
    ternary r819 r855.member_size r835.member_size into r861;
    ternary r819 r855.s00 r835.s00 into r862;
    ternary r819 r855.s01 r835.s01 into r863;
    ternary r819 r855.s02 r835.s02 into r864;
    ternary r819 r855.s03 r835.s03 into r865;
    cast r859 r860 r861 r862 r863 r864 r865 into r866 as Stack;
    ternary r819 r854 r836 into r867;
    ternary r819 r855.capacity r800.capacity into r868;
    ternary r819 r855.top r800.top into r869;
    ternary r819 r855.member_size r800.member_size into r870;
    ternary r819 r855.s00 r800.s00 into r871;
    ternary r819 r855.s01 r800.s01 into r872;
    ternary r819 r855.s02 r800.s02 into r873;
    ternary r819 r855.s03 r800.s03 into r874;
    cast r868 r869 r870 r871 r872 r873 r874 into r875 as Stack;
    ternary r819 r856.capacity r852.capacity into r876;
    ternary r819 r856.top r852.top into r877;
    ternary r819 r856.member_size r852.member_size into r878;
    ternary r819 r856.s00 r852.s00 into r879;
    ternary r819 r856.s01 r852.s01 into r880;
    ternary r819 r856.s02 r852.s02 into r881;
    ternary r819 r856.s03 r852.s03 into r882;
    cast r876 r877 r878 r879 r880 r881 r882 into r883 as Stack;
    ternary r819 r857 r809 into r884;
    lt 11i8 r0 into r885;
    sub 11i8 r0 into r886;
    rem r886 2i8 into r887;
    is.eq r887 0i8 into r888;
    lte r884 25u8 into r889;
    ternary r889 true false into r890;
    ternary r889 false true into r891;
    ternary r888 true r891 into r892;
    ternary r888 false r890 into r893;
    ternary r885 true r893 into r894;
    ternary r885 false r892 into r895;
    or r895 r894 into r896;
    assert.eq r896 true;
    call init_stack 8u8 into r897;
    call pop r844 into r898 r899;
    call push r898 r883 into r900;
    add r853 1u8 into r901;
    ternary r895 r898 0u128 into r902;
    ternary r895 r899.capacity r897.capacity into r903;
    ternary r895 r899.top r897.top into r904;
    ternary r895 r899.member_size r897.member_size into r905;
    ternary r895 r899.s00 r897.s00 into r906;
    ternary r895 r899.s01 r897.s01 into r907;
    ternary r895 r899.s02 r897.s02 into r908;
    ternary r895 r899.s03 r897.s03 into r909;
    cast r903 r904 r905 r906 r907 r908 r909 into r910 as Stack;
    ternary r895 r898 0u128 into r911;
    ternary r895 r899.capacity r844.capacity into r912;
    ternary r895 r899.top r844.top into r913;
    ternary r895 r899.member_size r844.member_size into r914;
    ternary r895 r899.s00 r844.s00 into r915;
    ternary r895 r899.s01 r844.s01 into r916;
    ternary r895 r899.s02 r844.s02 into r917;
    ternary r895 r899.s03 r844.s03 into r918;
    cast r912 r913 r914 r915 r916 r917 r918 into r919 as Stack;
    ternary r895 r900.capacity r883.capacity into r920;
    ternary r895 r900.top r883.top into r921;
    ternary r895 r900.member_size r883.member_size into r922;
    ternary r895 r900.s00 r883.s00 into r923;
    ternary r895 r900.s01 r883.s01 into r924;
    ternary r895 r900.s02 r883.s02 into r925;
    ternary r895 r900.s03 r883.s03 into r926;
    cast r920 r921 r922 r923 r924 r925 r926 into r927 as Stack;
    ternary r895 r901 r853 into r928;
    call pop r875 into r929 r930;
    call push r929 r927 into r931;
    add r884 1u8 into r932;
    ternary r894 r929 r902 into r933;
    ternary r894 r930.capacity r910.capacity into r934;
    ternary r894 r930.top r910.top into r935;
    ternary r894 r930.member_size r910.member_size into r936;
    ternary r894 r930.s00 r910.s00 into r937;
    ternary r894 r930.s01 r910.s01 into r938;
    ternary r894 r930.s02 r910.s02 into r939;
    ternary r894 r930.s03 r910.s03 into r940;
    cast r934 r935 r936 r937 r938 r939 r940 into r941 as Stack;
    ternary r894 r929 r911 into r942;
    ternary r894 r930.capacity r875.capacity into r943;
    ternary r894 r930.top r875.top into r944;
    ternary r894 r930.member_size r875.member_size into r945;
    ternary r894 r930.s00 r875.s00 into r946;
    ternary r894 r930.s01 r875.s01 into r947;
    ternary r894 r930.s02 r875.s02 into r948;
    ternary r894 r930.s03 r875.s03 into r949;
    cast r943 r944 r945 r946 r947 r948 r949 into r950 as Stack;
    ternary r894 r931.capacity r927.capacity into r951;
    ternary r894 r931.top r927.top into r952;
    ternary r894 r931.member_size r927.member_size into r953;
    ternary r894 r931.s00 r927.s00 into r954;
    ternary r894 r931.s01 r927.s01 into r955;
    ternary r894 r931.s02 r927.s02 into r956;
    ternary r894 r931.s03 r927.s03 into r957;
    cast r951 r952 r953 r954 r955 r956 r957 into r958 as Stack;
    ternary r894 r932 r884 into r959;
    lt 12i8 r0 into r960;
    sub 12i8 r0 into r961;
    rem r961 2i8 into r962;
    is.eq r962 0i8 into r963;
    lte r959 25u8 into r964;
    ternary r964 true false into r965;
    ternary r964 false true into r966;
    ternary r963 true r966 into r967;
    ternary r963 false r965 into r968;
    ternary r960 true r968 into r969;
    ternary r960 false r967 into r970;
    or r970 r969 into r971;
    assert.eq r971 true;
    call init_stack 8u8 into r972;
    call pop r919 into r973 r974;
    call push r973 r958 into r975;
    add r928 1u8 into r976;
    ternary r970 r973 0u128 into r977;
    ternary r970 r974.capacity r972.capacity into r978;
    ternary r970 r974.top r972.top into r979;
    ternary r970 r974.member_size r972.member_size into r980;
    ternary r970 r974.s00 r972.s00 into r981;
    ternary r970 r974.s01 r972.s01 into r982;
    ternary r970 r974.s02 r972.s02 into r983;
    ternary r970 r974.s03 r972.s03 into r984;
    cast r978 r979 r980 r981 r982 r983 r984 into r985 as Stack;
    ternary r970 r973 0u128 into r986;
    ternary r970 r974.capacity r919.capacity into r987;
    ternary r970 r974.top r919.top into r988;
    ternary r970 r974.member_size r919.member_size into r989;
    ternary r970 r974.s00 r919.s00 into r990;
    ternary r970 r974.s01 r919.s01 into r991;
    ternary r970 r974.s02 r919.s02 into r992;
    ternary r970 r974.s03 r919.s03 into r993;
    cast r987 r988 r989 r990 r991 r992 r993 into r994 as Stack;
    ternary r970 r975.capacity r958.capacity into r995;
    ternary r970 r975.top r958.top into r996;
    ternary r970 r975.member_size r958.member_size into r997;
    ternary r970 r975.s00 r958.s00 into r998;
    ternary r970 r975.s01 r958.s01 into r999;
    ternary r970 r975.s02 r958.s02 into r1000;
    ternary r970 r975.s03 r958.s03 into r1001;
    cast r995 r996 r997 r998 r999 r1000 r1001 into r1002 as Stack;
    ternary r970 r976 r928 into r1003;
    call pop r950 into r1004 r1005;
    call push r1004 r1002 into r1006;
    add r959 1u8 into r1007;
    ternary r969 r1004 r977 into r1008;
    ternary r969 r1005.capacity r985.capacity into r1009;
    ternary r969 r1005.top r985.top into r1010;
    ternary r969 r1005.member_size r985.member_size into r1011;
    ternary r969 r1005.s00 r985.s00 into r1012;
    ternary r969 r1005.s01 r985.s01 into r1013;
    ternary r969 r1005.s02 r985.s02 into r1014;
    ternary r969 r1005.s03 r985.s03 into r1015;
    cast r1009 r1010 r1011 r1012 r1013 r1014 r1015 into r1016 as Stack;
    ternary r969 r1004 r986 into r1017;
    ternary r969 r1005.capacity r950.capacity into r1018;
    ternary r969 r1005.top r950.top into r1019;
    ternary r969 r1005.member_size r950.member_size into r1020;
    ternary r969 r1005.s00 r950.s00 into r1021;
    ternary r969 r1005.s01 r950.s01 into r1022;
    ternary r969 r1005.s02 r950.s02 into r1023;
    ternary r969 r1005.s03 r950.s03 into r1024;
    cast r1018 r1019 r1020 r1021 r1022 r1023 r1024 into r1025 as Stack;
    ternary r969 r1006.capacity r1002.capacity into r1026;
    ternary r969 r1006.top r1002.top into r1027;
    ternary r969 r1006.member_size r1002.member_size into r1028;
    ternary r969 r1006.s00 r1002.s00 into r1029;
    ternary r969 r1006.s01 r1002.s01 into r1030;
    ternary r969 r1006.s02 r1002.s02 into r1031;
    ternary r969 r1006.s03 r1002.s03 into r1032;
    cast r1026 r1027 r1028 r1029 r1030 r1031 r1032 into r1033 as Stack;
    ternary r969 r1007 r959 into r1034;
    lt 13i8 r0 into r1035;
    sub 13i8 r0 into r1036;
    rem r1036 2i8 into r1037;
    is.eq r1037 0i8 into r1038;
    lte r1034 25u8 into r1039;
    ternary r1039 true false into r1040;
    ternary r1039 false true into r1041;
    ternary r1038 true r1041 into r1042;
    ternary r1038 false r1040 into r1043;
    ternary r1035 true r1043 into r1044;
    ternary r1035 false r1042 into r1045;
    or r1045 r1044 into r1046;
    assert.eq r1046 true;
    call init_stack 8u8 into r1047;
    call pop r994 into r1048 r1049;
    call push r1048 r1033 into r1050;
    add r1003 1u8 into r1051;
    ternary r1045 r1048 0u128 into r1052;
    ternary r1045 r1049.capacity r1047.capacity into r1053;
    ternary r1045 r1049.top r1047.top into r1054;
    ternary r1045 r1049.member_size r1047.member_size into r1055;
    ternary r1045 r1049.s00 r1047.s00 into r1056;
    ternary r1045 r1049.s01 r1047.s01 into r1057;
    ternary r1045 r1049.s02 r1047.s02 into r1058;
    ternary r1045 r1049.s03 r1047.s03 into r1059;
    cast r1053 r1054 r1055 r1056 r1057 r1058 r1059 into r1060 as Stack;
    ternary r1045 r1048 0u128 into r1061;
    ternary r1045 r1049.capacity r994.capacity into r1062;
    ternary r1045 r1049.top r994.top into r1063;
    ternary r1045 r1049.member_size r994.member_size into r1064;
    ternary r1045 r1049.s00 r994.s00 into r1065;
    ternary r1045 r1049.s01 r994.s01 into r1066;
    ternary r1045 r1049.s02 r994.s02 into r1067;
    ternary r1045 r1049.s03 r994.s03 into r1068;
    cast r1062 r1063 r1064 r1065 r1066 r1067 r1068 into r1069 as Stack;
    ternary r1045 r1050.capacity r1033.capacity into r1070;
    ternary r1045 r1050.top r1033.top into r1071;
    ternary r1045 r1050.member_size r1033.member_size into r1072;
    ternary r1045 r1050.s00 r1033.s00 into r1073;
    ternary r1045 r1050.s01 r1033.s01 into r1074;
    ternary r1045 r1050.s02 r1033.s02 into r1075;
    ternary r1045 r1050.s03 r1033.s03 into r1076;
    cast r1070 r1071 r1072 r1073 r1074 r1075 r1076 into r1077 as Stack;
    ternary r1045 r1051 r1003 into r1078;
    call pop r1025 into r1079 r1080;
    call push r1079 r1077 into r1081;
    add r1034 1u8 into r1082;
    ternary r1044 r1079 r1052 into r1083;
    ternary r1044 r1080.capacity r1060.capacity into r1084;
    ternary r1044 r1080.top r1060.top into r1085;
    ternary r1044 r1080.member_size r1060.member_size into r1086;
    ternary r1044 r1080.s00 r1060.s00 into r1087;
    ternary r1044 r1080.s01 r1060.s01 into r1088;
    ternary r1044 r1080.s02 r1060.s02 into r1089;
    ternary r1044 r1080.s03 r1060.s03 into r1090;
    cast r1084 r1085 r1086 r1087 r1088 r1089 r1090 into r1091 as Stack;
    ternary r1044 r1079 r1061 into r1092;
    ternary r1044 r1080.capacity r1025.capacity into r1093;
    ternary r1044 r1080.top r1025.top into r1094;
    ternary r1044 r1080.member_size r1025.member_size into r1095;
    ternary r1044 r1080.s00 r1025.s00 into r1096;
    ternary r1044 r1080.s01 r1025.s01 into r1097;
    ternary r1044 r1080.s02 r1025.s02 into r1098;
    ternary r1044 r1080.s03 r1025.s03 into r1099;
    cast r1093 r1094 r1095 r1096 r1097 r1098 r1099 into r1100 as Stack;
    ternary r1044 r1081.capacity r1077.capacity into r1101;
    ternary r1044 r1081.top r1077.top into r1102;
    ternary r1044 r1081.member_size r1077.member_size into r1103;
    ternary r1044 r1081.s00 r1077.s00 into r1104;
    ternary r1044 r1081.s01 r1077.s01 into r1105;
    ternary r1044 r1081.s02 r1077.s02 into r1106;
    ternary r1044 r1081.s03 r1077.s03 into r1107;
    cast r1101 r1102 r1103 r1104 r1105 r1106 r1107 into r1108 as Stack;
    ternary r1044 r1082 r1034 into r1109;
    lt 14i8 r0 into r1110;
    sub 14i8 r0 into r1111;
    rem r1111 2i8 into r1112;
    is.eq r1112 0i8 into r1113;
    lte r1109 25u8 into r1114;
    ternary r1114 true false into r1115;
    ternary r1114 false true into r1116;
    ternary r1113 true r1116 into r1117;
    ternary r1113 false r1115 into r1118;
    ternary r1110 true r1118 into r1119;
    ternary r1110 false r1117 into r1120;
    or r1120 r1119 into r1121;
    assert.eq r1121 true;
    call init_stack 8u8 into r1122;
    call pop r1069 into r1123 r1124;
    call push r1123 r1108 into r1125;
    add r1078 1u8 into r1126;
    ternary r1120 r1123 0u128 into r1127;
    ternary r1120 r1124.capacity r1122.capacity into r1128;
    ternary r1120 r1124.top r1122.top into r1129;
    ternary r1120 r1124.member_size r1122.member_size into r1130;
    ternary r1120 r1124.s00 r1122.s00 into r1131;
    ternary r1120 r1124.s01 r1122.s01 into r1132;
    ternary r1120 r1124.s02 r1122.s02 into r1133;
    ternary r1120 r1124.s03 r1122.s03 into r1134;
    cast r1128 r1129 r1130 r1131 r1132 r1133 r1134 into r1135 as Stack;
    ternary r1120 r1123 0u128 into r1136;
    ternary r1120 r1124.capacity r1069.capacity into r1137;
    ternary r1120 r1124.top r1069.top into r1138;
    ternary r1120 r1124.member_size r1069.member_size into r1139;
    ternary r1120 r1124.s00 r1069.s00 into r1140;
    ternary r1120 r1124.s01 r1069.s01 into r1141;
    ternary r1120 r1124.s02 r1069.s02 into r1142;
    ternary r1120 r1124.s03 r1069.s03 into r1143;
    cast r1137 r1138 r1139 r1140 r1141 r1142 r1143 into r1144 as Stack;
    ternary r1120 r1125.capacity r1108.capacity into r1145;
    ternary r1120 r1125.top r1108.top into r1146;
    ternary r1120 r1125.member_size r1108.member_size into r1147;
    ternary r1120 r1125.s00 r1108.s00 into r1148;
    ternary r1120 r1125.s01 r1108.s01 into r1149;
    ternary r1120 r1125.s02 r1108.s02 into r1150;
    ternary r1120 r1125.s03 r1108.s03 into r1151;
    cast r1145 r1146 r1147 r1148 r1149 r1150 r1151 into r1152 as Stack;
    ternary r1120 r1126 r1078 into r1153;
    call pop r1100 into r1154 r1155;
    call push r1154 r1152 into r1156;
    add r1109 1u8 into r1157;
    ternary r1119 r1154 r1127 into r1158;
    ternary r1119 r1155.capacity r1135.capacity into r1159;
    ternary r1119 r1155.top r1135.top into r1160;
    ternary r1119 r1155.member_size r1135.member_size into r1161;
    ternary r1119 r1155.s00 r1135.s00 into r1162;
    ternary r1119 r1155.s01 r1135.s01 into r1163;
    ternary r1119 r1155.s02 r1135.s02 into r1164;
    ternary r1119 r1155.s03 r1135.s03 into r1165;
    cast r1159 r1160 r1161 r1162 r1163 r1164 r1165 into r1166 as Stack;
    ternary r1119 r1154 r1136 into r1167;
    ternary r1119 r1155.capacity r1100.capacity into r1168;
    ternary r1119 r1155.top r1100.top into r1169;
    ternary r1119 r1155.member_size r1100.member_size into r1170;
    ternary r1119 r1155.s00 r1100.s00 into r1171;
    ternary r1119 r1155.s01 r1100.s01 into r1172;
    ternary r1119 r1155.s02 r1100.s02 into r1173;
    ternary r1119 r1155.s03 r1100.s03 into r1174;
    cast r1168 r1169 r1170 r1171 r1172 r1173 r1174 into r1175 as Stack;
    ternary r1119 r1156.capacity r1152.capacity into r1176;
    ternary r1119 r1156.top r1152.top into r1177;
    ternary r1119 r1156.member_size r1152.member_size into r1178;
    ternary r1119 r1156.s00 r1152.s00 into r1179;
    ternary r1119 r1156.s01 r1152.s01 into r1180;
    ternary r1119 r1156.s02 r1152.s02 into r1181;
    ternary r1119 r1156.s03 r1152.s03 into r1182;
    cast r1176 r1177 r1178 r1179 r1180 r1181 r1182 into r1183 as Stack;
    ternary r1119 r1157 r1109 into r1184;
    lt 15i8 r0 into r1185;
    sub 15i8 r0 into r1186;
    rem r1186 2i8 into r1187;
    is.eq r1187 0i8 into r1188;
    lte r1184 25u8 into r1189;
    ternary r1189 true false into r1190;
    ternary r1189 false true into r1191;
    ternary r1188 true r1191 into r1192;
    ternary r1188 false r1190 into r1193;
    ternary r1185 true r1193 into r1194;
    ternary r1185 false r1192 into r1195;
    or r1195 r1194 into r1196;
    assert.eq r1196 true;
    call init_stack 8u8 into r1197;
    call pop r1144 into r1198 r1199;
    call push r1198 r1183 into r1200;
    add r1153 1u8 into r1201;
    ternary r1195 r1198 0u128 into r1202;
    ternary r1195 r1199.capacity r1197.capacity into r1203;
    ternary r1195 r1199.top r1197.top into r1204;
    ternary r1195 r1199.member_size r1197.member_size into r1205;
    ternary r1195 r1199.s00 r1197.s00 into r1206;
    ternary r1195 r1199.s01 r1197.s01 into r1207;
    ternary r1195 r1199.s02 r1197.s02 into r1208;
    ternary r1195 r1199.s03 r1197.s03 into r1209;
    cast r1203 r1204 r1205 r1206 r1207 r1208 r1209 into r1210 as Stack;
    ternary r1195 r1198 0u128 into r1211;
    ternary r1195 r1199.capacity r1144.capacity into r1212;
    ternary r1195 r1199.top r1144.top into r1213;
    ternary r1195 r1199.member_size r1144.member_size into r1214;
    ternary r1195 r1199.s00 r1144.s00 into r1215;
    ternary r1195 r1199.s01 r1144.s01 into r1216;
    ternary r1195 r1199.s02 r1144.s02 into r1217;
    ternary r1195 r1199.s03 r1144.s03 into r1218;
    cast r1212 r1213 r1214 r1215 r1216 r1217 r1218 into r1219 as Stack;
    ternary r1195 r1200.capacity r1183.capacity into r1220;
    ternary r1195 r1200.top r1183.top into r1221;
    ternary r1195 r1200.member_size r1183.member_size into r1222;
    ternary r1195 r1200.s00 r1183.s00 into r1223;
    ternary r1195 r1200.s01 r1183.s01 into r1224;
    ternary r1195 r1200.s02 r1183.s02 into r1225;
    ternary r1195 r1200.s03 r1183.s03 into r1226;
    cast r1220 r1221 r1222 r1223 r1224 r1225 r1226 into r1227 as Stack;
    ternary r1195 r1201 r1153 into r1228;
    call pop r1175 into r1229 r1230;
    call push r1229 r1227 into r1231;
    add r1184 1u8 into r1232;
    ternary r1194 r1229 r1202 into r1233;
    ternary r1194 r1230.capacity r1210.capacity into r1234;
    ternary r1194 r1230.top r1210.top into r1235;
    ternary r1194 r1230.member_size r1210.member_size into r1236;
    ternary r1194 r1230.s00 r1210.s00 into r1237;
    ternary r1194 r1230.s01 r1210.s01 into r1238;
    ternary r1194 r1230.s02 r1210.s02 into r1239;
    ternary r1194 r1230.s03 r1210.s03 into r1240;
    cast r1234 r1235 r1236 r1237 r1238 r1239 r1240 into r1241 as Stack;
    ternary r1194 r1229 r1211 into r1242;
    ternary r1194 r1230.capacity r1175.capacity into r1243;
    ternary r1194 r1230.top r1175.top into r1244;
    ternary r1194 r1230.member_size r1175.member_size into r1245;
    ternary r1194 r1230.s00 r1175.s00 into r1246;
    ternary r1194 r1230.s01 r1175.s01 into r1247;
    ternary r1194 r1230.s02 r1175.s02 into r1248;
    ternary r1194 r1230.s03 r1175.s03 into r1249;
    cast r1243 r1244 r1245 r1246 r1247 r1248 r1249 into r1250 as Stack;
    ternary r1194 r1231.capacity r1227.capacity into r1251;
    ternary r1194 r1231.top r1227.top into r1252;
    ternary r1194 r1231.member_size r1227.member_size into r1253;
    ternary r1194 r1231.s00 r1227.s00 into r1254;
    ternary r1194 r1231.s01 r1227.s01 into r1255;
    ternary r1194 r1231.s02 r1227.s02 into r1256;
    ternary r1194 r1231.s03 r1227.s03 into r1257;
    cast r1251 r1252 r1253 r1254 r1255 r1256 r1257 into r1258 as Stack;
    ternary r1194 r1232 r1184 into r1259;
    lt 16i8 r0 into r1260;
    sub 16i8 r0 into r1261;
    rem r1261 2i8 into r1262;
    is.eq r1262 0i8 into r1263;
    lte r1259 25u8 into r1264;
    ternary r1264 true false into r1265;
    ternary r1264 false true into r1266;
    ternary r1263 true r1266 into r1267;
    ternary r1263 false r1265 into r1268;
    ternary r1260 true r1268 into r1269;
    ternary r1260 false r1267 into r1270;
    or r1270 r1269 into r1271;
    assert.eq r1271 true;
    call init_stack 8u8 into r1272;
    call pop r1219 into r1273 r1274;
    call push r1273 r1258 into r1275;
    add r1228 1u8 into r1276;
    ternary r1270 r1273 0u128 into r1277;
    ternary r1270 r1274.capacity r1272.capacity into r1278;
    ternary r1270 r1274.top r1272.top into r1279;
    ternary r1270 r1274.member_size r1272.member_size into r1280;
    ternary r1270 r1274.s00 r1272.s00 into r1281;
    ternary r1270 r1274.s01 r1272.s01 into r1282;
    ternary r1270 r1274.s02 r1272.s02 into r1283;
    ternary r1270 r1274.s03 r1272.s03 into r1284;
    cast r1278 r1279 r1280 r1281 r1282 r1283 r1284 into r1285 as Stack;
    ternary r1270 r1273 0u128 into r1286;
    ternary r1270 r1274.capacity r1219.capacity into r1287;
    ternary r1270 r1274.top r1219.top into r1288;
    ternary r1270 r1274.member_size r1219.member_size into r1289;
    ternary r1270 r1274.s00 r1219.s00 into r1290;
    ternary r1270 r1274.s01 r1219.s01 into r1291;
    ternary r1270 r1274.s02 r1219.s02 into r1292;
    ternary r1270 r1274.s03 r1219.s03 into r1293;
    cast r1287 r1288 r1289 r1290 r1291 r1292 r1293 into r1294 as Stack;
    ternary r1270 r1275.capacity r1258.capacity into r1295;
    ternary r1270 r1275.top r1258.top into r1296;
    ternary r1270 r1275.member_size r1258.member_size into r1297;
    ternary r1270 r1275.s00 r1258.s00 into r1298;
    ternary r1270 r1275.s01 r1258.s01 into r1299;
    ternary r1270 r1275.s02 r1258.s02 into r1300;
    ternary r1270 r1275.s03 r1258.s03 into r1301;
    cast r1295 r1296 r1297 r1298 r1299 r1300 r1301 into r1302 as Stack;
    ternary r1270 r1276 r1228 into r1303;
    call pop r1250 into r1304 r1305;
    call push r1304 r1302 into r1306;
    add r1259 1u8 into r1307;
    ternary r1269 r1304 r1277 into r1308;
    ternary r1269 r1305.capacity r1285.capacity into r1309;
    ternary r1269 r1305.top r1285.top into r1310;
    ternary r1269 r1305.member_size r1285.member_size into r1311;
    ternary r1269 r1305.s00 r1285.s00 into r1312;
    ternary r1269 r1305.s01 r1285.s01 into r1313;
    ternary r1269 r1305.s02 r1285.s02 into r1314;
    ternary r1269 r1305.s03 r1285.s03 into r1315;
    cast r1309 r1310 r1311 r1312 r1313 r1314 r1315 into r1316 as Stack;
    ternary r1269 r1304 r1286 into r1317;
    ternary r1269 r1305.capacity r1250.capacity into r1318;
    ternary r1269 r1305.top r1250.top into r1319;
    ternary r1269 r1305.member_size r1250.member_size into r1320;
    ternary r1269 r1305.s00 r1250.s00 into r1321;
    ternary r1269 r1305.s01 r1250.s01 into r1322;
    ternary r1269 r1305.s02 r1250.s02 into r1323;
    ternary r1269 r1305.s03 r1250.s03 into r1324;
    cast r1318 r1319 r1320 r1321 r1322 r1323 r1324 into r1325 as Stack;
    ternary r1269 r1306.capacity r1302.capacity into r1326;
    ternary r1269 r1306.top r1302.top into r1327;
    ternary r1269 r1306.member_size r1302.member_size into r1328;
    ternary r1269 r1306.s00 r1302.s00 into r1329;
    ternary r1269 r1306.s01 r1302.s01 into r1330;
    ternary r1269 r1306.s02 r1302.s02 into r1331;
    ternary r1269 r1306.s03 r1302.s03 into r1332;
    cast r1326 r1327 r1328 r1329 r1330 r1331 r1332 into r1333 as Stack;
    ternary r1269 r1307 r1259 into r1334;
    lt 17i8 r0 into r1335;
    sub 17i8 r0 into r1336;
    rem r1336 2i8 into r1337;
    is.eq r1337 0i8 into r1338;
    lte r1334 25u8 into r1339;
    ternary r1339 true false into r1340;
    ternary r1339 false true into r1341;
    ternary r1338 true r1341 into r1342;
    ternary r1338 false r1340 into r1343;
    ternary r1335 true r1343 into r1344;
    ternary r1335 false r1342 into r1345;
    or r1345 r1344 into r1346;
    assert.eq r1346 true;
    call init_stack 8u8 into r1347;
    call pop r1294 into r1348 r1349;
    call push r1348 r1333 into r1350;
    add r1303 1u8 into r1351;
    ternary r1345 r1348 0u128 into r1352;
    ternary r1345 r1349.capacity r1347.capacity into r1353;
    ternary r1345 r1349.top r1347.top into r1354;
    ternary r1345 r1349.member_size r1347.member_size into r1355;
    ternary r1345 r1349.s00 r1347.s00 into r1356;
    ternary r1345 r1349.s01 r1347.s01 into r1357;
    ternary r1345 r1349.s02 r1347.s02 into r1358;
    ternary r1345 r1349.s03 r1347.s03 into r1359;
    cast r1353 r1354 r1355 r1356 r1357 r1358 r1359 into r1360 as Stack;
    ternary r1345 r1348 0u128 into r1361;
    ternary r1345 r1349.capacity r1294.capacity into r1362;
    ternary r1345 r1349.top r1294.top into r1363;
    ternary r1345 r1349.member_size r1294.member_size into r1364;
    ternary r1345 r1349.s00 r1294.s00 into r1365;
    ternary r1345 r1349.s01 r1294.s01 into r1366;
    ternary r1345 r1349.s02 r1294.s02 into r1367;
    ternary r1345 r1349.s03 r1294.s03 into r1368;
    cast r1362 r1363 r1364 r1365 r1366 r1367 r1368 into r1369 as Stack;
    ternary r1345 r1350.capacity r1333.capacity into r1370;
    ternary r1345 r1350.top r1333.top into r1371;
    ternary r1345 r1350.member_size r1333.member_size into r1372;
    ternary r1345 r1350.s00 r1333.s00 into r1373;
    ternary r1345 r1350.s01 r1333.s01 into r1374;
    ternary r1345 r1350.s02 r1333.s02 into r1375;
    ternary r1345 r1350.s03 r1333.s03 into r1376;
    cast r1370 r1371 r1372 r1373 r1374 r1375 r1376 into r1377 as Stack;
    ternary r1345 r1351 r1303 into r1378;
    call pop r1325 into r1379 r1380;
    call push r1379 r1377 into r1381;
    add r1334 1u8 into r1382;
    ternary r1344 r1379 r1352 into r1383;
    ternary r1344 r1380.capacity r1360.capacity into r1384;
    ternary r1344 r1380.top r1360.top into r1385;
    ternary r1344 r1380.member_size r1360.member_size into r1386;
    ternary r1344 r1380.s00 r1360.s00 into r1387;
    ternary r1344 r1380.s01 r1360.s01 into r1388;
    ternary r1344 r1380.s02 r1360.s02 into r1389;
    ternary r1344 r1380.s03 r1360.s03 into r1390;
    cast r1384 r1385 r1386 r1387 r1388 r1389 r1390 into r1391 as Stack;
    ternary r1344 r1379 r1361 into r1392;
    ternary r1344 r1380.capacity r1325.capacity into r1393;
    ternary r1344 r1380.top r1325.top into r1394;
    ternary r1344 r1380.member_size r1325.member_size into r1395;
    ternary r1344 r1380.s00 r1325.s00 into r1396;
    ternary r1344 r1380.s01 r1325.s01 into r1397;
    ternary r1344 r1380.s02 r1325.s02 into r1398;
    ternary r1344 r1380.s03 r1325.s03 into r1399;
    cast r1393 r1394 r1395 r1396 r1397 r1398 r1399 into r1400 as Stack;
    ternary r1344 r1381.capacity r1377.capacity into r1401;
    ternary r1344 r1381.top r1377.top into r1402;
    ternary r1344 r1381.member_size r1377.member_size into r1403;
    ternary r1344 r1381.s00 r1377.s00 into r1404;
    ternary r1344 r1381.s01 r1377.s01 into r1405;
    ternary r1344 r1381.s02 r1377.s02 into r1406;
    ternary r1344 r1381.s03 r1377.s03 into r1407;
    cast r1401 r1402 r1403 r1404 r1405 r1406 r1407 into r1408 as Stack;
    ternary r1344 r1382 r1334 into r1409;
    lt 18i8 r0 into r1410;
    sub 18i8 r0 into r1411;
    rem r1411 2i8 into r1412;
    is.eq r1412 0i8 into r1413;
    lte r1409 25u8 into r1414;
    ternary r1414 true false into r1415;
    ternary r1414 false true into r1416;
    ternary r1413 true r1416 into r1417;
    ternary r1413 false r1415 into r1418;
    ternary r1410 true r1418 into r1419;
    ternary r1410 false r1417 into r1420;
    or r1420 r1419 into r1421;
    assert.eq r1421 true;
    call init_stack 8u8 into r1422;
    call pop r1369 into r1423 r1424;
    call push r1423 r1408 into r1425;
    add r1378 1u8 into r1426;
    ternary r1420 r1423 0u128 into r1427;
    ternary r1420 r1424.capacity r1422.capacity into r1428;
    ternary r1420 r1424.top r1422.top into r1429;
    ternary r1420 r1424.member_size r1422.member_size into r1430;
    ternary r1420 r1424.s00 r1422.s00 into r1431;
    ternary r1420 r1424.s01 r1422.s01 into r1432;
    ternary r1420 r1424.s02 r1422.s02 into r1433;
    ternary r1420 r1424.s03 r1422.s03 into r1434;
    cast r1428 r1429 r1430 r1431 r1432 r1433 r1434 into r1435 as Stack;
    ternary r1420 r1423 0u128 into r1436;
    ternary r1420 r1424.capacity r1369.capacity into r1437;
    ternary r1420 r1424.top r1369.top into r1438;
    ternary r1420 r1424.member_size r1369.member_size into r1439;
    ternary r1420 r1424.s00 r1369.s00 into r1440;
    ternary r1420 r1424.s01 r1369.s01 into r1441;
    ternary r1420 r1424.s02 r1369.s02 into r1442;
    ternary r1420 r1424.s03 r1369.s03 into r1443;
    cast r1437 r1438 r1439 r1440 r1441 r1442 r1443 into r1444 as Stack;
    ternary r1420 r1425.capacity r1408.capacity into r1445;
    ternary r1420 r1425.top r1408.top into r1446;
    ternary r1420 r1425.member_size r1408.member_size into r1447;
    ternary r1420 r1425.s00 r1408.s00 into r1448;
    ternary r1420 r1425.s01 r1408.s01 into r1449;
    ternary r1420 r1425.s02 r1408.s02 into r1450;
    ternary r1420 r1425.s03 r1408.s03 into r1451;
    cast r1445 r1446 r1447 r1448 r1449 r1450 r1451 into r1452 as Stack;
    ternary r1420 r1426 r1378 into r1453;
    call pop r1400 into r1454 r1455;
    call push r1454 r1452 into r1456;
    add r1409 1u8 into r1457;
    ternary r1419 r1454 r1427 into r1458;
    ternary r1419 r1455.capacity r1435.capacity into r1459;
    ternary r1419 r1455.top r1435.top into r1460;
    ternary r1419 r1455.member_size r1435.member_size into r1461;
    ternary r1419 r1455.s00 r1435.s00 into r1462;
    ternary r1419 r1455.s01 r1435.s01 into r1463;
    ternary r1419 r1455.s02 r1435.s02 into r1464;
    ternary r1419 r1455.s03 r1435.s03 into r1465;
    cast r1459 r1460 r1461 r1462 r1463 r1464 r1465 into r1466 as Stack;
    ternary r1419 r1454 r1436 into r1467;
    ternary r1419 r1455.capacity r1400.capacity into r1468;
    ternary r1419 r1455.top r1400.top into r1469;
    ternary r1419 r1455.member_size r1400.member_size into r1470;
    ternary r1419 r1455.s00 r1400.s00 into r1471;
    ternary r1419 r1455.s01 r1400.s01 into r1472;
    ternary r1419 r1455.s02 r1400.s02 into r1473;
    ternary r1419 r1455.s03 r1400.s03 into r1474;
    cast r1468 r1469 r1470 r1471 r1472 r1473 r1474 into r1475 as Stack;
    ternary r1419 r1456.capacity r1452.capacity into r1476;
    ternary r1419 r1456.top r1452.top into r1477;
    ternary r1419 r1456.member_size r1452.member_size into r1478;
    ternary r1419 r1456.s00 r1452.s00 into r1479;
    ternary r1419 r1456.s01 r1452.s01 into r1480;
    ternary r1419 r1456.s02 r1452.s02 into r1481;
    ternary r1419 r1456.s03 r1452.s03 into r1482;
    cast r1476 r1477 r1478 r1479 r1480 r1481 r1482 into r1483 as Stack;
    ternary r1419 r1457 r1409 into r1484;
    lt 19i8 r0 into r1485;
    sub 19i8 r0 into r1486;
    rem r1486 2i8 into r1487;
    is.eq r1487 0i8 into r1488;
    lte r1484 25u8 into r1489;
    ternary r1489 true false into r1490;
    ternary r1489 false true into r1491;
    ternary r1488 true r1491 into r1492;
    ternary r1488 false r1490 into r1493;
    ternary r1485 true r1493 into r1494;
    ternary r1485 false r1492 into r1495;
    or r1495 r1494 into r1496;
    assert.eq r1496 true;
    call init_stack 8u8 into r1497;
    call pop r1444 into r1498 r1499;
    call push r1498 r1483 into r1500;
    add r1453 1u8 into r1501;
    ternary r1495 r1498 0u128 into r1502;
    ternary r1495 r1499.capacity r1497.capacity into r1503;
    ternary r1495 r1499.top r1497.top into r1504;
    ternary r1495 r1499.member_size r1497.member_size into r1505;
    ternary r1495 r1499.s00 r1497.s00 into r1506;
    ternary r1495 r1499.s01 r1497.s01 into r1507;
    ternary r1495 r1499.s02 r1497.s02 into r1508;
    ternary r1495 r1499.s03 r1497.s03 into r1509;
    cast r1503 r1504 r1505 r1506 r1507 r1508 r1509 into r1510 as Stack;
    ternary r1495 r1498 0u128 into r1511;
    ternary r1495 r1499.capacity r1444.capacity into r1512;
    ternary r1495 r1499.top r1444.top into r1513;
    ternary r1495 r1499.member_size r1444.member_size into r1514;
    ternary r1495 r1499.s00 r1444.s00 into r1515;
    ternary r1495 r1499.s01 r1444.s01 into r1516;
    ternary r1495 r1499.s02 r1444.s02 into r1517;
    ternary r1495 r1499.s03 r1444.s03 into r1518;
    cast r1512 r1513 r1514 r1515 r1516 r1517 r1518 into r1519 as Stack;
    ternary r1495 r1500.capacity r1483.capacity into r1520;
    ternary r1495 r1500.top r1483.top into r1521;
    ternary r1495 r1500.member_size r1483.member_size into r1522;
    ternary r1495 r1500.s00 r1483.s00 into r1523;
    ternary r1495 r1500.s01 r1483.s01 into r1524;
    ternary r1495 r1500.s02 r1483.s02 into r1525;
    ternary r1495 r1500.s03 r1483.s03 into r1526;
    cast r1520 r1521 r1522 r1523 r1524 r1525 r1526 into r1527 as Stack;
    ternary r1495 r1501 r1453 into r1528;
    call pop r1475 into r1529 r1530;
    call push r1529 r1527 into r1531;
    add r1484 1u8 into r1532;
    ternary r1494 r1529 r1502 into r1533;
    ternary r1494 r1530.capacity r1510.capacity into r1534;
    ternary r1494 r1530.top r1510.top into r1535;
    ternary r1494 r1530.member_size r1510.member_size into r1536;
    ternary r1494 r1530.s00 r1510.s00 into r1537;
    ternary r1494 r1530.s01 r1510.s01 into r1538;
    ternary r1494 r1530.s02 r1510.s02 into r1539;
    ternary r1494 r1530.s03 r1510.s03 into r1540;
    cast r1534 r1535 r1536 r1537 r1538 r1539 r1540 into r1541 as Stack;
    ternary r1494 r1529 r1511 into r1542;
    ternary r1494 r1530.capacity r1475.capacity into r1543;
    ternary r1494 r1530.top r1475.top into r1544;
    ternary r1494 r1530.member_size r1475.member_size into r1545;
    ternary r1494 r1530.s00 r1475.s00 into r1546;
    ternary r1494 r1530.s01 r1475.s01 into r1547;
    ternary r1494 r1530.s02 r1475.s02 into r1548;
    ternary r1494 r1530.s03 r1475.s03 into r1549;
    cast r1543 r1544 r1545 r1546 r1547 r1548 r1549 into r1550 as Stack;
    ternary r1494 r1531.capacity r1527.capacity into r1551;
    ternary r1494 r1531.top r1527.top into r1552;
    ternary r1494 r1531.member_size r1527.member_size into r1553;
    ternary r1494 r1531.s00 r1527.s00 into r1554;
    ternary r1494 r1531.s01 r1527.s01 into r1555;
    ternary r1494 r1531.s02 r1527.s02 into r1556;
    ternary r1494 r1531.s03 r1527.s03 into r1557;
    cast r1551 r1552 r1553 r1554 r1555 r1556 r1557 into r1558 as Stack;
    ternary r1494 r1532 r1484 into r1559;
    lt 20i8 r0 into r1560;
    sub 20i8 r0 into r1561;
    rem r1561 2i8 into r1562;
    is.eq r1562 0i8 into r1563;
    lte r1559 25u8 into r1564;
    ternary r1564 true false into r1565;
    ternary r1564 false true into r1566;
    ternary r1563 true r1566 into r1567;
    ternary r1563 false r1565 into r1568;
    ternary r1560 true r1568 into r1569;
    ternary r1560 false r1567 into r1570;
    or r1570 r1569 into r1571;
    assert.eq r1571 true;
    call init_stack 8u8 into r1572;
    call pop r1519 into r1573 r1574;
    call push r1573 r1558 into r1575;
    add r1528 1u8 into r1576;
    ternary r1570 r1573 0u128 into r1577;
    ternary r1570 r1574.capacity r1572.capacity into r1578;
    ternary r1570 r1574.top r1572.top into r1579;
    ternary r1570 r1574.member_size r1572.member_size into r1580;
    ternary r1570 r1574.s00 r1572.s00 into r1581;
    ternary r1570 r1574.s01 r1572.s01 into r1582;
    ternary r1570 r1574.s02 r1572.s02 into r1583;
    ternary r1570 r1574.s03 r1572.s03 into r1584;
    cast r1578 r1579 r1580 r1581 r1582 r1583 r1584 into r1585 as Stack;
    ternary r1570 r1573 0u128 into r1586;
    ternary r1570 r1574.capacity r1519.capacity into r1587;
    ternary r1570 r1574.top r1519.top into r1588;
    ternary r1570 r1574.member_size r1519.member_size into r1589;
    ternary r1570 r1574.s00 r1519.s00 into r1590;
    ternary r1570 r1574.s01 r1519.s01 into r1591;
    ternary r1570 r1574.s02 r1519.s02 into r1592;
    ternary r1570 r1574.s03 r1519.s03 into r1593;
    cast r1587 r1588 r1589 r1590 r1591 r1592 r1593 into r1594 as Stack;
    ternary r1570 r1575.capacity r1558.capacity into r1595;
    ternary r1570 r1575.top r1558.top into r1596;
    ternary r1570 r1575.member_size r1558.member_size into r1597;
    ternary r1570 r1575.s00 r1558.s00 into r1598;
    ternary r1570 r1575.s01 r1558.s01 into r1599;
    ternary r1570 r1575.s02 r1558.s02 into r1600;
    ternary r1570 r1575.s03 r1558.s03 into r1601;
    cast r1595 r1596 r1597 r1598 r1599 r1600 r1601 into r1602 as Stack;
    ternary r1570 r1576 r1528 into r1603;
    call pop r1550 into r1604 r1605;
    call push r1604 r1602 into r1606;
    add r1559 1u8 into r1607;
    ternary r1569 r1604 r1577 into r1608;
    ternary r1569 r1605.capacity r1585.capacity into r1609;
    ternary r1569 r1605.top r1585.top into r1610;
    ternary r1569 r1605.member_size r1585.member_size into r1611;
    ternary r1569 r1605.s00 r1585.s00 into r1612;
    ternary r1569 r1605.s01 r1585.s01 into r1613;
    ternary r1569 r1605.s02 r1585.s02 into r1614;
    ternary r1569 r1605.s03 r1585.s03 into r1615;
    cast r1609 r1610 r1611 r1612 r1613 r1614 r1615 into r1616 as Stack;
    ternary r1569 r1604 r1586 into r1617;
    ternary r1569 r1605.capacity r1550.capacity into r1618;
    ternary r1569 r1605.top r1550.top into r1619;
    ternary r1569 r1605.member_size r1550.member_size into r1620;
    ternary r1569 r1605.s00 r1550.s00 into r1621;
    ternary r1569 r1605.s01 r1550.s01 into r1622;
    ternary r1569 r1605.s02 r1550.s02 into r1623;
    ternary r1569 r1605.s03 r1550.s03 into r1624;
    cast r1618 r1619 r1620 r1621 r1622 r1623 r1624 into r1625 as Stack;
    ternary r1569 r1606.capacity r1602.capacity into r1626;
    ternary r1569 r1606.top r1602.top into r1627;
    ternary r1569 r1606.member_size r1602.member_size into r1628;
    ternary r1569 r1606.s00 r1602.s00 into r1629;
    ternary r1569 r1606.s01 r1602.s01 into r1630;
    ternary r1569 r1606.s02 r1602.s02 into r1631;
    ternary r1569 r1606.s03 r1602.s03 into r1632;
    cast r1626 r1627 r1628 r1629 r1630 r1631 r1632 into r1633 as Stack;
    ternary r1569 r1607 r1559 into r1634;
    lt 21i8 r0 into r1635;
    sub 21i8 r0 into r1636;
    rem r1636 2i8 into r1637;
    is.eq r1637 0i8 into r1638;
    lte r1634 25u8 into r1639;
    ternary r1639 true false into r1640;
    ternary r1639 false true into r1641;
    ternary r1638 true r1641 into r1642;
    ternary r1638 false r1640 into r1643;
    ternary r1635 true r1643 into r1644;
    ternary r1635 false r1642 into r1645;
    or r1645 r1644 into r1646;
    assert.eq r1646 true;
    call init_stack 8u8 into r1647;
    call pop r1594 into r1648 r1649;
    call push r1648 r1633 into r1650;
    add r1603 1u8 into r1651;
    ternary r1645 r1648 0u128 into r1652;
    ternary r1645 r1649.capacity r1647.capacity into r1653;
    ternary r1645 r1649.top r1647.top into r1654;
    ternary r1645 r1649.member_size r1647.member_size into r1655;
    ternary r1645 r1649.s00 r1647.s00 into r1656;
    ternary r1645 r1649.s01 r1647.s01 into r1657;
    ternary r1645 r1649.s02 r1647.s02 into r1658;
    ternary r1645 r1649.s03 r1647.s03 into r1659;
    cast r1653 r1654 r1655 r1656 r1657 r1658 r1659 into r1660 as Stack;
    ternary r1645 r1648 0u128 into r1661;
    ternary r1645 r1649.capacity r1594.capacity into r1662;
    ternary r1645 r1649.top r1594.top into r1663;
    ternary r1645 r1649.member_size r1594.member_size into r1664;
    ternary r1645 r1649.s00 r1594.s00 into r1665;
    ternary r1645 r1649.s01 r1594.s01 into r1666;
    ternary r1645 r1649.s02 r1594.s02 into r1667;
    ternary r1645 r1649.s03 r1594.s03 into r1668;
    cast r1662 r1663 r1664 r1665 r1666 r1667 r1668 into r1669 as Stack;
    ternary r1645 r1650.capacity r1633.capacity into r1670;
    ternary r1645 r1650.top r1633.top into r1671;
    ternary r1645 r1650.member_size r1633.member_size into r1672;
    ternary r1645 r1650.s00 r1633.s00 into r1673;
    ternary r1645 r1650.s01 r1633.s01 into r1674;
    ternary r1645 r1650.s02 r1633.s02 into r1675;
    ternary r1645 r1650.s03 r1633.s03 into r1676;
    cast r1670 r1671 r1672 r1673 r1674 r1675 r1676 into r1677 as Stack;
    ternary r1645 r1651 r1603 into r1678;
    call pop r1625 into r1679 r1680;
    call push r1679 r1677 into r1681;
    add r1634 1u8 into r1682;
    ternary r1644 r1679 r1652 into r1683;
    ternary r1644 r1680.capacity r1660.capacity into r1684;
    ternary r1644 r1680.top r1660.top into r1685;
    ternary r1644 r1680.member_size r1660.member_size into r1686;
    ternary r1644 r1680.s00 r1660.s00 into r1687;
    ternary r1644 r1680.s01 r1660.s01 into r1688;
    ternary r1644 r1680.s02 r1660.s02 into r1689;
    ternary r1644 r1680.s03 r1660.s03 into r1690;
    cast r1684 r1685 r1686 r1687 r1688 r1689 r1690 into r1691 as Stack;
    ternary r1644 r1679 r1661 into r1692;
    ternary r1644 r1680.capacity r1625.capacity into r1693;
    ternary r1644 r1680.top r1625.top into r1694;
    ternary r1644 r1680.member_size r1625.member_size into r1695;
    ternary r1644 r1680.s00 r1625.s00 into r1696;
    ternary r1644 r1680.s01 r1625.s01 into r1697;
    ternary r1644 r1680.s02 r1625.s02 into r1698;
    ternary r1644 r1680.s03 r1625.s03 into r1699;
    cast r1693 r1694 r1695 r1696 r1697 r1698 r1699 into r1700 as Stack;
    ternary r1644 r1681.capacity r1677.capacity into r1701;
    ternary r1644 r1681.top r1677.top into r1702;
    ternary r1644 r1681.member_size r1677.member_size into r1703;
    ternary r1644 r1681.s00 r1677.s00 into r1704;
    ternary r1644 r1681.s01 r1677.s01 into r1705;
    ternary r1644 r1681.s02 r1677.s02 into r1706;
    ternary r1644 r1681.s03 r1677.s03 into r1707;
    cast r1701 r1702 r1703 r1704 r1705 r1706 r1707 into r1708 as Stack;
    ternary r1644 r1682 r1634 into r1709;
    lt 22i8 r0 into r1710;
    sub 22i8 r0 into r1711;
    rem r1711 2i8 into r1712;
    is.eq r1712 0i8 into r1713;
    lte r1709 25u8 into r1714;
    ternary r1714 true false into r1715;
    ternary r1714 false true into r1716;
    ternary r1713 true r1716 into r1717;
    ternary r1713 false r1715 into r1718;
    ternary r1710 true r1718 into r1719;
    ternary r1710 false r1717 into r1720;
    or r1720 r1719 into r1721;
    assert.eq r1721 true;
    call init_stack 8u8 into r1722;
    call pop r1669 into r1723 r1724;
    call push r1723 r1708 into r1725;
    add r1678 1u8 into r1726;
    ternary r1720 r1723 0u128 into r1727;
    ternary r1720 r1724.capacity r1722.capacity into r1728;
    ternary r1720 r1724.top r1722.top into r1729;
    ternary r1720 r1724.member_size r1722.member_size into r1730;
    ternary r1720 r1724.s00 r1722.s00 into r1731;
    ternary r1720 r1724.s01 r1722.s01 into r1732;
    ternary r1720 r1724.s02 r1722.s02 into r1733;
    ternary r1720 r1724.s03 r1722.s03 into r1734;
    cast r1728 r1729 r1730 r1731 r1732 r1733 r1734 into r1735 as Stack;
    ternary r1720 r1723 0u128 into r1736;
    ternary r1720 r1724.capacity r1669.capacity into r1737;
    ternary r1720 r1724.top r1669.top into r1738;
    ternary r1720 r1724.member_size r1669.member_size into r1739;
    ternary r1720 r1724.s00 r1669.s00 into r1740;
    ternary r1720 r1724.s01 r1669.s01 into r1741;
    ternary r1720 r1724.s02 r1669.s02 into r1742;
    ternary r1720 r1724.s03 r1669.s03 into r1743;
    cast r1737 r1738 r1739 r1740 r1741 r1742 r1743 into r1744 as Stack;
    ternary r1720 r1725.capacity r1708.capacity into r1745;
    ternary r1720 r1725.top r1708.top into r1746;
    ternary r1720 r1725.member_size r1708.member_size into r1747;
    ternary r1720 r1725.s00 r1708.s00 into r1748;
    ternary r1720 r1725.s01 r1708.s01 into r1749;
    ternary r1720 r1725.s02 r1708.s02 into r1750;
    ternary r1720 r1725.s03 r1708.s03 into r1751;
    cast r1745 r1746 r1747 r1748 r1749 r1750 r1751 into r1752 as Stack;
    ternary r1720 r1726 r1678 into r1753;
    call pop r1700 into r1754 r1755;
    call push r1754 r1752 into r1756;
    add r1709 1u8 into r1757;
    ternary r1719 r1754 r1727 into r1758;
    ternary r1719 r1755.capacity r1735.capacity into r1759;
    ternary r1719 r1755.top r1735.top into r1760;
    ternary r1719 r1755.member_size r1735.member_size into r1761;
    ternary r1719 r1755.s00 r1735.s00 into r1762;
    ternary r1719 r1755.s01 r1735.s01 into r1763;
    ternary r1719 r1755.s02 r1735.s02 into r1764;
    ternary r1719 r1755.s03 r1735.s03 into r1765;
    cast r1759 r1760 r1761 r1762 r1763 r1764 r1765 into r1766 as Stack;
    ternary r1719 r1754 r1736 into r1767;
    ternary r1719 r1755.capacity r1700.capacity into r1768;
    ternary r1719 r1755.top r1700.top into r1769;
    ternary r1719 r1755.member_size r1700.member_size into r1770;
    ternary r1719 r1755.s00 r1700.s00 into r1771;
    ternary r1719 r1755.s01 r1700.s01 into r1772;
    ternary r1719 r1755.s02 r1700.s02 into r1773;
    ternary r1719 r1755.s03 r1700.s03 into r1774;
    cast r1768 r1769 r1770 r1771 r1772 r1773 r1774 into r1775 as Stack;
    ternary r1719 r1756.capacity r1752.capacity into r1776;
    ternary r1719 r1756.top r1752.top into r1777;
    ternary r1719 r1756.member_size r1752.member_size into r1778;
    ternary r1719 r1756.s00 r1752.s00 into r1779;
    ternary r1719 r1756.s01 r1752.s01 into r1780;
    ternary r1719 r1756.s02 r1752.s02 into r1781;
    ternary r1719 r1756.s03 r1752.s03 into r1782;
    cast r1776 r1777 r1778 r1779 r1780 r1781 r1782 into r1783 as Stack;
    ternary r1719 r1757 r1709 into r1784;
    lt 23i8 r0 into r1785;
    sub 23i8 r0 into r1786;
    rem r1786 2i8 into r1787;
    is.eq r1787 0i8 into r1788;
    lte r1784 25u8 into r1789;
    ternary r1789 true false into r1790;
    ternary r1789 false true into r1791;
    ternary r1788 true r1791 into r1792;
    ternary r1788 false r1790 into r1793;
    ternary r1785 true r1793 into r1794;
    ternary r1785 false r1792 into r1795;
    or r1795 r1794 into r1796;
    assert.eq r1796 true;
    call init_stack 8u8 into r1797;
    call pop r1744 into r1798 r1799;
    call push r1798 r1783 into r1800;
    add r1753 1u8 into r1801;
    ternary r1795 r1798 0u128 into r1802;
    ternary r1795 r1799.capacity r1797.capacity into r1803;
    ternary r1795 r1799.top r1797.top into r1804;
    ternary r1795 r1799.member_size r1797.member_size into r1805;
    ternary r1795 r1799.s00 r1797.s00 into r1806;
    ternary r1795 r1799.s01 r1797.s01 into r1807;
    ternary r1795 r1799.s02 r1797.s02 into r1808;
    ternary r1795 r1799.s03 r1797.s03 into r1809;
    cast r1803 r1804 r1805 r1806 r1807 r1808 r1809 into r1810 as Stack;
    ternary r1795 r1798 0u128 into r1811;
    ternary r1795 r1799.capacity r1744.capacity into r1812;
    ternary r1795 r1799.top r1744.top into r1813;
    ternary r1795 r1799.member_size r1744.member_size into r1814;
    ternary r1795 r1799.s00 r1744.s00 into r1815;
    ternary r1795 r1799.s01 r1744.s01 into r1816;
    ternary r1795 r1799.s02 r1744.s02 into r1817;
    ternary r1795 r1799.s03 r1744.s03 into r1818;
    cast r1812 r1813 r1814 r1815 r1816 r1817 r1818 into r1819 as Stack;
    ternary r1795 r1800.capacity r1783.capacity into r1820;
    ternary r1795 r1800.top r1783.top into r1821;
    ternary r1795 r1800.member_size r1783.member_size into r1822;
    ternary r1795 r1800.s00 r1783.s00 into r1823;
    ternary r1795 r1800.s01 r1783.s01 into r1824;
    ternary r1795 r1800.s02 r1783.s02 into r1825;
    ternary r1795 r1800.s03 r1783.s03 into r1826;
    cast r1820 r1821 r1822 r1823 r1824 r1825 r1826 into r1827 as Stack;
    ternary r1795 r1801 r1753 into r1828;
    call pop r1775 into r1829 r1830;
    call push r1829 r1827 into r1831;
    add r1784 1u8 into r1832;
    ternary r1794 r1829 r1802 into r1833;
    ternary r1794 r1830.capacity r1810.capacity into r1834;
    ternary r1794 r1830.top r1810.top into r1835;
    ternary r1794 r1830.member_size r1810.member_size into r1836;
    ternary r1794 r1830.s00 r1810.s00 into r1837;
    ternary r1794 r1830.s01 r1810.s01 into r1838;
    ternary r1794 r1830.s02 r1810.s02 into r1839;
    ternary r1794 r1830.s03 r1810.s03 into r1840;
    cast r1834 r1835 r1836 r1837 r1838 r1839 r1840 into r1841 as Stack;
    ternary r1794 r1829 r1811 into r1842;
    ternary r1794 r1830.capacity r1775.capacity into r1843;
    ternary r1794 r1830.top r1775.top into r1844;
    ternary r1794 r1830.member_size r1775.member_size into r1845;
    ternary r1794 r1830.s00 r1775.s00 into r1846;
    ternary r1794 r1830.s01 r1775.s01 into r1847;
    ternary r1794 r1830.s02 r1775.s02 into r1848;
    ternary r1794 r1830.s03 r1775.s03 into r1849;
    cast r1843 r1844 r1845 r1846 r1847 r1848 r1849 into r1850 as Stack;
    ternary r1794 r1831.capacity r1827.capacity into r1851;
    ternary r1794 r1831.top r1827.top into r1852;
    ternary r1794 r1831.member_size r1827.member_size into r1853;
    ternary r1794 r1831.s00 r1827.s00 into r1854;
    ternary r1794 r1831.s01 r1827.s01 into r1855;
    ternary r1794 r1831.s02 r1827.s02 into r1856;
    ternary r1794 r1831.s03 r1827.s03 into r1857;
    cast r1851 r1852 r1853 r1854 r1855 r1856 r1857 into r1858 as Stack;
    ternary r1794 r1832 r1784 into r1859;
    lt 24i8 r0 into r1860;
    sub 24i8 r0 into r1861;
    rem r1861 2i8 into r1862;
    is.eq r1862 0i8 into r1863;
    lte r1859 25u8 into r1864;
    ternary r1864 true false into r1865;
    ternary r1864 false true into r1866;
    ternary r1863 true r1866 into r1867;
    ternary r1863 false r1865 into r1868;
    ternary r1860 true r1868 into r1869;
    ternary r1860 false r1867 into r1870;
    or r1870 r1869 into r1871;
    assert.eq r1871 true;
    call init_stack 8u8 into r1872;
    call pop r1819 into r1873 r1874;
    call push r1873 r1858 into r1875;
    add r1828 1u8 into r1876;
    ternary r1870 r1873 0u128 into r1877;
    ternary r1870 r1874.capacity r1872.capacity into r1878;
    ternary r1870 r1874.top r1872.top into r1879;
    ternary r1870 r1874.member_size r1872.member_size into r1880;
    ternary r1870 r1874.s00 r1872.s00 into r1881;
    ternary r1870 r1874.s01 r1872.s01 into r1882;
    ternary r1870 r1874.s02 r1872.s02 into r1883;
    ternary r1870 r1874.s03 r1872.s03 into r1884;
    cast r1878 r1879 r1880 r1881 r1882 r1883 r1884 into r1885 as Stack;
    ternary r1870 r1873 0u128 into r1886;
    ternary r1870 r1874.capacity r1819.capacity into r1887;
    ternary r1870 r1874.top r1819.top into r1888;
    ternary r1870 r1874.member_size r1819.member_size into r1889;
    ternary r1870 r1874.s00 r1819.s00 into r1890;
    ternary r1870 r1874.s01 r1819.s01 into r1891;
    ternary r1870 r1874.s02 r1819.s02 into r1892;
    ternary r1870 r1874.s03 r1819.s03 into r1893;
    cast r1887 r1888 r1889 r1890 r1891 r1892 r1893 into r1894 as Stack;
    ternary r1870 r1875.capacity r1858.capacity into r1895;
    ternary r1870 r1875.top r1858.top into r1896;
    ternary r1870 r1875.member_size r1858.member_size into r1897;
    ternary r1870 r1875.s00 r1858.s00 into r1898;
    ternary r1870 r1875.s01 r1858.s01 into r1899;
    ternary r1870 r1875.s02 r1858.s02 into r1900;
    ternary r1870 r1875.s03 r1858.s03 into r1901;
    cast r1895 r1896 r1897 r1898 r1899 r1900 r1901 into r1902 as Stack;
    ternary r1870 r1876 r1828 into r1903;
    call pop r1850 into r1904 r1905;
    call push r1904 r1902 into r1906;
    add r1859 1u8 into r1907;
    ternary r1869 r1904 r1877 into r1908;
    ternary r1869 r1905.capacity r1885.capacity into r1909;
    ternary r1869 r1905.top r1885.top into r1910;
    ternary r1869 r1905.member_size r1885.member_size into r1911;
    ternary r1869 r1905.s00 r1885.s00 into r1912;
    ternary r1869 r1905.s01 r1885.s01 into r1913;
    ternary r1869 r1905.s02 r1885.s02 into r1914;
    ternary r1869 r1905.s03 r1885.s03 into r1915;
    cast r1909 r1910 r1911 r1912 r1913 r1914 r1915 into r1916 as Stack;
    ternary r1869 r1904 r1886 into r1917;
    ternary r1869 r1905.capacity r1850.capacity into r1918;
    ternary r1869 r1905.top r1850.top into r1919;
    ternary r1869 r1905.member_size r1850.member_size into r1920;
    ternary r1869 r1905.s00 r1850.s00 into r1921;
    ternary r1869 r1905.s01 r1850.s01 into r1922;
    ternary r1869 r1905.s02 r1850.s02 into r1923;
    ternary r1869 r1905.s03 r1850.s03 into r1924;
    cast r1918 r1919 r1920 r1921 r1922 r1923 r1924 into r1925 as Stack;
    ternary r1869 r1906.capacity r1902.capacity into r1926;
    ternary r1869 r1906.top r1902.top into r1927;
    ternary r1869 r1906.member_size r1902.member_size into r1928;
    ternary r1869 r1906.s00 r1902.s00 into r1929;
    ternary r1869 r1906.s01 r1902.s01 into r1930;
    ternary r1869 r1906.s02 r1902.s02 into r1931;
    ternary r1869 r1906.s03 r1902.s03 into r1932;
    cast r1926 r1927 r1928 r1929 r1930 r1931 r1932 into r1933 as Stack;
    ternary r1869 r1907 r1859 into r1934;
    lt 25i8 r0 into r1935;
    sub 25i8 r0 into r1936;
    rem r1936 2i8 into r1937;
    is.eq r1937 0i8 into r1938;
    lte r1934 25u8 into r1939;
    ternary r1939 true false into r1940;
    ternary r1939 false true into r1941;
    ternary r1938 true r1941 into r1942;
    ternary r1938 false r1940 into r1943;
    ternary r1935 true r1943 into r1944;
    ternary r1935 false r1942 into r1945;
    or r1945 r1944 into r1946;
    assert.eq r1946 true;
    call init_stack 8u8 into r1947;
    call pop r1894 into r1948 r1949;
    call push r1948 r1933 into r1950;
    add r1903 1u8 into r1951;
    ternary r1945 r1948 0u128 into r1952;
    ternary r1945 r1949.capacity r1947.capacity into r1953;
    ternary r1945 r1949.top r1947.top into r1954;
    ternary r1945 r1949.member_size r1947.member_size into r1955;
    ternary r1945 r1949.s00 r1947.s00 into r1956;
    ternary r1945 r1949.s01 r1947.s01 into r1957;
    ternary r1945 r1949.s02 r1947.s02 into r1958;
    ternary r1945 r1949.s03 r1947.s03 into r1959;
    cast r1953 r1954 r1955 r1956 r1957 r1958 r1959 into r1960 as Stack;
    ternary r1945 r1948 0u128 into r1961;
    ternary r1945 r1949.capacity r1894.capacity into r1962;
    ternary r1945 r1949.top r1894.top into r1963;
    ternary r1945 r1949.member_size r1894.member_size into r1964;
    ternary r1945 r1949.s00 r1894.s00 into r1965;
    ternary r1945 r1949.s01 r1894.s01 into r1966;
    ternary r1945 r1949.s02 r1894.s02 into r1967;
    ternary r1945 r1949.s03 r1894.s03 into r1968;
    cast r1962 r1963 r1964 r1965 r1966 r1967 r1968 into r1969 as Stack;
    ternary r1945 r1950.capacity r1933.capacity into r1970;
    ternary r1945 r1950.top r1933.top into r1971;
    ternary r1945 r1950.member_size r1933.member_size into r1972;
    ternary r1945 r1950.s00 r1933.s00 into r1973;
    ternary r1945 r1950.s01 r1933.s01 into r1974;
    ternary r1945 r1950.s02 r1933.s02 into r1975;
    ternary r1945 r1950.s03 r1933.s03 into r1976;
    cast r1970 r1971 r1972 r1973 r1974 r1975 r1976 into r1977 as Stack;
    ternary r1945 r1951 r1903 into r1978;
    call pop r1925 into r1979 r1980;
    call push r1979 r1977 into r1981;
    add r1934 1u8 into r1982;
    ternary r1944 r1979 r1952 into r1983;
    ternary r1944 r1980.capacity r1960.capacity into r1984;
    ternary r1944 r1980.top r1960.top into r1985;
    ternary r1944 r1980.member_size r1960.member_size into r1986;
    ternary r1944 r1980.s00 r1960.s00 into r1987;
    ternary r1944 r1980.s01 r1960.s01 into r1988;
    ternary r1944 r1980.s02 r1960.s02 into r1989;
    ternary r1944 r1980.s03 r1960.s03 into r1990;
    cast r1984 r1985 r1986 r1987 r1988 r1989 r1990 into r1991 as Stack;
    ternary r1944 r1979 r1961 into r1992;
    ternary r1944 r1980.capacity r1925.capacity into r1993;
    ternary r1944 r1980.top r1925.top into r1994;
    ternary r1944 r1980.member_size r1925.member_size into r1995;
    ternary r1944 r1980.s00 r1925.s00 into r1996;
    ternary r1944 r1980.s01 r1925.s01 into r1997;
    ternary r1944 r1980.s02 r1925.s02 into r1998;
    ternary r1944 r1980.s03 r1925.s03 into r1999;
    cast r1993 r1994 r1995 r1996 r1997 r1998 r1999 into r2000 as Stack;
    ternary r1944 r1981.capacity r1977.capacity into r2001;
    ternary r1944 r1981.top r1977.top into r2002;
    ternary r1944 r1981.member_size r1977.member_size into r2003;
    ternary r1944 r1981.s00 r1977.s00 into r2004;
    ternary r1944 r1981.s01 r1977.s01 into r2005;
    ternary r1944 r1981.s02 r1977.s02 into r2006;
    ternary r1944 r1981.s03 r1977.s03 into r2007;
    cast r2001 r2002 r2003 r2004 r2005 r2006 r2007 into r2008 as Stack;
    ternary r1944 r1982 r1934 into r2009;
    lt 26i8 r0 into r2010;
    sub 26i8 r0 into r2011;
    rem r2011 2i8 into r2012;
    is.eq r2012 0i8 into r2013;
    lte r2009 25u8 into r2014;
    ternary r2014 true false into r2015;
    ternary r2014 false true into r2016;
    ternary r2013 true r2016 into r2017;
    ternary r2013 false r2015 into r2018;
    ternary r2010 true r2018 into r2019;
    ternary r2010 false r2017 into r2020;
    or r2020 r2019 into r2021;
    assert.eq r2021 true;
    call init_stack 8u8 into r2022;
    call pop r1969 into r2023 r2024;
    call push r2023 r2008 into r2025;
    add r1978 1u8 into r2026;
    ternary r2020 r2023 0u128 into r2027;
    ternary r2020 r2024.capacity r2022.capacity into r2028;
    ternary r2020 r2024.top r2022.top into r2029;
    ternary r2020 r2024.member_size r2022.member_size into r2030;
    ternary r2020 r2024.s00 r2022.s00 into r2031;
    ternary r2020 r2024.s01 r2022.s01 into r2032;
    ternary r2020 r2024.s02 r2022.s02 into r2033;
    ternary r2020 r2024.s03 r2022.s03 into r2034;
    cast r2028 r2029 r2030 r2031 r2032 r2033 r2034 into r2035 as Stack;
    ternary r2020 r2023 0u128 into r2036;
    ternary r2020 r2024.capacity r1969.capacity into r2037;
    ternary r2020 r2024.top r1969.top into r2038;
    ternary r2020 r2024.member_size r1969.member_size into r2039;
    ternary r2020 r2024.s00 r1969.s00 into r2040;
    ternary r2020 r2024.s01 r1969.s01 into r2041;
    ternary r2020 r2024.s02 r1969.s02 into r2042;
    ternary r2020 r2024.s03 r1969.s03 into r2043;
    cast r2037 r2038 r2039 r2040 r2041 r2042 r2043 into r2044 as Stack;
    ternary r2020 r2025.capacity r2008.capacity into r2045;
    ternary r2020 r2025.top r2008.top into r2046;
    ternary r2020 r2025.member_size r2008.member_size into r2047;
    ternary r2020 r2025.s00 r2008.s00 into r2048;
    ternary r2020 r2025.s01 r2008.s01 into r2049;
    ternary r2020 r2025.s02 r2008.s02 into r2050;
    ternary r2020 r2025.s03 r2008.s03 into r2051;
    cast r2045 r2046 r2047 r2048 r2049 r2050 r2051 into r2052 as Stack;
    ternary r2020 r2026 r1978 into r2053;
    call pop r2000 into r2054 r2055;
    call push r2054 r2052 into r2056;
    add r2009 1u8 into r2057;
    ternary r2019 r2054 r2027 into r2058;
    ternary r2019 r2055.capacity r2035.capacity into r2059;
    ternary r2019 r2055.top r2035.top into r2060;
    ternary r2019 r2055.member_size r2035.member_size into r2061;
    ternary r2019 r2055.s00 r2035.s00 into r2062;
    ternary r2019 r2055.s01 r2035.s01 into r2063;
    ternary r2019 r2055.s02 r2035.s02 into r2064;
    ternary r2019 r2055.s03 r2035.s03 into r2065;
    cast r2059 r2060 r2061 r2062 r2063 r2064 r2065 into r2066 as Stack;
    ternary r2019 r2054 r2036 into r2067;
    ternary r2019 r2055.capacity r2000.capacity into r2068;
    ternary r2019 r2055.top r2000.top into r2069;
    ternary r2019 r2055.member_size r2000.member_size into r2070;
    ternary r2019 r2055.s00 r2000.s00 into r2071;
    ternary r2019 r2055.s01 r2000.s01 into r2072;
    ternary r2019 r2055.s02 r2000.s02 into r2073;
    ternary r2019 r2055.s03 r2000.s03 into r2074;
    cast r2068 r2069 r2070 r2071 r2072 r2073 r2074 into r2075 as Stack;
    ternary r2019 r2056.capacity r2052.capacity into r2076;
    ternary r2019 r2056.top r2052.top into r2077;
    ternary r2019 r2056.member_size r2052.member_size into r2078;
    ternary r2019 r2056.s00 r2052.s00 into r2079;
    ternary r2019 r2056.s01 r2052.s01 into r2080;
    ternary r2019 r2056.s02 r2052.s02 into r2081;
    ternary r2019 r2056.s03 r2052.s03 into r2082;
    cast r2076 r2077 r2078 r2079 r2080 r2081 r2082 into r2083 as Stack;
    ternary r2019 r2057 r2009 into r2084;
    lt 27i8 r0 into r2085;
    sub 27i8 r0 into r2086;
    rem r2086 2i8 into r2087;
    is.eq r2087 0i8 into r2088;
    lte r2084 25u8 into r2089;
    ternary r2089 true false into r2090;
    ternary r2089 false true into r2091;
    ternary r2088 true r2091 into r2092;
    ternary r2088 false r2090 into r2093;
    ternary r2085 true r2093 into r2094;
    ternary r2085 false r2092 into r2095;
    or r2095 r2094 into r2096;
    assert.eq r2096 true;
    call init_stack 8u8 into r2097;
    call pop r2044 into r2098 r2099;
    call push r2098 r2083 into r2100;
    add r2053 1u8 into r2101;
    ternary r2095 r2098 0u128 into r2102;
    ternary r2095 r2099.capacity r2097.capacity into r2103;
    ternary r2095 r2099.top r2097.top into r2104;
    ternary r2095 r2099.member_size r2097.member_size into r2105;
    ternary r2095 r2099.s00 r2097.s00 into r2106;
    ternary r2095 r2099.s01 r2097.s01 into r2107;
    ternary r2095 r2099.s02 r2097.s02 into r2108;
    ternary r2095 r2099.s03 r2097.s03 into r2109;
    cast r2103 r2104 r2105 r2106 r2107 r2108 r2109 into r2110 as Stack;
    ternary r2095 r2098 0u128 into r2111;
    ternary r2095 r2099.capacity r2044.capacity into r2112;
    ternary r2095 r2099.top r2044.top into r2113;
    ternary r2095 r2099.member_size r2044.member_size into r2114;
    ternary r2095 r2099.s00 r2044.s00 into r2115;
    ternary r2095 r2099.s01 r2044.s01 into r2116;
    ternary r2095 r2099.s02 r2044.s02 into r2117;
    ternary r2095 r2099.s03 r2044.s03 into r2118;
    cast r2112 r2113 r2114 r2115 r2116 r2117 r2118 into r2119 as Stack;
    ternary r2095 r2100.capacity r2083.capacity into r2120;
    ternary r2095 r2100.top r2083.top into r2121;
    ternary r2095 r2100.member_size r2083.member_size into r2122;
    ternary r2095 r2100.s00 r2083.s00 into r2123;
    ternary r2095 r2100.s01 r2083.s01 into r2124;
    ternary r2095 r2100.s02 r2083.s02 into r2125;
    ternary r2095 r2100.s03 r2083.s03 into r2126;
    cast r2120 r2121 r2122 r2123 r2124 r2125 r2126 into r2127 as Stack;
    ternary r2095 r2101 r2053 into r2128;
    call pop r2075 into r2129 r2130;
    call push r2129 r2127 into r2131;
    add r2084 1u8 into r2132;
    ternary r2094 r2129 r2102 into r2133;
    ternary r2094 r2130.capacity r2110.capacity into r2134;
    ternary r2094 r2130.top r2110.top into r2135;
    ternary r2094 r2130.member_size r2110.member_size into r2136;
    ternary r2094 r2130.s00 r2110.s00 into r2137;
    ternary r2094 r2130.s01 r2110.s01 into r2138;
    ternary r2094 r2130.s02 r2110.s02 into r2139;
    ternary r2094 r2130.s03 r2110.s03 into r2140;
    cast r2134 r2135 r2136 r2137 r2138 r2139 r2140 into r2141 as Stack;
    ternary r2094 r2129 r2111 into r2142;
    ternary r2094 r2130.capacity r2075.capacity into r2143;
    ternary r2094 r2130.top r2075.top into r2144;
    ternary r2094 r2130.member_size r2075.member_size into r2145;
    ternary r2094 r2130.s00 r2075.s00 into r2146;
    ternary r2094 r2130.s01 r2075.s01 into r2147;
    ternary r2094 r2130.s02 r2075.s02 into r2148;
    ternary r2094 r2130.s03 r2075.s03 into r2149;
    cast r2143 r2144 r2145 r2146 r2147 r2148 r2149 into r2150 as Stack;
    ternary r2094 r2131.capacity r2127.capacity into r2151;
    ternary r2094 r2131.top r2127.top into r2152;
    ternary r2094 r2131.member_size r2127.member_size into r2153;
    ternary r2094 r2131.s00 r2127.s00 into r2154;
    ternary r2094 r2131.s01 r2127.s01 into r2155;
    ternary r2094 r2131.s02 r2127.s02 into r2156;
    ternary r2094 r2131.s03 r2127.s03 into r2157;
    cast r2151 r2152 r2153 r2154 r2155 r2156 r2157 into r2158 as Stack;
    ternary r2094 r2132 r2084 into r2159;
    lt 28i8 r0 into r2160;
    sub 28i8 r0 into r2161;
    rem r2161 2i8 into r2162;
    is.eq r2162 0i8 into r2163;
    lte r2159 25u8 into r2164;
    ternary r2164 true false into r2165;
    ternary r2164 false true into r2166;
    ternary r2163 true r2166 into r2167;
    ternary r2163 false r2165 into r2168;
    ternary r2160 true r2168 into r2169;
    ternary r2160 false r2167 into r2170;
    or r2170 r2169 into r2171;
    assert.eq r2171 true;
    call init_stack 8u8 into r2172;
    call pop r2119 into r2173 r2174;
    call push r2173 r2158 into r2175;
    add r2128 1u8 into r2176;
    ternary r2170 r2173 0u128 into r2177;
    ternary r2170 r2174.capacity r2172.capacity into r2178;
    ternary r2170 r2174.top r2172.top into r2179;
    ternary r2170 r2174.member_size r2172.member_size into r2180;
    ternary r2170 r2174.s00 r2172.s00 into r2181;
    ternary r2170 r2174.s01 r2172.s01 into r2182;
    ternary r2170 r2174.s02 r2172.s02 into r2183;
    ternary r2170 r2174.s03 r2172.s03 into r2184;
    cast r2178 r2179 r2180 r2181 r2182 r2183 r2184 into r2185 as Stack;
    ternary r2170 r2173 0u128 into r2186;
    ternary r2170 r2174.capacity r2119.capacity into r2187;
    ternary r2170 r2174.top r2119.top into r2188;
    ternary r2170 r2174.member_size r2119.member_size into r2189;
    ternary r2170 r2174.s00 r2119.s00 into r2190;
    ternary r2170 r2174.s01 r2119.s01 into r2191;
    ternary r2170 r2174.s02 r2119.s02 into r2192;
    ternary r2170 r2174.s03 r2119.s03 into r2193;
    cast r2187 r2188 r2189 r2190 r2191 r2192 r2193 into r2194 as Stack;
    ternary r2170 r2175.capacity r2158.capacity into r2195;
    ternary r2170 r2175.top r2158.top into r2196;
    ternary r2170 r2175.member_size r2158.member_size into r2197;
    ternary r2170 r2175.s00 r2158.s00 into r2198;
    ternary r2170 r2175.s01 r2158.s01 into r2199;
    ternary r2170 r2175.s02 r2158.s02 into r2200;
    ternary r2170 r2175.s03 r2158.s03 into r2201;
    cast r2195 r2196 r2197 r2198 r2199 r2200 r2201 into r2202 as Stack;
    ternary r2170 r2176 r2128 into r2203;
    call pop r2150 into r2204 r2205;
    call push r2204 r2202 into r2206;
    add r2159 1u8 into r2207;
    ternary r2169 r2204 r2177 into r2208;
    ternary r2169 r2205.capacity r2185.capacity into r2209;
    ternary r2169 r2205.top r2185.top into r2210;
    ternary r2169 r2205.member_size r2185.member_size into r2211;
    ternary r2169 r2205.s00 r2185.s00 into r2212;
    ternary r2169 r2205.s01 r2185.s01 into r2213;
    ternary r2169 r2205.s02 r2185.s02 into r2214;
    ternary r2169 r2205.s03 r2185.s03 into r2215;
    cast r2209 r2210 r2211 r2212 r2213 r2214 r2215 into r2216 as Stack;
    ternary r2169 r2204 r2186 into r2217;
    ternary r2169 r2205.capacity r2150.capacity into r2218;
    ternary r2169 r2205.top r2150.top into r2219;
    ternary r2169 r2205.member_size r2150.member_size into r2220;
    ternary r2169 r2205.s00 r2150.s00 into r2221;
    ternary r2169 r2205.s01 r2150.s01 into r2222;
    ternary r2169 r2205.s02 r2150.s02 into r2223;
    ternary r2169 r2205.s03 r2150.s03 into r2224;
    cast r2218 r2219 r2220 r2221 r2222 r2223 r2224 into r2225 as Stack;
    ternary r2169 r2206.capacity r2202.capacity into r2226;
    ternary r2169 r2206.top r2202.top into r2227;
    ternary r2169 r2206.member_size r2202.member_size into r2228;
    ternary r2169 r2206.s00 r2202.s00 into r2229;
    ternary r2169 r2206.s01 r2202.s01 into r2230;
    ternary r2169 r2206.s02 r2202.s02 into r2231;
    ternary r2169 r2206.s03 r2202.s03 into r2232;
    cast r2226 r2227 r2228 r2229 r2230 r2231 r2232 into r2233 as Stack;
    ternary r2169 r2207 r2159 into r2234;
    lt 29i8 r0 into r2235;
    sub 29i8 r0 into r2236;
    rem r2236 2i8 into r2237;
    is.eq r2237 0i8 into r2238;
    lte r2234 25u8 into r2239;
    ternary r2239 true false into r2240;
    ternary r2239 false true into r2241;
    ternary r2238 true r2241 into r2242;
    ternary r2238 false r2240 into r2243;
    ternary r2235 true r2243 into r2244;
    ternary r2235 false r2242 into r2245;
    or r2245 r2244 into r2246;
    assert.eq r2246 true;
    call init_stack 8u8 into r2247;
    call pop r2194 into r2248 r2249;
    call push r2248 r2233 into r2250;
    add r2203 1u8 into r2251;
    ternary r2245 r2248 0u128 into r2252;
    ternary r2245 r2249.capacity r2247.capacity into r2253;
    ternary r2245 r2249.top r2247.top into r2254;
    ternary r2245 r2249.member_size r2247.member_size into r2255;
    ternary r2245 r2249.s00 r2247.s00 into r2256;
    ternary r2245 r2249.s01 r2247.s01 into r2257;
    ternary r2245 r2249.s02 r2247.s02 into r2258;
    ternary r2245 r2249.s03 r2247.s03 into r2259;
    cast r2253 r2254 r2255 r2256 r2257 r2258 r2259 into r2260 as Stack;
    ternary r2245 r2248 0u128 into r2261;
    ternary r2245 r2249.capacity r2194.capacity into r2262;
    ternary r2245 r2249.top r2194.top into r2263;
    ternary r2245 r2249.member_size r2194.member_size into r2264;
    ternary r2245 r2249.s00 r2194.s00 into r2265;
    ternary r2245 r2249.s01 r2194.s01 into r2266;
    ternary r2245 r2249.s02 r2194.s02 into r2267;
    ternary r2245 r2249.s03 r2194.s03 into r2268;
    cast r2262 r2263 r2264 r2265 r2266 r2267 r2268 into r2269 as Stack;
    ternary r2245 r2250.capacity r2233.capacity into r2270;
    ternary r2245 r2250.top r2233.top into r2271;
    ternary r2245 r2250.member_size r2233.member_size into r2272;
    ternary r2245 r2250.s00 r2233.s00 into r2273;
    ternary r2245 r2250.s01 r2233.s01 into r2274;
    ternary r2245 r2250.s02 r2233.s02 into r2275;
    ternary r2245 r2250.s03 r2233.s03 into r2276;
    cast r2270 r2271 r2272 r2273 r2274 r2275 r2276 into r2277 as Stack;
    ternary r2245 r2251 r2203 into r2278;
    call pop r2225 into r2279 r2280;
    call push r2279 r2277 into r2281;
    add r2234 1u8 into r2282;
    ternary r2244 r2279 r2252 into r2283;
    ternary r2244 r2280.capacity r2260.capacity into r2284;
    ternary r2244 r2280.top r2260.top into r2285;
    ternary r2244 r2280.member_size r2260.member_size into r2286;
    ternary r2244 r2280.s00 r2260.s00 into r2287;
    ternary r2244 r2280.s01 r2260.s01 into r2288;
    ternary r2244 r2280.s02 r2260.s02 into r2289;
    ternary r2244 r2280.s03 r2260.s03 into r2290;
    cast r2284 r2285 r2286 r2287 r2288 r2289 r2290 into r2291 as Stack;
    ternary r2244 r2279 r2261 into r2292;
    ternary r2244 r2280.capacity r2225.capacity into r2293;
    ternary r2244 r2280.top r2225.top into r2294;
    ternary r2244 r2280.member_size r2225.member_size into r2295;
    ternary r2244 r2280.s00 r2225.s00 into r2296;
    ternary r2244 r2280.s01 r2225.s01 into r2297;
    ternary r2244 r2280.s02 r2225.s02 into r2298;
    ternary r2244 r2280.s03 r2225.s03 into r2299;
    cast r2293 r2294 r2295 r2296 r2297 r2298 r2299 into r2300 as Stack;
    ternary r2244 r2281.capacity r2277.capacity into r2301;
    ternary r2244 r2281.top r2277.top into r2302;
    ternary r2244 r2281.member_size r2277.member_size into r2303;
    ternary r2244 r2281.s00 r2277.s00 into r2304;
    ternary r2244 r2281.s01 r2277.s01 into r2305;
    ternary r2244 r2281.s02 r2277.s02 into r2306;
    ternary r2244 r2281.s03 r2277.s03 into r2307;
    cast r2301 r2302 r2303 r2304 r2305 r2306 r2307 into r2308 as Stack;
    ternary r2244 r2282 r2234 into r2309;
    lt 30i8 r0 into r2310;
    sub 30i8 r0 into r2311;
    rem r2311 2i8 into r2312;
    is.eq r2312 0i8 into r2313;
    lte r2309 25u8 into r2314;
    ternary r2314 true false into r2315;
    ternary r2314 false true into r2316;
    ternary r2313 true r2316 into r2317;
    ternary r2313 false r2315 into r2318;
    ternary r2310 true r2318 into r2319;
    ternary r2310 false r2317 into r2320;
    or r2320 r2319 into r2321;
    assert.eq r2321 true;
    call init_stack 8u8 into r2322;
    call pop r2269 into r2323 r2324;
    call push r2323 r2308 into r2325;
    add r2278 1u8 into r2326;
    ternary r2320 r2323 0u128 into r2327;
    ternary r2320 r2324.capacity r2322.capacity into r2328;
    ternary r2320 r2324.top r2322.top into r2329;
    ternary r2320 r2324.member_size r2322.member_size into r2330;
    ternary r2320 r2324.s00 r2322.s00 into r2331;
    ternary r2320 r2324.s01 r2322.s01 into r2332;
    ternary r2320 r2324.s02 r2322.s02 into r2333;
    ternary r2320 r2324.s03 r2322.s03 into r2334;
    cast r2328 r2329 r2330 r2331 r2332 r2333 r2334 into r2335 as Stack;
    ternary r2320 r2323 0u128 into r2336;
    ternary r2320 r2324.capacity r2269.capacity into r2337;
    ternary r2320 r2324.top r2269.top into r2338;
    ternary r2320 r2324.member_size r2269.member_size into r2339;
    ternary r2320 r2324.s00 r2269.s00 into r2340;
    ternary r2320 r2324.s01 r2269.s01 into r2341;
    ternary r2320 r2324.s02 r2269.s02 into r2342;
    ternary r2320 r2324.s03 r2269.s03 into r2343;
    cast r2337 r2338 r2339 r2340 r2341 r2342 r2343 into r2344 as Stack;
    ternary r2320 r2325.capacity r2308.capacity into r2345;
    ternary r2320 r2325.top r2308.top into r2346;
    ternary r2320 r2325.member_size r2308.member_size into r2347;
    ternary r2320 r2325.s00 r2308.s00 into r2348;
    ternary r2320 r2325.s01 r2308.s01 into r2349;
    ternary r2320 r2325.s02 r2308.s02 into r2350;
    ternary r2320 r2325.s03 r2308.s03 into r2351;
    cast r2345 r2346 r2347 r2348 r2349 r2350 r2351 into r2352 as Stack;
    ternary r2320 r2326 r2278 into r2353;
    call pop r2300 into r2354 r2355;
    call push r2354 r2352 into r2356;
    add r2309 1u8 into r2357;
    ternary r2319 r2354 r2327 into r2358;
    ternary r2319 r2355.capacity r2335.capacity into r2359;
    ternary r2319 r2355.top r2335.top into r2360;
    ternary r2319 r2355.member_size r2335.member_size into r2361;
    ternary r2319 r2355.s00 r2335.s00 into r2362;
    ternary r2319 r2355.s01 r2335.s01 into r2363;
    ternary r2319 r2355.s02 r2335.s02 into r2364;
    ternary r2319 r2355.s03 r2335.s03 into r2365;
    cast r2359 r2360 r2361 r2362 r2363 r2364 r2365 into r2366 as Stack;
    ternary r2319 r2354 r2336 into r2367;
    ternary r2319 r2355.capacity r2300.capacity into r2368;
    ternary r2319 r2355.top r2300.top into r2369;
    ternary r2319 r2355.member_size r2300.member_size into r2370;
    ternary r2319 r2355.s00 r2300.s00 into r2371;
    ternary r2319 r2355.s01 r2300.s01 into r2372;
    ternary r2319 r2355.s02 r2300.s02 into r2373;
    ternary r2319 r2355.s03 r2300.s03 into r2374;
    cast r2368 r2369 r2370 r2371 r2372 r2373 r2374 into r2375 as Stack;
    ternary r2319 r2356.capacity r2352.capacity into r2376;
    ternary r2319 r2356.top r2352.top into r2377;
    ternary r2319 r2356.member_size r2352.member_size into r2378;
    ternary r2319 r2356.s00 r2352.s00 into r2379;
    ternary r2319 r2356.s01 r2352.s01 into r2380;
    ternary r2319 r2356.s02 r2352.s02 into r2381;
    ternary r2319 r2356.s03 r2352.s03 into r2382;
    cast r2376 r2377 r2378 r2379 r2380 r2381 r2382 into r2383 as Stack;
    ternary r2319 r2357 r2309 into r2384;
    lt 31i8 r0 into r2385;
    sub 31i8 r0 into r2386;
    rem r2386 2i8 into r2387;
    is.eq r2387 0i8 into r2388;
    lte r2384 25u8 into r2389;
    ternary r2389 true false into r2390;
    ternary r2389 false true into r2391;
    ternary r2388 true r2391 into r2392;
    ternary r2388 false r2390 into r2393;
    ternary r2385 true r2393 into r2394;
    ternary r2385 false r2392 into r2395;
    or r2395 r2394 into r2396;
    assert.eq r2396 true;
    call init_stack 8u8 into r2397;
    call pop r2344 into r2398 r2399;
    call push r2398 r2383 into r2400;
    add r2353 1u8 into r2401;
    ternary r2395 r2398 0u128 into r2402;
    ternary r2395 r2399.capacity r2397.capacity into r2403;
    ternary r2395 r2399.top r2397.top into r2404;
    ternary r2395 r2399.member_size r2397.member_size into r2405;
    ternary r2395 r2399.s00 r2397.s00 into r2406;
    ternary r2395 r2399.s01 r2397.s01 into r2407;
    ternary r2395 r2399.s02 r2397.s02 into r2408;
    ternary r2395 r2399.s03 r2397.s03 into r2409;
    cast r2403 r2404 r2405 r2406 r2407 r2408 r2409 into r2410 as Stack;
    ternary r2395 r2398 0u128 into r2411;
    ternary r2395 r2399.capacity r2344.capacity into r2412;
    ternary r2395 r2399.top r2344.top into r2413;
    ternary r2395 r2399.member_size r2344.member_size into r2414;
    ternary r2395 r2399.s00 r2344.s00 into r2415;
    ternary r2395 r2399.s01 r2344.s01 into r2416;
    ternary r2395 r2399.s02 r2344.s02 into r2417;
    ternary r2395 r2399.s03 r2344.s03 into r2418;
    cast r2412 r2413 r2414 r2415 r2416 r2417 r2418 into r2419 as Stack;
    ternary r2395 r2400.capacity r2383.capacity into r2420;
    ternary r2395 r2400.top r2383.top into r2421;
    ternary r2395 r2400.member_size r2383.member_size into r2422;
    ternary r2395 r2400.s00 r2383.s00 into r2423;
    ternary r2395 r2400.s01 r2383.s01 into r2424;
    ternary r2395 r2400.s02 r2383.s02 into r2425;
    ternary r2395 r2400.s03 r2383.s03 into r2426;
    cast r2420 r2421 r2422 r2423 r2424 r2425 r2426 into r2427 as Stack;
    ternary r2395 r2401 r2353 into r2428;
    call pop r2375 into r2429 r2430;
    call push r2429 r2427 into r2431;
    add r2384 1u8 into r2432;
    ternary r2394 r2429 r2402 into r2433;
    ternary r2394 r2430.capacity r2410.capacity into r2434;
    ternary r2394 r2430.top r2410.top into r2435;
    ternary r2394 r2430.member_size r2410.member_size into r2436;
    ternary r2394 r2430.s00 r2410.s00 into r2437;
    ternary r2394 r2430.s01 r2410.s01 into r2438;
    ternary r2394 r2430.s02 r2410.s02 into r2439;
    ternary r2394 r2430.s03 r2410.s03 into r2440;
    cast r2434 r2435 r2436 r2437 r2438 r2439 r2440 into r2441 as Stack;
    ternary r2394 r2429 r2411 into r2442;
    ternary r2394 r2430.capacity r2375.capacity into r2443;
    ternary r2394 r2430.top r2375.top into r2444;
    ternary r2394 r2430.member_size r2375.member_size into r2445;
    ternary r2394 r2430.s00 r2375.s00 into r2446;
    ternary r2394 r2430.s01 r2375.s01 into r2447;
    ternary r2394 r2430.s02 r2375.s02 into r2448;
    ternary r2394 r2430.s03 r2375.s03 into r2449;
    cast r2443 r2444 r2445 r2446 r2447 r2448 r2449 into r2450 as Stack;
    ternary r2394 r2431.capacity r2427.capacity into r2451;
    ternary r2394 r2431.top r2427.top into r2452;
    ternary r2394 r2431.member_size r2427.member_size into r2453;
    ternary r2394 r2431.s00 r2427.s00 into r2454;
    ternary r2394 r2431.s01 r2427.s01 into r2455;
    ternary r2394 r2431.s02 r2427.s02 into r2456;
    ternary r2394 r2431.s03 r2427.s03 into r2457;
    cast r2451 r2452 r2453 r2454 r2455 r2456 r2457 into r2458 as Stack;
    ternary r2394 r2432 r2384 into r2459;
    lt 32i8 r0 into r2460;
    sub 32i8 r0 into r2461;
    rem r2461 2i8 into r2462;
    is.eq r2462 0i8 into r2463;
    lte r2459 25u8 into r2464;
    ternary r2464 true false into r2465;
    ternary r2464 false true into r2466;
    ternary r2463 true r2466 into r2467;
    ternary r2463 false r2465 into r2468;
    ternary r2460 true r2468 into r2469;
    ternary r2460 false r2467 into r2470;
    or r2470 r2469 into r2471;
    assert.eq r2471 true;
    call init_stack 8u8 into r2472;
    call pop r2419 into r2473 r2474;
    call push r2473 r2458 into r2475;
    add r2428 1u8 into r2476;
    ternary r2470 r2473 0u128 into r2477;
    ternary r2470 r2474.capacity r2472.capacity into r2478;
    ternary r2470 r2474.top r2472.top into r2479;
    ternary r2470 r2474.member_size r2472.member_size into r2480;
    ternary r2470 r2474.s00 r2472.s00 into r2481;
    ternary r2470 r2474.s01 r2472.s01 into r2482;
    ternary r2470 r2474.s02 r2472.s02 into r2483;
    ternary r2470 r2474.s03 r2472.s03 into r2484;
    cast r2478 r2479 r2480 r2481 r2482 r2483 r2484 into r2485 as Stack;
    ternary r2470 r2473 0u128 into r2486;
    ternary r2470 r2474.capacity r2419.capacity into r2487;
    ternary r2470 r2474.top r2419.top into r2488;
    ternary r2470 r2474.member_size r2419.member_size into r2489;
    ternary r2470 r2474.s00 r2419.s00 into r2490;
    ternary r2470 r2474.s01 r2419.s01 into r2491;
    ternary r2470 r2474.s02 r2419.s02 into r2492;
    ternary r2470 r2474.s03 r2419.s03 into r2493;
    cast r2487 r2488 r2489 r2490 r2491 r2492 r2493 into r2494 as Stack;
    ternary r2470 r2475.capacity r2458.capacity into r2495;
    ternary r2470 r2475.top r2458.top into r2496;
    ternary r2470 r2475.member_size r2458.member_size into r2497;
    ternary r2470 r2475.s00 r2458.s00 into r2498;
    ternary r2470 r2475.s01 r2458.s01 into r2499;
    ternary r2470 r2475.s02 r2458.s02 into r2500;
    ternary r2470 r2475.s03 r2458.s03 into r2501;
    cast r2495 r2496 r2497 r2498 r2499 r2500 r2501 into r2502 as Stack;
    ternary r2470 r2476 r2428 into r2503;
    call pop r2450 into r2504 r2505;
    call push r2504 r2502 into r2506;
    add r2459 1u8 into r2507;
    ternary r2469 r2504 r2477 into r2508;
    ternary r2469 r2505.capacity r2485.capacity into r2509;
    ternary r2469 r2505.top r2485.top into r2510;
    ternary r2469 r2505.member_size r2485.member_size into r2511;
    ternary r2469 r2505.s00 r2485.s00 into r2512;
    ternary r2469 r2505.s01 r2485.s01 into r2513;
    ternary r2469 r2505.s02 r2485.s02 into r2514;
    ternary r2469 r2505.s03 r2485.s03 into r2515;
    cast r2509 r2510 r2511 r2512 r2513 r2514 r2515 into r2516 as Stack;
    ternary r2469 r2504 r2486 into r2517;
    ternary r2469 r2505.capacity r2450.capacity into r2518;
    ternary r2469 r2505.top r2450.top into r2519;
    ternary r2469 r2505.member_size r2450.member_size into r2520;
    ternary r2469 r2505.s00 r2450.s00 into r2521;
    ternary r2469 r2505.s01 r2450.s01 into r2522;
    ternary r2469 r2505.s02 r2450.s02 into r2523;
    ternary r2469 r2505.s03 r2450.s03 into r2524;
    cast r2518 r2519 r2520 r2521 r2522 r2523 r2524 into r2525 as Stack;
    ternary r2469 r2506.capacity r2502.capacity into r2526;
    ternary r2469 r2506.top r2502.top into r2527;
    ternary r2469 r2506.member_size r2502.member_size into r2528;
    ternary r2469 r2506.s00 r2502.s00 into r2529;
    ternary r2469 r2506.s01 r2502.s01 into r2530;
    ternary r2469 r2506.s02 r2502.s02 into r2531;
    ternary r2469 r2506.s03 r2502.s03 into r2532;
    cast r2526 r2527 r2528 r2529 r2530 r2531 r2532 into r2533 as Stack;
    ternary r2469 r2507 r2459 into r2534;
    lt 33i8 r0 into r2535;
    sub 33i8 r0 into r2536;
    rem r2536 2i8 into r2537;
    is.eq r2537 0i8 into r2538;
    lte r2534 25u8 into r2539;
    ternary r2539 true false into r2540;
    ternary r2539 false true into r2541;
    ternary r2538 true r2541 into r2542;
    ternary r2538 false r2540 into r2543;
    ternary r2535 true r2543 into r2544;
    ternary r2535 false r2542 into r2545;
    or r2545 r2544 into r2546;
    assert.eq r2546 true;
    call init_stack 8u8 into r2547;
    call pop r2494 into r2548 r2549;
    call push r2548 r2533 into r2550;
    add r2503 1u8 into r2551;
    ternary r2545 r2548 0u128 into r2552;
    ternary r2545 r2549.capacity r2547.capacity into r2553;
    ternary r2545 r2549.top r2547.top into r2554;
    ternary r2545 r2549.member_size r2547.member_size into r2555;
    ternary r2545 r2549.s00 r2547.s00 into r2556;
    ternary r2545 r2549.s01 r2547.s01 into r2557;
    ternary r2545 r2549.s02 r2547.s02 into r2558;
    ternary r2545 r2549.s03 r2547.s03 into r2559;
    cast r2553 r2554 r2555 r2556 r2557 r2558 r2559 into r2560 as Stack;
    ternary r2545 r2548 0u128 into r2561;
    ternary r2545 r2549.capacity r2494.capacity into r2562;
    ternary r2545 r2549.top r2494.top into r2563;
    ternary r2545 r2549.member_size r2494.member_size into r2564;
    ternary r2545 r2549.s00 r2494.s00 into r2565;
    ternary r2545 r2549.s01 r2494.s01 into r2566;
    ternary r2545 r2549.s02 r2494.s02 into r2567;
    ternary r2545 r2549.s03 r2494.s03 into r2568;
    cast r2562 r2563 r2564 r2565 r2566 r2567 r2568 into r2569 as Stack;
    ternary r2545 r2550.capacity r2533.capacity into r2570;
    ternary r2545 r2550.top r2533.top into r2571;
    ternary r2545 r2550.member_size r2533.member_size into r2572;
    ternary r2545 r2550.s00 r2533.s00 into r2573;
    ternary r2545 r2550.s01 r2533.s01 into r2574;
    ternary r2545 r2550.s02 r2533.s02 into r2575;
    ternary r2545 r2550.s03 r2533.s03 into r2576;
    cast r2570 r2571 r2572 r2573 r2574 r2575 r2576 into r2577 as Stack;
    ternary r2545 r2551 r2503 into r2578;
    call pop r2525 into r2579 r2580;
    call push r2579 r2577 into r2581;
    add r2534 1u8 into r2582;
    ternary r2544 r2579 r2552 into r2583;
    ternary r2544 r2580.capacity r2560.capacity into r2584;
    ternary r2544 r2580.top r2560.top into r2585;
    ternary r2544 r2580.member_size r2560.member_size into r2586;
    ternary r2544 r2580.s00 r2560.s00 into r2587;
    ternary r2544 r2580.s01 r2560.s01 into r2588;
    ternary r2544 r2580.s02 r2560.s02 into r2589;
    ternary r2544 r2580.s03 r2560.s03 into r2590;
    cast r2584 r2585 r2586 r2587 r2588 r2589 r2590 into r2591 as Stack;
    ternary r2544 r2579 r2561 into r2592;
    ternary r2544 r2580.capacity r2525.capacity into r2593;
    ternary r2544 r2580.top r2525.top into r2594;
    ternary r2544 r2580.member_size r2525.member_size into r2595;
    ternary r2544 r2580.s00 r2525.s00 into r2596;
    ternary r2544 r2580.s01 r2525.s01 into r2597;
    ternary r2544 r2580.s02 r2525.s02 into r2598;
    ternary r2544 r2580.s03 r2525.s03 into r2599;
    cast r2593 r2594 r2595 r2596 r2597 r2598 r2599 into r2600 as Stack;
    ternary r2544 r2581.capacity r2577.capacity into r2601;
    ternary r2544 r2581.top r2577.top into r2602;
    ternary r2544 r2581.member_size r2577.member_size into r2603;
    ternary r2544 r2581.s00 r2577.s00 into r2604;
    ternary r2544 r2581.s01 r2577.s01 into r2605;
    ternary r2544 r2581.s02 r2577.s02 into r2606;
    ternary r2544 r2581.s03 r2577.s03 into r2607;
    cast r2601 r2602 r2603 r2604 r2605 r2606 r2607 into r2608 as Stack;
    ternary r2544 r2582 r2534 into r2609;
    lt 34i8 r0 into r2610;
    sub 34i8 r0 into r2611;
    rem r2611 2i8 into r2612;
    is.eq r2612 0i8 into r2613;
    lte r2609 25u8 into r2614;
    ternary r2614 true false into r2615;
    ternary r2614 false true into r2616;
    ternary r2613 true r2616 into r2617;
    ternary r2613 false r2615 into r2618;
    ternary r2610 true r2618 into r2619;
    ternary r2610 false r2617 into r2620;
    or r2620 r2619 into r2621;
    assert.eq r2621 true;
    call init_stack 8u8 into r2622;
    call pop r2569 into r2623 r2624;
    call push r2623 r2608 into r2625;
    add r2578 1u8 into r2626;
    ternary r2620 r2623 0u128 into r2627;
    ternary r2620 r2624.capacity r2622.capacity into r2628;
    ternary r2620 r2624.top r2622.top into r2629;
    ternary r2620 r2624.member_size r2622.member_size into r2630;
    ternary r2620 r2624.s00 r2622.s00 into r2631;
    ternary r2620 r2624.s01 r2622.s01 into r2632;
    ternary r2620 r2624.s02 r2622.s02 into r2633;
    ternary r2620 r2624.s03 r2622.s03 into r2634;
    cast r2628 r2629 r2630 r2631 r2632 r2633 r2634 into r2635 as Stack;
    ternary r2620 r2623 0u128 into r2636;
    ternary r2620 r2624.capacity r2569.capacity into r2637;
    ternary r2620 r2624.top r2569.top into r2638;
    ternary r2620 r2624.member_size r2569.member_size into r2639;
    ternary r2620 r2624.s00 r2569.s00 into r2640;
    ternary r2620 r2624.s01 r2569.s01 into r2641;
    ternary r2620 r2624.s02 r2569.s02 into r2642;
    ternary r2620 r2624.s03 r2569.s03 into r2643;
    cast r2637 r2638 r2639 r2640 r2641 r2642 r2643 into r2644 as Stack;
    ternary r2620 r2625.capacity r2608.capacity into r2645;
    ternary r2620 r2625.top r2608.top into r2646;
    ternary r2620 r2625.member_size r2608.member_size into r2647;
    ternary r2620 r2625.s00 r2608.s00 into r2648;
    ternary r2620 r2625.s01 r2608.s01 into r2649;
    ternary r2620 r2625.s02 r2608.s02 into r2650;
    ternary r2620 r2625.s03 r2608.s03 into r2651;
    cast r2645 r2646 r2647 r2648 r2649 r2650 r2651 into r2652 as Stack;
    ternary r2620 r2626 r2578 into r2653;
    call pop r2600 into r2654 r2655;
    call push r2654 r2652 into r2656;
    add r2609 1u8 into r2657;
    ternary r2619 r2654 r2627 into r2658;
    ternary r2619 r2655.capacity r2635.capacity into r2659;
    ternary r2619 r2655.top r2635.top into r2660;
    ternary r2619 r2655.member_size r2635.member_size into r2661;
    ternary r2619 r2655.s00 r2635.s00 into r2662;
    ternary r2619 r2655.s01 r2635.s01 into r2663;
    ternary r2619 r2655.s02 r2635.s02 into r2664;
    ternary r2619 r2655.s03 r2635.s03 into r2665;
    cast r2659 r2660 r2661 r2662 r2663 r2664 r2665 into r2666 as Stack;
    ternary r2619 r2654 r2636 into r2667;
    ternary r2619 r2655.capacity r2600.capacity into r2668;
    ternary r2619 r2655.top r2600.top into r2669;
    ternary r2619 r2655.member_size r2600.member_size into r2670;
    ternary r2619 r2655.s00 r2600.s00 into r2671;
    ternary r2619 r2655.s01 r2600.s01 into r2672;
    ternary r2619 r2655.s02 r2600.s02 into r2673;
    ternary r2619 r2655.s03 r2600.s03 into r2674;
    cast r2668 r2669 r2670 r2671 r2672 r2673 r2674 into r2675 as Stack;
    ternary r2619 r2656.capacity r2652.capacity into r2676;
    ternary r2619 r2656.top r2652.top into r2677;
    ternary r2619 r2656.member_size r2652.member_size into r2678;
    ternary r2619 r2656.s00 r2652.s00 into r2679;
    ternary r2619 r2656.s01 r2652.s01 into r2680;
    ternary r2619 r2656.s02 r2652.s02 into r2681;
    ternary r2619 r2656.s03 r2652.s03 into r2682;
    cast r2676 r2677 r2678 r2679 r2680 r2681 r2682 into r2683 as Stack;
    ternary r2619 r2657 r2609 into r2684;
    lt 35i8 r0 into r2685;
    sub 35i8 r0 into r2686;
    rem r2686 2i8 into r2687;
    is.eq r2687 0i8 into r2688;
    lte r2684 25u8 into r2689;
    ternary r2689 true false into r2690;
    ternary r2689 false true into r2691;
    ternary r2688 true r2691 into r2692;
    ternary r2688 false r2690 into r2693;
    ternary r2685 true r2693 into r2694;
    ternary r2685 false r2692 into r2695;
    or r2695 r2694 into r2696;
    assert.eq r2696 true;
    call init_stack 8u8 into r2697;
    call pop r2644 into r2698 r2699;
    call push r2698 r2683 into r2700;
    add r2653 1u8 into r2701;
    ternary r2695 r2698 0u128 into r2702;
    ternary r2695 r2699.capacity r2697.capacity into r2703;
    ternary r2695 r2699.top r2697.top into r2704;
    ternary r2695 r2699.member_size r2697.member_size into r2705;
    ternary r2695 r2699.s00 r2697.s00 into r2706;
    ternary r2695 r2699.s01 r2697.s01 into r2707;
    ternary r2695 r2699.s02 r2697.s02 into r2708;
    ternary r2695 r2699.s03 r2697.s03 into r2709;
    cast r2703 r2704 r2705 r2706 r2707 r2708 r2709 into r2710 as Stack;
    ternary r2695 r2698 0u128 into r2711;
    ternary r2695 r2699.capacity r2644.capacity into r2712;
    ternary r2695 r2699.top r2644.top into r2713;
    ternary r2695 r2699.member_size r2644.member_size into r2714;
    ternary r2695 r2699.s00 r2644.s00 into r2715;
    ternary r2695 r2699.s01 r2644.s01 into r2716;
    ternary r2695 r2699.s02 r2644.s02 into r2717;
    ternary r2695 r2699.s03 r2644.s03 into r2718;
    cast r2712 r2713 r2714 r2715 r2716 r2717 r2718 into r2719 as Stack;
    ternary r2695 r2700.capacity r2683.capacity into r2720;
    ternary r2695 r2700.top r2683.top into r2721;
    ternary r2695 r2700.member_size r2683.member_size into r2722;
    ternary r2695 r2700.s00 r2683.s00 into r2723;
    ternary r2695 r2700.s01 r2683.s01 into r2724;
    ternary r2695 r2700.s02 r2683.s02 into r2725;
    ternary r2695 r2700.s03 r2683.s03 into r2726;
    cast r2720 r2721 r2722 r2723 r2724 r2725 r2726 into r2727 as Stack;
    ternary r2695 r2701 r2653 into r2728;
    call pop r2675 into r2729 r2730;
    call push r2729 r2727 into r2731;
    add r2684 1u8 into r2732;
    ternary r2694 r2729 r2702 into r2733;
    ternary r2694 r2730.capacity r2710.capacity into r2734;
    ternary r2694 r2730.top r2710.top into r2735;
    ternary r2694 r2730.member_size r2710.member_size into r2736;
    ternary r2694 r2730.s00 r2710.s00 into r2737;
    ternary r2694 r2730.s01 r2710.s01 into r2738;
    ternary r2694 r2730.s02 r2710.s02 into r2739;
    ternary r2694 r2730.s03 r2710.s03 into r2740;
    cast r2734 r2735 r2736 r2737 r2738 r2739 r2740 into r2741 as Stack;
    ternary r2694 r2729 r2711 into r2742;
    ternary r2694 r2730.capacity r2675.capacity into r2743;
    ternary r2694 r2730.top r2675.top into r2744;
    ternary r2694 r2730.member_size r2675.member_size into r2745;
    ternary r2694 r2730.s00 r2675.s00 into r2746;
    ternary r2694 r2730.s01 r2675.s01 into r2747;
    ternary r2694 r2730.s02 r2675.s02 into r2748;
    ternary r2694 r2730.s03 r2675.s03 into r2749;
    cast r2743 r2744 r2745 r2746 r2747 r2748 r2749 into r2750 as Stack;
    ternary r2694 r2731.capacity r2727.capacity into r2751;
    ternary r2694 r2731.top r2727.top into r2752;
    ternary r2694 r2731.member_size r2727.member_size into r2753;
    ternary r2694 r2731.s00 r2727.s00 into r2754;
    ternary r2694 r2731.s01 r2727.s01 into r2755;
    ternary r2694 r2731.s02 r2727.s02 into r2756;
    ternary r2694 r2731.s03 r2727.s03 into r2757;
    cast r2751 r2752 r2753 r2754 r2755 r2756 r2757 into r2758 as Stack;
    ternary r2694 r2732 r2684 into r2759;
    lt 36i8 r0 into r2760;
    sub 36i8 r0 into r2761;
    rem r2761 2i8 into r2762;
    is.eq r2762 0i8 into r2763;
    lte r2759 25u8 into r2764;
    ternary r2764 true false into r2765;
    ternary r2764 false true into r2766;
    ternary r2763 true r2766 into r2767;
    ternary r2763 false r2765 into r2768;
    ternary r2760 true r2768 into r2769;
    ternary r2760 false r2767 into r2770;
    or r2770 r2769 into r2771;
    assert.eq r2771 true;
    call init_stack 8u8 into r2772;
    call pop r2719 into r2773 r2774;
    call push r2773 r2758 into r2775;
    add r2728 1u8 into r2776;
    ternary r2770 r2773 0u128 into r2777;
    ternary r2770 r2774.capacity r2772.capacity into r2778;
    ternary r2770 r2774.top r2772.top into r2779;
    ternary r2770 r2774.member_size r2772.member_size into r2780;
    ternary r2770 r2774.s00 r2772.s00 into r2781;
    ternary r2770 r2774.s01 r2772.s01 into r2782;
    ternary r2770 r2774.s02 r2772.s02 into r2783;
    ternary r2770 r2774.s03 r2772.s03 into r2784;
    cast r2778 r2779 r2780 r2781 r2782 r2783 r2784 into r2785 as Stack;
    ternary r2770 r2773 0u128 into r2786;
    ternary r2770 r2774.capacity r2719.capacity into r2787;
    ternary r2770 r2774.top r2719.top into r2788;
    ternary r2770 r2774.member_size r2719.member_size into r2789;
    ternary r2770 r2774.s00 r2719.s00 into r2790;
    ternary r2770 r2774.s01 r2719.s01 into r2791;
    ternary r2770 r2774.s02 r2719.s02 into r2792;
    ternary r2770 r2774.s03 r2719.s03 into r2793;
    cast r2787 r2788 r2789 r2790 r2791 r2792 r2793 into r2794 as Stack;
    ternary r2770 r2775.capacity r2758.capacity into r2795;
    ternary r2770 r2775.top r2758.top into r2796;
    ternary r2770 r2775.member_size r2758.member_size into r2797;
    ternary r2770 r2775.s00 r2758.s00 into r2798;
    ternary r2770 r2775.s01 r2758.s01 into r2799;
    ternary r2770 r2775.s02 r2758.s02 into r2800;
    ternary r2770 r2775.s03 r2758.s03 into r2801;
    cast r2795 r2796 r2797 r2798 r2799 r2800 r2801 into r2802 as Stack;
    ternary r2770 r2776 r2728 into r2803;
    call pop r2750 into r2804 r2805;
    call push r2804 r2802 into r2806;
    add r2759 1u8 into r2807;
    ternary r2769 r2804 r2777 into r2808;
    ternary r2769 r2805.capacity r2785.capacity into r2809;
    ternary r2769 r2805.top r2785.top into r2810;
    ternary r2769 r2805.member_size r2785.member_size into r2811;
    ternary r2769 r2805.s00 r2785.s00 into r2812;
    ternary r2769 r2805.s01 r2785.s01 into r2813;
    ternary r2769 r2805.s02 r2785.s02 into r2814;
    ternary r2769 r2805.s03 r2785.s03 into r2815;
    cast r2809 r2810 r2811 r2812 r2813 r2814 r2815 into r2816 as Stack;
    ternary r2769 r2804 r2786 into r2817;
    ternary r2769 r2805.capacity r2750.capacity into r2818;
    ternary r2769 r2805.top r2750.top into r2819;
    ternary r2769 r2805.member_size r2750.member_size into r2820;
    ternary r2769 r2805.s00 r2750.s00 into r2821;
    ternary r2769 r2805.s01 r2750.s01 into r2822;
    ternary r2769 r2805.s02 r2750.s02 into r2823;
    ternary r2769 r2805.s03 r2750.s03 into r2824;
    cast r2818 r2819 r2820 r2821 r2822 r2823 r2824 into r2825 as Stack;
    ternary r2769 r2806.capacity r2802.capacity into r2826;
    ternary r2769 r2806.top r2802.top into r2827;
    ternary r2769 r2806.member_size r2802.member_size into r2828;
    ternary r2769 r2806.s00 r2802.s00 into r2829;
    ternary r2769 r2806.s01 r2802.s01 into r2830;
    ternary r2769 r2806.s02 r2802.s02 into r2831;
    ternary r2769 r2806.s03 r2802.s03 into r2832;
    cast r2826 r2827 r2828 r2829 r2830 r2831 r2832 into r2833 as Stack;
    ternary r2769 r2807 r2759 into r2834;
    lt 37i8 r0 into r2835;
    sub 37i8 r0 into r2836;
    rem r2836 2i8 into r2837;
    is.eq r2837 0i8 into r2838;
    lte r2834 25u8 into r2839;
    ternary r2839 true false into r2840;
    ternary r2839 false true into r2841;
    ternary r2838 true r2841 into r2842;
    ternary r2838 false r2840 into r2843;
    ternary r2835 true r2843 into r2844;
    ternary r2835 false r2842 into r2845;
    or r2845 r2844 into r2846;
    assert.eq r2846 true;
    call init_stack 8u8 into r2847;
    call pop r2794 into r2848 r2849;
    call push r2848 r2833 into r2850;
    add r2803 1u8 into r2851;
    ternary r2845 r2848 0u128 into r2852;
    ternary r2845 r2849.capacity r2847.capacity into r2853;
    ternary r2845 r2849.top r2847.top into r2854;
    ternary r2845 r2849.member_size r2847.member_size into r2855;
    ternary r2845 r2849.s00 r2847.s00 into r2856;
    ternary r2845 r2849.s01 r2847.s01 into r2857;
    ternary r2845 r2849.s02 r2847.s02 into r2858;
    ternary r2845 r2849.s03 r2847.s03 into r2859;
    cast r2853 r2854 r2855 r2856 r2857 r2858 r2859 into r2860 as Stack;
    ternary r2845 r2848 0u128 into r2861;
    ternary r2845 r2849.capacity r2794.capacity into r2862;
    ternary r2845 r2849.top r2794.top into r2863;
    ternary r2845 r2849.member_size r2794.member_size into r2864;
    ternary r2845 r2849.s00 r2794.s00 into r2865;
    ternary r2845 r2849.s01 r2794.s01 into r2866;
    ternary r2845 r2849.s02 r2794.s02 into r2867;
    ternary r2845 r2849.s03 r2794.s03 into r2868;
    cast r2862 r2863 r2864 r2865 r2866 r2867 r2868 into r2869 as Stack;
    ternary r2845 r2850.capacity r2833.capacity into r2870;
    ternary r2845 r2850.top r2833.top into r2871;
    ternary r2845 r2850.member_size r2833.member_size into r2872;
    ternary r2845 r2850.s00 r2833.s00 into r2873;
    ternary r2845 r2850.s01 r2833.s01 into r2874;
    ternary r2845 r2850.s02 r2833.s02 into r2875;
    ternary r2845 r2850.s03 r2833.s03 into r2876;
    cast r2870 r2871 r2872 r2873 r2874 r2875 r2876 into r2877 as Stack;
    ternary r2845 r2851 r2803 into r2878;
    call pop r2825 into r2879 r2880;
    call push r2879 r2877 into r2881;
    add r2834 1u8 into r2882;
    ternary r2844 r2879 r2852 into r2883;
    ternary r2844 r2880.capacity r2860.capacity into r2884;
    ternary r2844 r2880.top r2860.top into r2885;
    ternary r2844 r2880.member_size r2860.member_size into r2886;
    ternary r2844 r2880.s00 r2860.s00 into r2887;
    ternary r2844 r2880.s01 r2860.s01 into r2888;
    ternary r2844 r2880.s02 r2860.s02 into r2889;
    ternary r2844 r2880.s03 r2860.s03 into r2890;
    cast r2884 r2885 r2886 r2887 r2888 r2889 r2890 into r2891 as Stack;
    ternary r2844 r2879 r2861 into r2892;
    ternary r2844 r2880.capacity r2825.capacity into r2893;
    ternary r2844 r2880.top r2825.top into r2894;
    ternary r2844 r2880.member_size r2825.member_size into r2895;
    ternary r2844 r2880.s00 r2825.s00 into r2896;
    ternary r2844 r2880.s01 r2825.s01 into r2897;
    ternary r2844 r2880.s02 r2825.s02 into r2898;
    ternary r2844 r2880.s03 r2825.s03 into r2899;
    cast r2893 r2894 r2895 r2896 r2897 r2898 r2899 into r2900 as Stack;
    ternary r2844 r2881.capacity r2877.capacity into r2901;
    ternary r2844 r2881.top r2877.top into r2902;
    ternary r2844 r2881.member_size r2877.member_size into r2903;
    ternary r2844 r2881.s00 r2877.s00 into r2904;
    ternary r2844 r2881.s01 r2877.s01 into r2905;
    ternary r2844 r2881.s02 r2877.s02 into r2906;
    ternary r2844 r2881.s03 r2877.s03 into r2907;
    cast r2901 r2902 r2903 r2904 r2905 r2906 r2907 into r2908 as Stack;
    ternary r2844 r2882 r2834 into r2909;
    lt 38i8 r0 into r2910;
    sub 38i8 r0 into r2911;
    rem r2911 2i8 into r2912;
    is.eq r2912 0i8 into r2913;
    lte r2909 25u8 into r2914;
    ternary r2914 true false into r2915;
    ternary r2914 false true into r2916;
    ternary r2913 true r2916 into r2917;
    ternary r2913 false r2915 into r2918;
    ternary r2910 true r2918 into r2919;
    ternary r2910 false r2917 into r2920;
    or r2920 r2919 into r2921;
    assert.eq r2921 true;
    call init_stack 8u8 into r2922;
    call pop r2869 into r2923 r2924;
    call push r2923 r2908 into r2925;
    add r2878 1u8 into r2926;
    ternary r2920 r2923 0u128 into r2927;
    ternary r2920 r2924.capacity r2922.capacity into r2928;
    ternary r2920 r2924.top r2922.top into r2929;
    ternary r2920 r2924.member_size r2922.member_size into r2930;
    ternary r2920 r2924.s00 r2922.s00 into r2931;
    ternary r2920 r2924.s01 r2922.s01 into r2932;
    ternary r2920 r2924.s02 r2922.s02 into r2933;
    ternary r2920 r2924.s03 r2922.s03 into r2934;
    cast r2928 r2929 r2930 r2931 r2932 r2933 r2934 into r2935 as Stack;
    ternary r2920 r2923 0u128 into r2936;
    ternary r2920 r2924.capacity r2869.capacity into r2937;
    ternary r2920 r2924.top r2869.top into r2938;
    ternary r2920 r2924.member_size r2869.member_size into r2939;
    ternary r2920 r2924.s00 r2869.s00 into r2940;
    ternary r2920 r2924.s01 r2869.s01 into r2941;
    ternary r2920 r2924.s02 r2869.s02 into r2942;
    ternary r2920 r2924.s03 r2869.s03 into r2943;
    cast r2937 r2938 r2939 r2940 r2941 r2942 r2943 into r2944 as Stack;
    ternary r2920 r2925.capacity r2908.capacity into r2945;
    ternary r2920 r2925.top r2908.top into r2946;
    ternary r2920 r2925.member_size r2908.member_size into r2947;
    ternary r2920 r2925.s00 r2908.s00 into r2948;
    ternary r2920 r2925.s01 r2908.s01 into r2949;
    ternary r2920 r2925.s02 r2908.s02 into r2950;
    ternary r2920 r2925.s03 r2908.s03 into r2951;
    cast r2945 r2946 r2947 r2948 r2949 r2950 r2951 into r2952 as Stack;
    ternary r2920 r2926 r2878 into r2953;
    call pop r2900 into r2954 r2955;
    call push r2954 r2952 into r2956;
    add r2909 1u8 into r2957;
    ternary r2919 r2954 r2927 into r2958;
    ternary r2919 r2955.capacity r2935.capacity into r2959;
    ternary r2919 r2955.top r2935.top into r2960;
    ternary r2919 r2955.member_size r2935.member_size into r2961;
    ternary r2919 r2955.s00 r2935.s00 into r2962;
    ternary r2919 r2955.s01 r2935.s01 into r2963;
    ternary r2919 r2955.s02 r2935.s02 into r2964;
    ternary r2919 r2955.s03 r2935.s03 into r2965;
    cast r2959 r2960 r2961 r2962 r2963 r2964 r2965 into r2966 as Stack;
    ternary r2919 r2954 r2936 into r2967;
    ternary r2919 r2955.capacity r2900.capacity into r2968;
    ternary r2919 r2955.top r2900.top into r2969;
    ternary r2919 r2955.member_size r2900.member_size into r2970;
    ternary r2919 r2955.s00 r2900.s00 into r2971;
    ternary r2919 r2955.s01 r2900.s01 into r2972;
    ternary r2919 r2955.s02 r2900.s02 into r2973;
    ternary r2919 r2955.s03 r2900.s03 into r2974;
    cast r2968 r2969 r2970 r2971 r2972 r2973 r2974 into r2975 as Stack;
    ternary r2919 r2956.capacity r2952.capacity into r2976;
    ternary r2919 r2956.top r2952.top into r2977;
    ternary r2919 r2956.member_size r2952.member_size into r2978;
    ternary r2919 r2956.s00 r2952.s00 into r2979;
    ternary r2919 r2956.s01 r2952.s01 into r2980;
    ternary r2919 r2956.s02 r2952.s02 into r2981;
    ternary r2919 r2956.s03 r2952.s03 into r2982;
    cast r2976 r2977 r2978 r2979 r2980 r2981 r2982 into r2983 as Stack;
    ternary r2919 r2957 r2909 into r2984;
    lt 39i8 r0 into r2985;
    sub 39i8 r0 into r2986;
    rem r2986 2i8 into r2987;
    is.eq r2987 0i8 into r2988;
    lte r2984 25u8 into r2989;
    ternary r2989 true false into r2990;
    ternary r2989 false true into r2991;
    ternary r2988 true r2991 into r2992;
    ternary r2988 false r2990 into r2993;
    ternary r2985 true r2993 into r2994;
    ternary r2985 false r2992 into r2995;
    or r2995 r2994 into r2996;
    assert.eq r2996 true;
    call init_stack 8u8 into r2997;
    call pop r2944 into r2998 r2999;
    call push r2998 r2983 into r3000;
    add r2953 1u8 into r3001;
    ternary r2995 r2998 0u128 into r3002;
    ternary r2995 r2999.capacity r2997.capacity into r3003;
    ternary r2995 r2999.top r2997.top into r3004;
    ternary r2995 r2999.member_size r2997.member_size into r3005;
    ternary r2995 r2999.s00 r2997.s00 into r3006;
    ternary r2995 r2999.s01 r2997.s01 into r3007;
    ternary r2995 r2999.s02 r2997.s02 into r3008;
    ternary r2995 r2999.s03 r2997.s03 into r3009;
    cast r3003 r3004 r3005 r3006 r3007 r3008 r3009 into r3010 as Stack;
    ternary r2995 r2998 0u128 into r3011;
    ternary r2995 r2999.capacity r2944.capacity into r3012;
    ternary r2995 r2999.top r2944.top into r3013;
    ternary r2995 r2999.member_size r2944.member_size into r3014;
    ternary r2995 r2999.s00 r2944.s00 into r3015;
    ternary r2995 r2999.s01 r2944.s01 into r3016;
    ternary r2995 r2999.s02 r2944.s02 into r3017;
    ternary r2995 r2999.s03 r2944.s03 into r3018;
    cast r3012 r3013 r3014 r3015 r3016 r3017 r3018 into r3019 as Stack;
    ternary r2995 r3000.capacity r2983.capacity into r3020;
    ternary r2995 r3000.top r2983.top into r3021;
    ternary r2995 r3000.member_size r2983.member_size into r3022;
    ternary r2995 r3000.s00 r2983.s00 into r3023;
    ternary r2995 r3000.s01 r2983.s01 into r3024;
    ternary r2995 r3000.s02 r2983.s02 into r3025;
    ternary r2995 r3000.s03 r2983.s03 into r3026;
    cast r3020 r3021 r3022 r3023 r3024 r3025 r3026 into r3027 as Stack;
    ternary r2995 r3001 r2953 into r3028;
    call pop r2975 into r3029 r3030;
    call push r3029 r3027 into r3031;
    add r2984 1u8 into r3032;
    ternary r2994 r3029 r3002 into r3033;
    ternary r2994 r3030.capacity r3010.capacity into r3034;
    ternary r2994 r3030.top r3010.top into r3035;
    ternary r2994 r3030.member_size r3010.member_size into r3036;
    ternary r2994 r3030.s00 r3010.s00 into r3037;
    ternary r2994 r3030.s01 r3010.s01 into r3038;
    ternary r2994 r3030.s02 r3010.s02 into r3039;
    ternary r2994 r3030.s03 r3010.s03 into r3040;
    cast r3034 r3035 r3036 r3037 r3038 r3039 r3040 into r3041 as Stack;
    ternary r2994 r3029 r3011 into r3042;
    ternary r2994 r3030.capacity r2975.capacity into r3043;
    ternary r2994 r3030.top r2975.top into r3044;
    ternary r2994 r3030.member_size r2975.member_size into r3045;
    ternary r2994 r3030.s00 r2975.s00 into r3046;
    ternary r2994 r3030.s01 r2975.s01 into r3047;
    ternary r2994 r3030.s02 r2975.s02 into r3048;
    ternary r2994 r3030.s03 r2975.s03 into r3049;
    cast r3043 r3044 r3045 r3046 r3047 r3048 r3049 into r3050 as Stack;
    ternary r2994 r3031.capacity r3027.capacity into r3051;
    ternary r2994 r3031.top r3027.top into r3052;
    ternary r2994 r3031.member_size r3027.member_size into r3053;
    ternary r2994 r3031.s00 r3027.s00 into r3054;
    ternary r2994 r3031.s01 r3027.s01 into r3055;
    ternary r2994 r3031.s02 r3027.s02 into r3056;
    ternary r2994 r3031.s03 r3027.s03 into r3057;
    cast r3051 r3052 r3053 r3054 r3055 r3056 r3057 into r3058 as Stack;
    ternary r2994 r3032 r2984 into r3059;
    lt 40i8 r0 into r3060;
    sub 40i8 r0 into r3061;
    rem r3061 2i8 into r3062;
    is.eq r3062 0i8 into r3063;
    lte r3059 25u8 into r3064;
    ternary r3064 true false into r3065;
    ternary r3064 false true into r3066;
    ternary r3063 true r3066 into r3067;
    ternary r3063 false r3065 into r3068;
    ternary r3060 true r3068 into r3069;
    ternary r3060 false r3067 into r3070;
    or r3070 r3069 into r3071;
    assert.eq r3071 true;
    call init_stack 8u8 into r3072;
    call pop r3019 into r3073 r3074;
    call push r3073 r3058 into r3075;
    add r3028 1u8 into r3076;
    ternary r3070 r3073 0u128 into r3077;
    ternary r3070 r3074.capacity r3072.capacity into r3078;
    ternary r3070 r3074.top r3072.top into r3079;
    ternary r3070 r3074.member_size r3072.member_size into r3080;
    ternary r3070 r3074.s00 r3072.s00 into r3081;
    ternary r3070 r3074.s01 r3072.s01 into r3082;
    ternary r3070 r3074.s02 r3072.s02 into r3083;
    ternary r3070 r3074.s03 r3072.s03 into r3084;
    cast r3078 r3079 r3080 r3081 r3082 r3083 r3084 into r3085 as Stack;
    ternary r3070 r3073 0u128 into r3086;
    ternary r3070 r3074.capacity r3019.capacity into r3087;
    ternary r3070 r3074.top r3019.top into r3088;
    ternary r3070 r3074.member_size r3019.member_size into r3089;
    ternary r3070 r3074.s00 r3019.s00 into r3090;
    ternary r3070 r3074.s01 r3019.s01 into r3091;
    ternary r3070 r3074.s02 r3019.s02 into r3092;
    ternary r3070 r3074.s03 r3019.s03 into r3093;
    cast r3087 r3088 r3089 r3090 r3091 r3092 r3093 into r3094 as Stack;
    ternary r3070 r3075.capacity r3058.capacity into r3095;
    ternary r3070 r3075.top r3058.top into r3096;
    ternary r3070 r3075.member_size r3058.member_size into r3097;
    ternary r3070 r3075.s00 r3058.s00 into r3098;
    ternary r3070 r3075.s01 r3058.s01 into r3099;
    ternary r3070 r3075.s02 r3058.s02 into r3100;
    ternary r3070 r3075.s03 r3058.s03 into r3101;
    cast r3095 r3096 r3097 r3098 r3099 r3100 r3101 into r3102 as Stack;
    ternary r3070 r3076 r3028 into r3103;
    call pop r3050 into r3104 r3105;
    call push r3104 r3102 into r3106;
    add r3059 1u8 into r3107;
    ternary r3069 r3104 r3077 into r3108;
    ternary r3069 r3105.capacity r3085.capacity into r3109;
    ternary r3069 r3105.top r3085.top into r3110;
    ternary r3069 r3105.member_size r3085.member_size into r3111;
    ternary r3069 r3105.s00 r3085.s00 into r3112;
    ternary r3069 r3105.s01 r3085.s01 into r3113;
    ternary r3069 r3105.s02 r3085.s02 into r3114;
    ternary r3069 r3105.s03 r3085.s03 into r3115;
    cast r3109 r3110 r3111 r3112 r3113 r3114 r3115 into r3116 as Stack;
    ternary r3069 r3104 r3086 into r3117;
    ternary r3069 r3105.capacity r3050.capacity into r3118;
    ternary r3069 r3105.top r3050.top into r3119;
    ternary r3069 r3105.member_size r3050.member_size into r3120;
    ternary r3069 r3105.s00 r3050.s00 into r3121;
    ternary r3069 r3105.s01 r3050.s01 into r3122;
    ternary r3069 r3105.s02 r3050.s02 into r3123;
    ternary r3069 r3105.s03 r3050.s03 into r3124;
    cast r3118 r3119 r3120 r3121 r3122 r3123 r3124 into r3125 as Stack;
    ternary r3069 r3106.capacity r3102.capacity into r3126;
    ternary r3069 r3106.top r3102.top into r3127;
    ternary r3069 r3106.member_size r3102.member_size into r3128;
    ternary r3069 r3106.s00 r3102.s00 into r3129;
    ternary r3069 r3106.s01 r3102.s01 into r3130;
    ternary r3069 r3106.s02 r3102.s02 into r3131;
    ternary r3069 r3106.s03 r3102.s03 into r3132;
    cast r3126 r3127 r3128 r3129 r3130 r3131 r3132 into r3133 as Stack;
    ternary r3069 r3107 r3059 into r3134;
    lt 41i8 r0 into r3135;
    sub 41i8 r0 into r3136;
    rem r3136 2i8 into r3137;
    is.eq r3137 0i8 into r3138;
    lte r3134 25u8 into r3139;
    ternary r3139 true false into r3140;
    ternary r3139 false true into r3141;
    ternary r3138 true r3141 into r3142;
    ternary r3138 false r3140 into r3143;
    ternary r3135 true r3143 into r3144;
    ternary r3135 false r3142 into r3145;
    or r3145 r3144 into r3146;
    assert.eq r3146 true;
    call init_stack 8u8 into r3147;
    call pop r3094 into r3148 r3149;
    call push r3148 r3133 into r3150;
    add r3103 1u8 into r3151;
    ternary r3145 r3148 0u128 into r3152;
    ternary r3145 r3149.capacity r3147.capacity into r3153;
    ternary r3145 r3149.top r3147.top into r3154;
    ternary r3145 r3149.member_size r3147.member_size into r3155;
    ternary r3145 r3149.s00 r3147.s00 into r3156;
    ternary r3145 r3149.s01 r3147.s01 into r3157;
    ternary r3145 r3149.s02 r3147.s02 into r3158;
    ternary r3145 r3149.s03 r3147.s03 into r3159;
    cast r3153 r3154 r3155 r3156 r3157 r3158 r3159 into r3160 as Stack;
    ternary r3145 r3148 0u128 into r3161;
    ternary r3145 r3149.capacity r3094.capacity into r3162;
    ternary r3145 r3149.top r3094.top into r3163;
    ternary r3145 r3149.member_size r3094.member_size into r3164;
    ternary r3145 r3149.s00 r3094.s00 into r3165;
    ternary r3145 r3149.s01 r3094.s01 into r3166;
    ternary r3145 r3149.s02 r3094.s02 into r3167;
    ternary r3145 r3149.s03 r3094.s03 into r3168;
    cast r3162 r3163 r3164 r3165 r3166 r3167 r3168 into r3169 as Stack;
    ternary r3145 r3150.capacity r3133.capacity into r3170;
    ternary r3145 r3150.top r3133.top into r3171;
    ternary r3145 r3150.member_size r3133.member_size into r3172;
    ternary r3145 r3150.s00 r3133.s00 into r3173;
    ternary r3145 r3150.s01 r3133.s01 into r3174;
    ternary r3145 r3150.s02 r3133.s02 into r3175;
    ternary r3145 r3150.s03 r3133.s03 into r3176;
    cast r3170 r3171 r3172 r3173 r3174 r3175 r3176 into r3177 as Stack;
    ternary r3145 r3151 r3103 into r3178;
    call pop r3125 into r3179 r3180;
    call push r3179 r3177 into r3181;
    add r3134 1u8 into r3182;
    ternary r3144 r3179 r3152 into r3183;
    ternary r3144 r3180.capacity r3160.capacity into r3184;
    ternary r3144 r3180.top r3160.top into r3185;
    ternary r3144 r3180.member_size r3160.member_size into r3186;
    ternary r3144 r3180.s00 r3160.s00 into r3187;
    ternary r3144 r3180.s01 r3160.s01 into r3188;
    ternary r3144 r3180.s02 r3160.s02 into r3189;
    ternary r3144 r3180.s03 r3160.s03 into r3190;
    cast r3184 r3185 r3186 r3187 r3188 r3189 r3190 into r3191 as Stack;
    ternary r3144 r3179 r3161 into r3192;
    ternary r3144 r3180.capacity r3125.capacity into r3193;
    ternary r3144 r3180.top r3125.top into r3194;
    ternary r3144 r3180.member_size r3125.member_size into r3195;
    ternary r3144 r3180.s00 r3125.s00 into r3196;
    ternary r3144 r3180.s01 r3125.s01 into r3197;
    ternary r3144 r3180.s02 r3125.s02 into r3198;
    ternary r3144 r3180.s03 r3125.s03 into r3199;
    cast r3193 r3194 r3195 r3196 r3197 r3198 r3199 into r3200 as Stack;
    ternary r3144 r3181.capacity r3177.capacity into r3201;
    ternary r3144 r3181.top r3177.top into r3202;
    ternary r3144 r3181.member_size r3177.member_size into r3203;
    ternary r3144 r3181.s00 r3177.s00 into r3204;
    ternary r3144 r3181.s01 r3177.s01 into r3205;
    ternary r3144 r3181.s02 r3177.s02 into r3206;
    ternary r3144 r3181.s03 r3177.s03 into r3207;
    cast r3201 r3202 r3203 r3204 r3205 r3206 r3207 into r3208 as Stack;
    ternary r3144 r3182 r3134 into r3209;
    lt 42i8 r0 into r3210;
    sub 42i8 r0 into r3211;
    rem r3211 2i8 into r3212;
    is.eq r3212 0i8 into r3213;
    lte r3209 25u8 into r3214;
    ternary r3214 true false into r3215;
    ternary r3214 false true into r3216;
    ternary r3213 true r3216 into r3217;
    ternary r3213 false r3215 into r3218;
    ternary r3210 true r3218 into r3219;
    ternary r3210 false r3217 into r3220;
    or r3220 r3219 into r3221;
    assert.eq r3221 true;
    call init_stack 8u8 into r3222;
    call pop r3169 into r3223 r3224;
    call push r3223 r3208 into r3225;
    add r3178 1u8 into r3226;
    ternary r3220 r3223 0u128 into r3227;
    ternary r3220 r3224.capacity r3222.capacity into r3228;
    ternary r3220 r3224.top r3222.top into r3229;
    ternary r3220 r3224.member_size r3222.member_size into r3230;
    ternary r3220 r3224.s00 r3222.s00 into r3231;
    ternary r3220 r3224.s01 r3222.s01 into r3232;
    ternary r3220 r3224.s02 r3222.s02 into r3233;
    ternary r3220 r3224.s03 r3222.s03 into r3234;
    cast r3228 r3229 r3230 r3231 r3232 r3233 r3234 into r3235 as Stack;
    ternary r3220 r3223 0u128 into r3236;
    ternary r3220 r3224.capacity r3169.capacity into r3237;
    ternary r3220 r3224.top r3169.top into r3238;
    ternary r3220 r3224.member_size r3169.member_size into r3239;
    ternary r3220 r3224.s00 r3169.s00 into r3240;
    ternary r3220 r3224.s01 r3169.s01 into r3241;
    ternary r3220 r3224.s02 r3169.s02 into r3242;
    ternary r3220 r3224.s03 r3169.s03 into r3243;
    cast r3237 r3238 r3239 r3240 r3241 r3242 r3243 into r3244 as Stack;
    ternary r3220 r3225.capacity r3208.capacity into r3245;
    ternary r3220 r3225.top r3208.top into r3246;
    ternary r3220 r3225.member_size r3208.member_size into r3247;
    ternary r3220 r3225.s00 r3208.s00 into r3248;
    ternary r3220 r3225.s01 r3208.s01 into r3249;
    ternary r3220 r3225.s02 r3208.s02 into r3250;
    ternary r3220 r3225.s03 r3208.s03 into r3251;
    cast r3245 r3246 r3247 r3248 r3249 r3250 r3251 into r3252 as Stack;
    ternary r3220 r3226 r3178 into r3253;
    call pop r3200 into r3254 r3255;
    call push r3254 r3252 into r3256;
    add r3209 1u8 into r3257;
    ternary r3219 r3254 r3227 into r3258;
    ternary r3219 r3255.capacity r3235.capacity into r3259;
    ternary r3219 r3255.top r3235.top into r3260;
    ternary r3219 r3255.member_size r3235.member_size into r3261;
    ternary r3219 r3255.s00 r3235.s00 into r3262;
    ternary r3219 r3255.s01 r3235.s01 into r3263;
    ternary r3219 r3255.s02 r3235.s02 into r3264;
    ternary r3219 r3255.s03 r3235.s03 into r3265;
    cast r3259 r3260 r3261 r3262 r3263 r3264 r3265 into r3266 as Stack;
    ternary r3219 r3254 r3236 into r3267;
    ternary r3219 r3255.capacity r3200.capacity into r3268;
    ternary r3219 r3255.top r3200.top into r3269;
    ternary r3219 r3255.member_size r3200.member_size into r3270;
    ternary r3219 r3255.s00 r3200.s00 into r3271;
    ternary r3219 r3255.s01 r3200.s01 into r3272;
    ternary r3219 r3255.s02 r3200.s02 into r3273;
    ternary r3219 r3255.s03 r3200.s03 into r3274;
    cast r3268 r3269 r3270 r3271 r3272 r3273 r3274 into r3275 as Stack;
    ternary r3219 r3256.capacity r3252.capacity into r3276;
    ternary r3219 r3256.top r3252.top into r3277;
    ternary r3219 r3256.member_size r3252.member_size into r3278;
    ternary r3219 r3256.s00 r3252.s00 into r3279;
    ternary r3219 r3256.s01 r3252.s01 into r3280;
    ternary r3219 r3256.s02 r3252.s02 into r3281;
    ternary r3219 r3256.s03 r3252.s03 into r3282;
    cast r3276 r3277 r3278 r3279 r3280 r3281 r3282 into r3283 as Stack;
    ternary r3219 r3257 r3209 into r3284;
    lt 43i8 r0 into r3285;
    sub 43i8 r0 into r3286;
    rem r3286 2i8 into r3287;
    is.eq r3287 0i8 into r3288;
    lte r3284 25u8 into r3289;
    ternary r3289 true false into r3290;
    ternary r3289 false true into r3291;
    ternary r3288 true r3291 into r3292;
    ternary r3288 false r3290 into r3293;
    ternary r3285 true r3293 into r3294;
    ternary r3285 false r3292 into r3295;
    or r3295 r3294 into r3296;
    assert.eq r3296 true;
    call init_stack 8u8 into r3297;
    call pop r3244 into r3298 r3299;
    call push r3298 r3283 into r3300;
    add r3253 1u8 into r3301;
    ternary r3295 r3298 0u128 into r3302;
    ternary r3295 r3299.capacity r3297.capacity into r3303;
    ternary r3295 r3299.top r3297.top into r3304;
    ternary r3295 r3299.member_size r3297.member_size into r3305;
    ternary r3295 r3299.s00 r3297.s00 into r3306;
    ternary r3295 r3299.s01 r3297.s01 into r3307;
    ternary r3295 r3299.s02 r3297.s02 into r3308;
    ternary r3295 r3299.s03 r3297.s03 into r3309;
    cast r3303 r3304 r3305 r3306 r3307 r3308 r3309 into r3310 as Stack;
    ternary r3295 r3298 0u128 into r3311;
    ternary r3295 r3299.capacity r3244.capacity into r3312;
    ternary r3295 r3299.top r3244.top into r3313;
    ternary r3295 r3299.member_size r3244.member_size into r3314;
    ternary r3295 r3299.s00 r3244.s00 into r3315;
    ternary r3295 r3299.s01 r3244.s01 into r3316;
    ternary r3295 r3299.s02 r3244.s02 into r3317;
    ternary r3295 r3299.s03 r3244.s03 into r3318;
    cast r3312 r3313 r3314 r3315 r3316 r3317 r3318 into r3319 as Stack;
    ternary r3295 r3300.capacity r3283.capacity into r3320;
    ternary r3295 r3300.top r3283.top into r3321;
    ternary r3295 r3300.member_size r3283.member_size into r3322;
    ternary r3295 r3300.s00 r3283.s00 into r3323;
    ternary r3295 r3300.s01 r3283.s01 into r3324;
    ternary r3295 r3300.s02 r3283.s02 into r3325;
    ternary r3295 r3300.s03 r3283.s03 into r3326;
    cast r3320 r3321 r3322 r3323 r3324 r3325 r3326 into r3327 as Stack;
    ternary r3295 r3301 r3253 into r3328;
    call pop r3275 into r3329 r3330;
    call push r3329 r3327 into r3331;
    add r3284 1u8 into r3332;
    ternary r3294 r3329 r3302 into r3333;
    ternary r3294 r3330.capacity r3310.capacity into r3334;
    ternary r3294 r3330.top r3310.top into r3335;
    ternary r3294 r3330.member_size r3310.member_size into r3336;
    ternary r3294 r3330.s00 r3310.s00 into r3337;
    ternary r3294 r3330.s01 r3310.s01 into r3338;
    ternary r3294 r3330.s02 r3310.s02 into r3339;
    ternary r3294 r3330.s03 r3310.s03 into r3340;
    cast r3334 r3335 r3336 r3337 r3338 r3339 r3340 into r3341 as Stack;
    ternary r3294 r3329 r3311 into r3342;
    ternary r3294 r3330.capacity r3275.capacity into r3343;
    ternary r3294 r3330.top r3275.top into r3344;
    ternary r3294 r3330.member_size r3275.member_size into r3345;
    ternary r3294 r3330.s00 r3275.s00 into r3346;
    ternary r3294 r3330.s01 r3275.s01 into r3347;
    ternary r3294 r3330.s02 r3275.s02 into r3348;
    ternary r3294 r3330.s03 r3275.s03 into r3349;
    cast r3343 r3344 r3345 r3346 r3347 r3348 r3349 into r3350 as Stack;
    ternary r3294 r3331.capacity r3327.capacity into r3351;
    ternary r3294 r3331.top r3327.top into r3352;
    ternary r3294 r3331.member_size r3327.member_size into r3353;
    ternary r3294 r3331.s00 r3327.s00 into r3354;
    ternary r3294 r3331.s01 r3327.s01 into r3355;
    ternary r3294 r3331.s02 r3327.s02 into r3356;
    ternary r3294 r3331.s03 r3327.s03 into r3357;
    cast r3351 r3352 r3353 r3354 r3355 r3356 r3357 into r3358 as Stack;
    ternary r3294 r3332 r3284 into r3359;
    lt 44i8 r0 into r3360;
    sub 44i8 r0 into r3361;
    rem r3361 2i8 into r3362;
    is.eq r3362 0i8 into r3363;
    lte r3359 25u8 into r3364;
    ternary r3364 true false into r3365;
    ternary r3364 false true into r3366;
    ternary r3363 true r3366 into r3367;
    ternary r3363 false r3365 into r3368;
    ternary r3360 true r3368 into r3369;
    ternary r3360 false r3367 into r3370;
    or r3370 r3369 into r3371;
    assert.eq r3371 true;
    call init_stack 8u8 into r3372;
    call pop r3319 into r3373 r3374;
    call push r3373 r3358 into r3375;
    add r3328 1u8 into r3376;
    ternary r3370 r3373 0u128 into r3377;
    ternary r3370 r3374.capacity r3372.capacity into r3378;
    ternary r3370 r3374.top r3372.top into r3379;
    ternary r3370 r3374.member_size r3372.member_size into r3380;
    ternary r3370 r3374.s00 r3372.s00 into r3381;
    ternary r3370 r3374.s01 r3372.s01 into r3382;
    ternary r3370 r3374.s02 r3372.s02 into r3383;
    ternary r3370 r3374.s03 r3372.s03 into r3384;
    cast r3378 r3379 r3380 r3381 r3382 r3383 r3384 into r3385 as Stack;
    ternary r3370 r3373 0u128 into r3386;
    ternary r3370 r3374.capacity r3319.capacity into r3387;
    ternary r3370 r3374.top r3319.top into r3388;
    ternary r3370 r3374.member_size r3319.member_size into r3389;
    ternary r3370 r3374.s00 r3319.s00 into r3390;
    ternary r3370 r3374.s01 r3319.s01 into r3391;
    ternary r3370 r3374.s02 r3319.s02 into r3392;
    ternary r3370 r3374.s03 r3319.s03 into r3393;
    cast r3387 r3388 r3389 r3390 r3391 r3392 r3393 into r3394 as Stack;
    ternary r3370 r3375.capacity r3358.capacity into r3395;
    ternary r3370 r3375.top r3358.top into r3396;
    ternary r3370 r3375.member_size r3358.member_size into r3397;
    ternary r3370 r3375.s00 r3358.s00 into r3398;
    ternary r3370 r3375.s01 r3358.s01 into r3399;
    ternary r3370 r3375.s02 r3358.s02 into r3400;
    ternary r3370 r3375.s03 r3358.s03 into r3401;
    cast r3395 r3396 r3397 r3398 r3399 r3400 r3401 into r3402 as Stack;
    ternary r3370 r3376 r3328 into r3403;
    call pop r3350 into r3404 r3405;
    call push r3404 r3402 into r3406;
    add r3359 1u8 into r3407;
    ternary r3369 r3404 r3377 into r3408;
    ternary r3369 r3405.capacity r3385.capacity into r3409;
    ternary r3369 r3405.top r3385.top into r3410;
    ternary r3369 r3405.member_size r3385.member_size into r3411;
    ternary r3369 r3405.s00 r3385.s00 into r3412;
    ternary r3369 r3405.s01 r3385.s01 into r3413;
    ternary r3369 r3405.s02 r3385.s02 into r3414;
    ternary r3369 r3405.s03 r3385.s03 into r3415;
    cast r3409 r3410 r3411 r3412 r3413 r3414 r3415 into r3416 as Stack;
    ternary r3369 r3404 r3386 into r3417;
    ternary r3369 r3405.capacity r3350.capacity into r3418;
    ternary r3369 r3405.top r3350.top into r3419;
    ternary r3369 r3405.member_size r3350.member_size into r3420;
    ternary r3369 r3405.s00 r3350.s00 into r3421;
    ternary r3369 r3405.s01 r3350.s01 into r3422;
    ternary r3369 r3405.s02 r3350.s02 into r3423;
    ternary r3369 r3405.s03 r3350.s03 into r3424;
    cast r3418 r3419 r3420 r3421 r3422 r3423 r3424 into r3425 as Stack;
    ternary r3369 r3406.capacity r3402.capacity into r3426;
    ternary r3369 r3406.top r3402.top into r3427;
    ternary r3369 r3406.member_size r3402.member_size into r3428;
    ternary r3369 r3406.s00 r3402.s00 into r3429;
    ternary r3369 r3406.s01 r3402.s01 into r3430;
    ternary r3369 r3406.s02 r3402.s02 into r3431;
    ternary r3369 r3406.s03 r3402.s03 into r3432;
    cast r3426 r3427 r3428 r3429 r3430 r3431 r3432 into r3433 as Stack;
    ternary r3369 r3407 r3359 into r3434;
    lt 45i8 r0 into r3435;
    sub 45i8 r0 into r3436;
    rem r3436 2i8 into r3437;
    is.eq r3437 0i8 into r3438;
    lte r3434 25u8 into r3439;
    ternary r3439 true false into r3440;
    ternary r3439 false true into r3441;
    ternary r3438 true r3441 into r3442;
    ternary r3438 false r3440 into r3443;
    ternary r3435 true r3443 into r3444;
    ternary r3435 false r3442 into r3445;
    or r3445 r3444 into r3446;
    assert.eq r3446 true;
    call init_stack 8u8 into r3447;
    call pop r3394 into r3448 r3449;
    call push r3448 r3433 into r3450;
    add r3403 1u8 into r3451;
    ternary r3445 r3448 0u128 into r3452;
    ternary r3445 r3449.capacity r3447.capacity into r3453;
    ternary r3445 r3449.top r3447.top into r3454;
    ternary r3445 r3449.member_size r3447.member_size into r3455;
    ternary r3445 r3449.s00 r3447.s00 into r3456;
    ternary r3445 r3449.s01 r3447.s01 into r3457;
    ternary r3445 r3449.s02 r3447.s02 into r3458;
    ternary r3445 r3449.s03 r3447.s03 into r3459;
    cast r3453 r3454 r3455 r3456 r3457 r3458 r3459 into r3460 as Stack;
    ternary r3445 r3448 0u128 into r3461;
    ternary r3445 r3449.capacity r3394.capacity into r3462;
    ternary r3445 r3449.top r3394.top into r3463;
    ternary r3445 r3449.member_size r3394.member_size into r3464;
    ternary r3445 r3449.s00 r3394.s00 into r3465;
    ternary r3445 r3449.s01 r3394.s01 into r3466;
    ternary r3445 r3449.s02 r3394.s02 into r3467;
    ternary r3445 r3449.s03 r3394.s03 into r3468;
    cast r3462 r3463 r3464 r3465 r3466 r3467 r3468 into r3469 as Stack;
    ternary r3445 r3450.capacity r3433.capacity into r3470;
    ternary r3445 r3450.top r3433.top into r3471;
    ternary r3445 r3450.member_size r3433.member_size into r3472;
    ternary r3445 r3450.s00 r3433.s00 into r3473;
    ternary r3445 r3450.s01 r3433.s01 into r3474;
    ternary r3445 r3450.s02 r3433.s02 into r3475;
    ternary r3445 r3450.s03 r3433.s03 into r3476;
    cast r3470 r3471 r3472 r3473 r3474 r3475 r3476 into r3477 as Stack;
    ternary r3445 r3451 r3403 into r3478;
    call pop r3425 into r3479 r3480;
    call push r3479 r3477 into r3481;
    add r3434 1u8 into r3482;
    ternary r3444 r3479 r3452 into r3483;
    ternary r3444 r3480.capacity r3460.capacity into r3484;
    ternary r3444 r3480.top r3460.top into r3485;
    ternary r3444 r3480.member_size r3460.member_size into r3486;
    ternary r3444 r3480.s00 r3460.s00 into r3487;
    ternary r3444 r3480.s01 r3460.s01 into r3488;
    ternary r3444 r3480.s02 r3460.s02 into r3489;
    ternary r3444 r3480.s03 r3460.s03 into r3490;
    cast r3484 r3485 r3486 r3487 r3488 r3489 r3490 into r3491 as Stack;
    ternary r3444 r3479 r3461 into r3492;
    ternary r3444 r3480.capacity r3425.capacity into r3493;
    ternary r3444 r3480.top r3425.top into r3494;
    ternary r3444 r3480.member_size r3425.member_size into r3495;
    ternary r3444 r3480.s00 r3425.s00 into r3496;
    ternary r3444 r3480.s01 r3425.s01 into r3497;
    ternary r3444 r3480.s02 r3425.s02 into r3498;
    ternary r3444 r3480.s03 r3425.s03 into r3499;
    cast r3493 r3494 r3495 r3496 r3497 r3498 r3499 into r3500 as Stack;
    ternary r3444 r3481.capacity r3477.capacity into r3501;
    ternary r3444 r3481.top r3477.top into r3502;
    ternary r3444 r3481.member_size r3477.member_size into r3503;
    ternary r3444 r3481.s00 r3477.s00 into r3504;
    ternary r3444 r3481.s01 r3477.s01 into r3505;
    ternary r3444 r3481.s02 r3477.s02 into r3506;
    ternary r3444 r3481.s03 r3477.s03 into r3507;
    cast r3501 r3502 r3503 r3504 r3505 r3506 r3507 into r3508 as Stack;
    ternary r3444 r3482 r3434 into r3509;
    lt 46i8 r0 into r3510;
    sub 46i8 r0 into r3511;
    rem r3511 2i8 into r3512;
    is.eq r3512 0i8 into r3513;
    lte r3509 25u8 into r3514;
    ternary r3514 true false into r3515;
    ternary r3514 false true into r3516;
    ternary r3513 true r3516 into r3517;
    ternary r3513 false r3515 into r3518;
    ternary r3510 true r3518 into r3519;
    ternary r3510 false r3517 into r3520;
    or r3520 r3519 into r3521;
    assert.eq r3521 true;
    call init_stack 8u8 into r3522;
    call pop r3469 into r3523 r3524;
    call push r3523 r3508 into r3525;
    add r3478 1u8 into r3526;
    ternary r3520 r3523 0u128 into r3527;
    ternary r3520 r3524.capacity r3522.capacity into r3528;
    ternary r3520 r3524.top r3522.top into r3529;
    ternary r3520 r3524.member_size r3522.member_size into r3530;
    ternary r3520 r3524.s00 r3522.s00 into r3531;
    ternary r3520 r3524.s01 r3522.s01 into r3532;
    ternary r3520 r3524.s02 r3522.s02 into r3533;
    ternary r3520 r3524.s03 r3522.s03 into r3534;
    cast r3528 r3529 r3530 r3531 r3532 r3533 r3534 into r3535 as Stack;
    ternary r3520 r3523 0u128 into r3536;
    ternary r3520 r3524.capacity r3469.capacity into r3537;
    ternary r3520 r3524.top r3469.top into r3538;
    ternary r3520 r3524.member_size r3469.member_size into r3539;
    ternary r3520 r3524.s00 r3469.s00 into r3540;
    ternary r3520 r3524.s01 r3469.s01 into r3541;
    ternary r3520 r3524.s02 r3469.s02 into r3542;
    ternary r3520 r3524.s03 r3469.s03 into r3543;
    cast r3537 r3538 r3539 r3540 r3541 r3542 r3543 into r3544 as Stack;
    ternary r3520 r3525.capacity r3508.capacity into r3545;
    ternary r3520 r3525.top r3508.top into r3546;
    ternary r3520 r3525.member_size r3508.member_size into r3547;
    ternary r3520 r3525.s00 r3508.s00 into r3548;
    ternary r3520 r3525.s01 r3508.s01 into r3549;
    ternary r3520 r3525.s02 r3508.s02 into r3550;
    ternary r3520 r3525.s03 r3508.s03 into r3551;
    cast r3545 r3546 r3547 r3548 r3549 r3550 r3551 into r3552 as Stack;
    ternary r3520 r3526 r3478 into r3553;
    call pop r3500 into r3554 r3555;
    call push r3554 r3552 into r3556;
    add r3509 1u8 into r3557;
    ternary r3519 r3554 r3527 into r3558;
    ternary r3519 r3555.capacity r3535.capacity into r3559;
    ternary r3519 r3555.top r3535.top into r3560;
    ternary r3519 r3555.member_size r3535.member_size into r3561;
    ternary r3519 r3555.s00 r3535.s00 into r3562;
    ternary r3519 r3555.s01 r3535.s01 into r3563;
    ternary r3519 r3555.s02 r3535.s02 into r3564;
    ternary r3519 r3555.s03 r3535.s03 into r3565;
    cast r3559 r3560 r3561 r3562 r3563 r3564 r3565 into r3566 as Stack;
    ternary r3519 r3554 r3536 into r3567;
    ternary r3519 r3555.capacity r3500.capacity into r3568;
    ternary r3519 r3555.top r3500.top into r3569;
    ternary r3519 r3555.member_size r3500.member_size into r3570;
    ternary r3519 r3555.s00 r3500.s00 into r3571;
    ternary r3519 r3555.s01 r3500.s01 into r3572;
    ternary r3519 r3555.s02 r3500.s02 into r3573;
    ternary r3519 r3555.s03 r3500.s03 into r3574;
    cast r3568 r3569 r3570 r3571 r3572 r3573 r3574 into r3575 as Stack;
    ternary r3519 r3556.capacity r3552.capacity into r3576;
    ternary r3519 r3556.top r3552.top into r3577;
    ternary r3519 r3556.member_size r3552.member_size into r3578;
    ternary r3519 r3556.s00 r3552.s00 into r3579;
    ternary r3519 r3556.s01 r3552.s01 into r3580;
    ternary r3519 r3556.s02 r3552.s02 into r3581;
    ternary r3519 r3556.s03 r3552.s03 into r3582;
    cast r3576 r3577 r3578 r3579 r3580 r3581 r3582 into r3583 as Stack;
    ternary r3519 r3557 r3509 into r3584;
    lt 47i8 r0 into r3585;
    sub 47i8 r0 into r3586;
    rem r3586 2i8 into r3587;
    is.eq r3587 0i8 into r3588;
    lte r3584 25u8 into r3589;
    ternary r3589 true false into r3590;
    ternary r3589 false true into r3591;
    ternary r3588 true r3591 into r3592;
    ternary r3588 false r3590 into r3593;
    ternary r3585 true r3593 into r3594;
    ternary r3585 false r3592 into r3595;
    or r3595 r3594 into r3596;
    assert.eq r3596 true;
    call init_stack 8u8 into r3597;
    call pop r3544 into r3598 r3599;
    call push r3598 r3583 into r3600;
    add r3553 1u8 into r3601;
    ternary r3595 r3598 0u128 into r3602;
    ternary r3595 r3599.capacity r3597.capacity into r3603;
    ternary r3595 r3599.top r3597.top into r3604;
    ternary r3595 r3599.member_size r3597.member_size into r3605;
    ternary r3595 r3599.s00 r3597.s00 into r3606;
    ternary r3595 r3599.s01 r3597.s01 into r3607;
    ternary r3595 r3599.s02 r3597.s02 into r3608;
    ternary r3595 r3599.s03 r3597.s03 into r3609;
    cast r3603 r3604 r3605 r3606 r3607 r3608 r3609 into r3610 as Stack;
    ternary r3595 r3598 0u128 into r3611;
    ternary r3595 r3599.capacity r3544.capacity into r3612;
    ternary r3595 r3599.top r3544.top into r3613;
    ternary r3595 r3599.member_size r3544.member_size into r3614;
    ternary r3595 r3599.s00 r3544.s00 into r3615;
    ternary r3595 r3599.s01 r3544.s01 into r3616;
    ternary r3595 r3599.s02 r3544.s02 into r3617;
    ternary r3595 r3599.s03 r3544.s03 into r3618;
    cast r3612 r3613 r3614 r3615 r3616 r3617 r3618 into r3619 as Stack;
    ternary r3595 r3600.capacity r3583.capacity into r3620;
    ternary r3595 r3600.top r3583.top into r3621;
    ternary r3595 r3600.member_size r3583.member_size into r3622;
    ternary r3595 r3600.s00 r3583.s00 into r3623;
    ternary r3595 r3600.s01 r3583.s01 into r3624;
    ternary r3595 r3600.s02 r3583.s02 into r3625;
    ternary r3595 r3600.s03 r3583.s03 into r3626;
    cast r3620 r3621 r3622 r3623 r3624 r3625 r3626 into r3627 as Stack;
    ternary r3595 r3601 r3553 into r3628;
    call pop r3575 into r3629 r3630;
    call push r3629 r3627 into r3631;
    add r3584 1u8 into r3632;
    ternary r3594 r3629 r3602 into r3633;
    ternary r3594 r3630.capacity r3610.capacity into r3634;
    ternary r3594 r3630.top r3610.top into r3635;
    ternary r3594 r3630.member_size r3610.member_size into r3636;
    ternary r3594 r3630.s00 r3610.s00 into r3637;
    ternary r3594 r3630.s01 r3610.s01 into r3638;
    ternary r3594 r3630.s02 r3610.s02 into r3639;
    ternary r3594 r3630.s03 r3610.s03 into r3640;
    cast r3634 r3635 r3636 r3637 r3638 r3639 r3640 into r3641 as Stack;
    ternary r3594 r3629 r3611 into r3642;
    ternary r3594 r3630.capacity r3575.capacity into r3643;
    ternary r3594 r3630.top r3575.top into r3644;
    ternary r3594 r3630.member_size r3575.member_size into r3645;
    ternary r3594 r3630.s00 r3575.s00 into r3646;
    ternary r3594 r3630.s01 r3575.s01 into r3647;
    ternary r3594 r3630.s02 r3575.s02 into r3648;
    ternary r3594 r3630.s03 r3575.s03 into r3649;
    cast r3643 r3644 r3645 r3646 r3647 r3648 r3649 into r3650 as Stack;
    ternary r3594 r3631.capacity r3627.capacity into r3651;
    ternary r3594 r3631.top r3627.top into r3652;
    ternary r3594 r3631.member_size r3627.member_size into r3653;
    ternary r3594 r3631.s00 r3627.s00 into r3654;
    ternary r3594 r3631.s01 r3627.s01 into r3655;
    ternary r3594 r3631.s02 r3627.s02 into r3656;
    ternary r3594 r3631.s03 r3627.s03 into r3657;
    cast r3651 r3652 r3653 r3654 r3655 r3656 r3657 into r3658 as Stack;
    ternary r3594 r3632 r3584 into r3659;
    lt 48i8 r0 into r3660;
    sub 48i8 r0 into r3661;
    rem r3661 2i8 into r3662;
    is.eq r3662 0i8 into r3663;
    lte r3659 25u8 into r3664;
    ternary r3664 true false into r3665;
    ternary r3664 false true into r3666;
    ternary r3663 true r3666 into r3667;
    ternary r3663 false r3665 into r3668;
    ternary r3660 true r3668 into r3669;
    ternary r3660 false r3667 into r3670;
    or r3670 r3669 into r3671;
    assert.eq r3671 true;
    call init_stack 8u8 into r3672;
    call pop r3619 into r3673 r3674;
    call push r3673 r3658 into r3675;
    add r3628 1u8 into r3676;
    ternary r3670 r3673 0u128 into r3677;
    ternary r3670 r3674.capacity r3672.capacity into r3678;
    ternary r3670 r3674.top r3672.top into r3679;
    ternary r3670 r3674.member_size r3672.member_size into r3680;
    ternary r3670 r3674.s00 r3672.s00 into r3681;
    ternary r3670 r3674.s01 r3672.s01 into r3682;
    ternary r3670 r3674.s02 r3672.s02 into r3683;
    ternary r3670 r3674.s03 r3672.s03 into r3684;
    cast r3678 r3679 r3680 r3681 r3682 r3683 r3684 into r3685 as Stack;
    ternary r3670 r3673 0u128 into r3686;
    ternary r3670 r3674.capacity r3619.capacity into r3687;
    ternary r3670 r3674.top r3619.top into r3688;
    ternary r3670 r3674.member_size r3619.member_size into r3689;
    ternary r3670 r3674.s00 r3619.s00 into r3690;
    ternary r3670 r3674.s01 r3619.s01 into r3691;
    ternary r3670 r3674.s02 r3619.s02 into r3692;
    ternary r3670 r3674.s03 r3619.s03 into r3693;
    cast r3687 r3688 r3689 r3690 r3691 r3692 r3693 into r3694 as Stack;
    ternary r3670 r3675.capacity r3658.capacity into r3695;
    ternary r3670 r3675.top r3658.top into r3696;
    ternary r3670 r3675.member_size r3658.member_size into r3697;
    ternary r3670 r3675.s00 r3658.s00 into r3698;
    ternary r3670 r3675.s01 r3658.s01 into r3699;
    ternary r3670 r3675.s02 r3658.s02 into r3700;
    ternary r3670 r3675.s03 r3658.s03 into r3701;
    cast r3695 r3696 r3697 r3698 r3699 r3700 r3701 into r3702 as Stack;
    ternary r3670 r3676 r3628 into r3703;
    call pop r3650 into r3704 r3705;
    call push r3704 r3702 into r3706;
    add r3659 1u8 into r3707;
    ternary r3669 r3704 r3677 into r3708;
    ternary r3669 r3705.capacity r3685.capacity into r3709;
    ternary r3669 r3705.top r3685.top into r3710;
    ternary r3669 r3705.member_size r3685.member_size into r3711;
    ternary r3669 r3705.s00 r3685.s00 into r3712;
    ternary r3669 r3705.s01 r3685.s01 into r3713;
    ternary r3669 r3705.s02 r3685.s02 into r3714;
    ternary r3669 r3705.s03 r3685.s03 into r3715;
    cast r3709 r3710 r3711 r3712 r3713 r3714 r3715 into r3716 as Stack;
    ternary r3669 r3704 r3686 into r3717;
    ternary r3669 r3705.capacity r3650.capacity into r3718;
    ternary r3669 r3705.top r3650.top into r3719;
    ternary r3669 r3705.member_size r3650.member_size into r3720;
    ternary r3669 r3705.s00 r3650.s00 into r3721;
    ternary r3669 r3705.s01 r3650.s01 into r3722;
    ternary r3669 r3705.s02 r3650.s02 into r3723;
    ternary r3669 r3705.s03 r3650.s03 into r3724;
    cast r3718 r3719 r3720 r3721 r3722 r3723 r3724 into r3725 as Stack;
    ternary r3669 r3706.capacity r3702.capacity into r3726;
    ternary r3669 r3706.top r3702.top into r3727;
    ternary r3669 r3706.member_size r3702.member_size into r3728;
    ternary r3669 r3706.s00 r3702.s00 into r3729;
    ternary r3669 r3706.s01 r3702.s01 into r3730;
    ternary r3669 r3706.s02 r3702.s02 into r3731;
    ternary r3669 r3706.s03 r3702.s03 into r3732;
    cast r3726 r3727 r3728 r3729 r3730 r3731 r3732 into r3733 as Stack;
    ternary r3669 r3707 r3659 into r3734;
    lt 49i8 r0 into r3735;
    sub 49i8 r0 into r3736;
    rem r3736 2i8 into r3737;
    is.eq r3737 0i8 into r3738;
    lte r3734 25u8 into r3739;
    ternary r3739 true false into r3740;
    ternary r3739 false true into r3741;
    ternary r3738 true r3741 into r3742;
    ternary r3738 false r3740 into r3743;
    ternary r3735 true r3743 into r3744;
    ternary r3735 false r3742 into r3745;
    or r3745 r3744 into r3746;
    assert.eq r3746 true;
    call init_stack 8u8 into r3747;
    call pop r3694 into r3748 r3749;
    call push r3748 r3733 into r3750;
    add r3703 1u8 into r3751;
    ternary r3745 r3748 0u128 into r3752;
    ternary r3745 r3749.capacity r3747.capacity into r3753;
    ternary r3745 r3749.top r3747.top into r3754;
    ternary r3745 r3749.member_size r3747.member_size into r3755;
    ternary r3745 r3749.s00 r3747.s00 into r3756;
    ternary r3745 r3749.s01 r3747.s01 into r3757;
    ternary r3745 r3749.s02 r3747.s02 into r3758;
    ternary r3745 r3749.s03 r3747.s03 into r3759;
    cast r3753 r3754 r3755 r3756 r3757 r3758 r3759 into r3760 as Stack;
    ternary r3745 r3748 0u128 into r3761;
    ternary r3745 r3749.capacity r3694.capacity into r3762;
    ternary r3745 r3749.top r3694.top into r3763;
    ternary r3745 r3749.member_size r3694.member_size into r3764;
    ternary r3745 r3749.s00 r3694.s00 into r3765;
    ternary r3745 r3749.s01 r3694.s01 into r3766;
    ternary r3745 r3749.s02 r3694.s02 into r3767;
    ternary r3745 r3749.s03 r3694.s03 into r3768;
    cast r3762 r3763 r3764 r3765 r3766 r3767 r3768 into r3769 as Stack;
    ternary r3745 r3750.capacity r3733.capacity into r3770;
    ternary r3745 r3750.top r3733.top into r3771;
    ternary r3745 r3750.member_size r3733.member_size into r3772;
    ternary r3745 r3750.s00 r3733.s00 into r3773;
    ternary r3745 r3750.s01 r3733.s01 into r3774;
    ternary r3745 r3750.s02 r3733.s02 into r3775;
    ternary r3745 r3750.s03 r3733.s03 into r3776;
    cast r3770 r3771 r3772 r3773 r3774 r3775 r3776 into r3777 as Stack;
    ternary r3745 r3751 r3703 into r3778;
    call pop r3725 into r3779 r3780;
    call push r3779 r3777 into r3781;
    add r3734 1u8 into r3782;
    ternary r3744 r3779 r3752 into r3783;
    ternary r3744 r3780.capacity r3760.capacity into r3784;
    ternary r3744 r3780.top r3760.top into r3785;
    ternary r3744 r3780.member_size r3760.member_size into r3786;
    ternary r3744 r3780.s00 r3760.s00 into r3787;
    ternary r3744 r3780.s01 r3760.s01 into r3788;
    ternary r3744 r3780.s02 r3760.s02 into r3789;
    ternary r3744 r3780.s03 r3760.s03 into r3790;
    cast r3784 r3785 r3786 r3787 r3788 r3789 r3790 into r3791 as Stack;
    ternary r3744 r3779 r3761 into r3792;
    ternary r3744 r3780.capacity r3725.capacity into r3793;
    ternary r3744 r3780.top r3725.top into r3794;
    ternary r3744 r3780.member_size r3725.member_size into r3795;
    ternary r3744 r3780.s00 r3725.s00 into r3796;
    ternary r3744 r3780.s01 r3725.s01 into r3797;
    ternary r3744 r3780.s02 r3725.s02 into r3798;
    ternary r3744 r3780.s03 r3725.s03 into r3799;
    cast r3793 r3794 r3795 r3796 r3797 r3798 r3799 into r3800 as Stack;
    ternary r3744 r3781.capacity r3777.capacity into r3801;
    ternary r3744 r3781.top r3777.top into r3802;
    ternary r3744 r3781.member_size r3777.member_size into r3803;
    ternary r3744 r3781.s00 r3777.s00 into r3804;
    ternary r3744 r3781.s01 r3777.s01 into r3805;
    ternary r3744 r3781.s02 r3777.s02 into r3806;
    ternary r3744 r3781.s03 r3777.s03 into r3807;
    cast r3801 r3802 r3803 r3804 r3805 r3806 r3807 into r3808 as Stack;
    ternary r3744 r3782 r3734 into r3809;
    lt 50i8 r0 into r3810;
    sub 50i8 r0 into r3811;
    rem r3811 2i8 into r3812;
    is.eq r3812 0i8 into r3813;
    lte r3809 25u8 into r3814;
    ternary r3814 true false into r3815;
    ternary r3814 false true into r3816;
    ternary r3813 true r3816 into r3817;
    ternary r3813 false r3815 into r3818;
    ternary r3810 true r3818 into r3819;
    ternary r3810 false r3817 into r3820;
    or r3820 r3819 into r3821;
    assert.eq r3821 true;
    call init_stack 8u8 into r3822;
    call pop r3769 into r3823 r3824;
    call push r3823 r3808 into r3825;
    add r3778 1u8 into r3826;
    ternary r3820 r3823 0u128 into r3827;
    ternary r3820 r3824.capacity r3822.capacity into r3828;
    ternary r3820 r3824.top r3822.top into r3829;
    ternary r3820 r3824.member_size r3822.member_size into r3830;
    ternary r3820 r3824.s00 r3822.s00 into r3831;
    ternary r3820 r3824.s01 r3822.s01 into r3832;
    ternary r3820 r3824.s02 r3822.s02 into r3833;
    ternary r3820 r3824.s03 r3822.s03 into r3834;
    cast r3828 r3829 r3830 r3831 r3832 r3833 r3834 into r3835 as Stack;
    ternary r3820 r3823 0u128 into r3836;
    ternary r3820 r3824.capacity r3769.capacity into r3837;
    ternary r3820 r3824.top r3769.top into r3838;
    ternary r3820 r3824.member_size r3769.member_size into r3839;
    ternary r3820 r3824.s00 r3769.s00 into r3840;
    ternary r3820 r3824.s01 r3769.s01 into r3841;
    ternary r3820 r3824.s02 r3769.s02 into r3842;
    ternary r3820 r3824.s03 r3769.s03 into r3843;
    cast r3837 r3838 r3839 r3840 r3841 r3842 r3843 into r3844 as Stack;
    ternary r3820 r3825.capacity r3808.capacity into r3845;
    ternary r3820 r3825.top r3808.top into r3846;
    ternary r3820 r3825.member_size r3808.member_size into r3847;
    ternary r3820 r3825.s00 r3808.s00 into r3848;
    ternary r3820 r3825.s01 r3808.s01 into r3849;
    ternary r3820 r3825.s02 r3808.s02 into r3850;
    ternary r3820 r3825.s03 r3808.s03 into r3851;
    cast r3845 r3846 r3847 r3848 r3849 r3850 r3851 into r3852 as Stack;
    ternary r3820 r3826 r3778 into r3853;
    call pop r3800 into r3854 r3855;
    call push r3854 r3852 into r3856;
    add r3809 1u8 into r3857;
    ternary r3819 r3854 r3827 into r3858;
    ternary r3819 r3855.capacity r3835.capacity into r3859;
    ternary r3819 r3855.top r3835.top into r3860;
    ternary r3819 r3855.member_size r3835.member_size into r3861;
    ternary r3819 r3855.s00 r3835.s00 into r3862;
    ternary r3819 r3855.s01 r3835.s01 into r3863;
    ternary r3819 r3855.s02 r3835.s02 into r3864;
    ternary r3819 r3855.s03 r3835.s03 into r3865;
    cast r3859 r3860 r3861 r3862 r3863 r3864 r3865 into r3866 as Stack;
    ternary r3819 r3854 r3836 into r3867;
    ternary r3819 r3855.capacity r3800.capacity into r3868;
    ternary r3819 r3855.top r3800.top into r3869;
    ternary r3819 r3855.member_size r3800.member_size into r3870;
    ternary r3819 r3855.s00 r3800.s00 into r3871;
    ternary r3819 r3855.s01 r3800.s01 into r3872;
    ternary r3819 r3855.s02 r3800.s02 into r3873;
    ternary r3819 r3855.s03 r3800.s03 into r3874;
    cast r3868 r3869 r3870 r3871 r3872 r3873 r3874 into r3875 as Stack;
    ternary r3819 r3856.capacity r3852.capacity into r3876;
    ternary r3819 r3856.top r3852.top into r3877;
    ternary r3819 r3856.member_size r3852.member_size into r3878;
    ternary r3819 r3856.s00 r3852.s00 into r3879;
    ternary r3819 r3856.s01 r3852.s01 into r3880;
    ternary r3819 r3856.s02 r3852.s02 into r3881;
    ternary r3819 r3856.s03 r3852.s03 into r3882;
    cast r3876 r3877 r3878 r3879 r3880 r3881 r3882 into r3883 as Stack;
    ternary r3819 r3857 r3809 into r3884;
    lt 51i8 r0 into r3885;
    sub 51i8 r0 into r3886;
    rem r3886 2i8 into r3887;
    is.eq r3887 0i8 into r3888;
    lte r3884 25u8 into r3889;
    ternary r3889 true false into r3890;
    ternary r3889 false true into r3891;
    ternary r3888 true r3891 into r3892;
    ternary r3888 false r3890 into r3893;
    ternary r3885 true r3893 into r3894;
    ternary r3885 false r3892 into r3895;
    or r3895 r3894 into r3896;
    assert.eq r3896 true;
    call init_stack 8u8 into r3897;
    call pop r3844 into r3898 r3899;
    call push r3898 r3883 into r3900;
    add r3853 1u8 into r3901;
    ternary r3895 r3898 0u128 into r3902;
    ternary r3895 r3899.capacity r3897.capacity into r3903;
    ternary r3895 r3899.top r3897.top into r3904;
    ternary r3895 r3899.member_size r3897.member_size into r3905;
    ternary r3895 r3899.s00 r3897.s00 into r3906;
    ternary r3895 r3899.s01 r3897.s01 into r3907;
    ternary r3895 r3899.s02 r3897.s02 into r3908;
    ternary r3895 r3899.s03 r3897.s03 into r3909;
    cast r3903 r3904 r3905 r3906 r3907 r3908 r3909 into r3910 as Stack;
    ternary r3895 r3898 0u128 into r3911;
    ternary r3895 r3899.capacity r3844.capacity into r3912;
    ternary r3895 r3899.top r3844.top into r3913;
    ternary r3895 r3899.member_size r3844.member_size into r3914;
    ternary r3895 r3899.s00 r3844.s00 into r3915;
    ternary r3895 r3899.s01 r3844.s01 into r3916;
    ternary r3895 r3899.s02 r3844.s02 into r3917;
    ternary r3895 r3899.s03 r3844.s03 into r3918;
    cast r3912 r3913 r3914 r3915 r3916 r3917 r3918 into r3919 as Stack;
    ternary r3895 r3900.capacity r3883.capacity into r3920;
    ternary r3895 r3900.top r3883.top into r3921;
    ternary r3895 r3900.member_size r3883.member_size into r3922;
    ternary r3895 r3900.s00 r3883.s00 into r3923;
    ternary r3895 r3900.s01 r3883.s01 into r3924;
    ternary r3895 r3900.s02 r3883.s02 into r3925;
    ternary r3895 r3900.s03 r3883.s03 into r3926;
    cast r3920 r3921 r3922 r3923 r3924 r3925 r3926 into r3927 as Stack;
    ternary r3895 r3901 r3853 into r3928;
    call pop r3875 into r3929 r3930;
    call push r3929 r3927 into r3931;
    add r3884 1u8 into r3932;
    ternary r3894 r3929 r3902 into r3933;
    ternary r3894 r3930.capacity r3910.capacity into r3934;
    ternary r3894 r3930.top r3910.top into r3935;
    ternary r3894 r3930.member_size r3910.member_size into r3936;
    ternary r3894 r3930.s00 r3910.s00 into r3937;
    ternary r3894 r3930.s01 r3910.s01 into r3938;
    ternary r3894 r3930.s02 r3910.s02 into r3939;
    ternary r3894 r3930.s03 r3910.s03 into r3940;
    cast r3934 r3935 r3936 r3937 r3938 r3939 r3940 into r3941 as Stack;
    ternary r3894 r3929 r3911 into r3942;
    ternary r3894 r3930.capacity r3875.capacity into r3943;
    ternary r3894 r3930.top r3875.top into r3944;
    ternary r3894 r3930.member_size r3875.member_size into r3945;
    ternary r3894 r3930.s00 r3875.s00 into r3946;
    ternary r3894 r3930.s01 r3875.s01 into r3947;
    ternary r3894 r3930.s02 r3875.s02 into r3948;
    ternary r3894 r3930.s03 r3875.s03 into r3949;
    cast r3943 r3944 r3945 r3946 r3947 r3948 r3949 into r3950 as Stack;
    ternary r3894 r3931.capacity r3927.capacity into r3951;
    ternary r3894 r3931.top r3927.top into r3952;
    ternary r3894 r3931.member_size r3927.member_size into r3953;
    ternary r3894 r3931.s00 r3927.s00 into r3954;
    ternary r3894 r3931.s01 r3927.s01 into r3955;
    ternary r3894 r3931.s02 r3927.s02 into r3956;
    ternary r3894 r3931.s03 r3927.s03 into r3957;
    cast r3951 r3952 r3953 r3954 r3955 r3956 r3957 into r3958 as Stack;
    ternary r3894 r3932 r3884 into r3959;
    call pop r3958 into r3960 r3961;
    call pop r3961 into r3962 r3963;
    call pop r3963 into r3964 r3965;
    call pop r3965 into r3966 r3967;
    call pop r3967 into r3968 r3969;
    call pop r3969 into r3970 r3971;
    call pop r3971 into r3972 r3973;
    call pop r3973 into r3974 r3975;
    call pop r3975 into r3976 r3977;
    call pop r3977 into r3978 r3979;
    call pop r3979 into r3980 r3981;
    call pop r3981 into r3982 r3983;
    call pop r3983 into r3984 r3985;
    call pop r3985 into r3986 r3987;
    call pop r3987 into r3988 r3989;
    call pop r3989 into r3990 r3991;
    call pop r3991 into r3992 r3993;
    call pop r3993 into r3994 r3995;
    call pop r3995 into r3996 r3997;
    call pop r3997 into r3998 r3999;
    call pop r3999 into r4000 r4001;
    call pop r4001 into r4002 r4003;
    call pop r4003 into r4004 r4005;
    call pop r4005 into r4006 r4007;
    call pop r4007 into r4008 r4009;
    call pop r4009 into r4010 r4011;
    call pop r4011 into r4012 r4013;
    call pop r4013 into r4014 r4015;
    call pop r4015 into r4016 r4017;
    call pop r4017 into r4018 r4019;
    call pop r4019 into r4020 r4021;
    call pop r4021 into r4022 r4023;
    call pop r4023 into r4024 r4025;
    call pop r4025 into r4026 r4027;
    call pop r4027 into r4028 r4029;
    call pop r4029 into r4030 r4031;
    call pop r4031 into r4032 r4033;
    call pop r4033 into r4034 r4035;
    call pop r4035 into r4036 r4037;
    call pop r4037 into r4038 r4039;
    call pop r4039 into r4040 r4041;
    call pop r4041 into r4042 r4043;
    call pop r4043 into r4044 r4045;
    call pop r4045 into r4046 r4047;
    call pop r4047 into r4048 r4049;
    call pop r4049 into r4050 r4051;
    call pop r4051 into r4052 r4053;
    call pop r4053 into r4054 r4055;
    call pop r4055 into r4056 r4057;
    call pop r4057 into r4058 r4059;
    call pop r4059 into r4060 r4061;
    call pop r4061 into r4062 r4063;
    cast r3960r3962r3964r3966r3968r3970r3972r3974r3976r3978r3980r3982r3984r3986r3988r3990r3992r3994r3996r3998r4000r4002r4004r4006r4008r4010 into r4064 as [u128; 26u32];
    cast r4012r4014r4016r4018r4020r4022r4024r4026r4028r4030r4032r4034r4036r4038r4040r4042r4044r4046r4048r4050r4052r4054r4056r4058r4060r4062 into r4065 as [u128; 26u32];
    cast r4064r4065 into r4066 as [[u128; 26u32]; 2u32];
    output r4066 as [[u128; 26u32]; 2u32].private;
