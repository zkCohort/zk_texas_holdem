import zk_bitwise_stack_v0_0_5.aleo;
import zk_deck_shuffle_v0_0_1.aleo;
import zk_sra_encryption_v0_0_2.aleo;
program zk_texas_holdem.aleo;


struct Players:
    player0 as address;
    player1 as address;
    player2 as address;
    player3 as address;
    player4 as address;
    player5 as address;
    player6 as address;
    player7 as address;
    player8 as address;

struct GameState:
    active as boolean;
    player_count as u8;
    players as Players;
    next_players as Players;
    phi as field;
    n as u128;
    deck as [[field; 26u32]; 2u32];
    pointer_i as u8;
    pointer_j as u8;
    hands as [[field; 2u32]; 9u32];
    flop as [field; 3u32];
    turn as field;
    river as field;
    hands_ij as [[[u8; 2u32]; 2u32]; 9u32];
    flop_ij as [[u8; 2u32]; 3u32];
    turn_ij as [u8; 2u32];
    river_ij as [u8; 2u32];
    hands_d as [[[field; 2u32]; 9u32]; 9u32];
    flop_d as [[field; 3u32]; 9u32];
    turn_d as [field; 9u32];
    river_d as [field; 9u32];
    deck_ready as boolean;
    hands_dealt as boolean;
    flop_dealt as boolean;
    turn_dealt as boolean;
    river_dealt as boolean;

record Player:
    owner as address.private;
    table_address as address.private;
    index as u8.private;
    phi as field.private;
    n as u128.private;
    e as field.private;
    d as field.private;
    deck_e as [[field; 26u32]; 2u32].private;
    deck_d as [[field; 26u32]; 2u32].private;

record Deck:
    owner as address.private;
    cards as [[field; 26u32]; 2u32].private;

record Card:
    owner as address.private;
    card as field.private;


mapping game_state_map:
	key as address.public;
	value as GameState.public;

function init_players:
    input r0 as address.private;
    input r1 as address.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as address.private;
    input r7 as address.private;
    input r8 as address.private;
    cast r0 r1 r2 r3 r4 r5 r6 r7 r8 into r9 as Players;
    output r9 as Players.private;




function setup_game:
    input r0 as Players.private;
    input r1 as field.private;
    input r2 as u128.private;
    assert.neq r0.player0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0;
    assert.eq r0.player0 self.caller;
    is.neq r0.player1 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r3;
    add 1u8 1u8 into r4;
    ternary r3 r0.player1 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r5;
    ternary r3 r0.player1 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r6;
    ternary r3 r4 1u8 into r7;
    is.neq r0.player2 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r8;
    add r7 1u8 into r9;
    ternary r8 r0.player2 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r10;
    ternary r8 r0.player2 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r11;
    ternary r8 r9 r7 into r12;
    is.neq r0.player3 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r13;
    add r12 1u8 into r14;
    ternary r13 r0.player3 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r15;
    ternary r13 r0.player3 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r16;
    ternary r13 r14 r12 into r17;
    is.neq r0.player4 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r18;
    add r17 1u8 into r19;
    ternary r18 r0.player4 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r20;
    ternary r18 r0.player4 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r21;
    ternary r18 r19 r17 into r22;
    is.neq r0.player5 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r23;
    add r22 1u8 into r24;
    ternary r23 r0.player5 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r25;
    ternary r23 r0.player5 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r26;
    ternary r23 r24 r22 into r27;
    is.neq r0.player6 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r28;
    add r27 1u8 into r29;
    ternary r28 r0.player6 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r30;
    ternary r28 r0.player6 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r31;
    ternary r28 r29 r27 into r32;
    is.neq r0.player7 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r33;
    add r32 1u8 into r34;
    ternary r33 r0.player7 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r35;
    ternary r33 r0.player7 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r36;
    ternary r33 r34 r32 into r37;
    is.neq r0.player8 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r38;
    add r37 1u8 into r39;
    ternary r38 r0.player8 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r40;
    ternary r38 r0.player8 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r41;
    ternary r38 r39 r37 into r42;
    gt r42 1u8 into r43;
    assert.eq r43 true;
    is.eq r42 2u8 into r44;
    ternary r44 r0.player0 r11 into r45;
    is.eq r42 3u8 into r46;
    ternary r46 r0.player0 r16 into r47;
    is.eq r42 4u8 into r48;
    ternary r48 r0.player0 r21 into r49;
    is.eq r42 5u8 into r50;
    ternary r50 r0.player0 r26 into r51;
    is.eq r42 6u8 into r52;
    ternary r52 r0.player0 r31 into r53;
    is.eq r42 7u8 into r54;
    ternary r54 r0.player0 r36 into r55;
    is.eq r42 8u8 into r56;
    ternary r56 r0.player0 r41 into r57;
    is.eq r42 9u8 into r58;
    ternary r58 r0.player0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r59;
    cast r0.player0 r5 r10 r15 r20 r25 r30 r35 r40 into r60 as Players;
    cast r6 r45 r47 r49 r51 r53 r55 r57 r59 into r61 as Players;
    cast  63field 62field 61field 60field 59field 58field 57field 56field 55field 54field 53field 52field 51field 50field 49field 48field 47field 46field 45field 44field 43field 42field 41field 40field 39field 38field into r62 as [field; 26u32];
    cast  37field 36field 35field 34field 33field 32field 31field 30field 29field 28field 27field 26field 25field 24field 23field 22field 21field 20field 19field 18field 17field 16field 15field 14field 13field 12field into r63 as [field; 26u32];
    cast  r62 r63 into r64 as [[field; 26u32]; 2u32];
    cast self.caller r64 into r65 as Deck.record;
    async setup_game self.caller r42 r60 r61 r1 r2 into r66;
    output r65 as Deck.record;
    output r66 as zk_texas_holdem.aleo/setup_game.future;

finalize setup_game:
    input r0 as address.public;
    input r1 as u8.public;
    input r2 as Players.public;
    input r3 as Players.public;
    input r4 as field.public;
    input r5 as u128.public;
    cast  63field 62field 61field 60field 59field 58field 57field 56field 55field 54field 53field 52field 51field 50field 49field 48field 47field 46field 45field 44field 43field 42field 41field 40field 39field 38field into r6 as [field; 26u32];
    cast  37field 36field 35field 34field 33field 32field 31field 30field 29field 28field 27field 26field 25field 24field 23field 22field 21field 20field 19field 18field 17field 16field 15field 14field 13field 12field into r7 as [field; 26u32];
    cast  r6 r7 into r8 as [[field; 26u32]; 2u32];
    cast  0field 0field into r9 as [field; 2u32];
    cast  0field 0field into r10 as [field; 2u32];
    cast  0field 0field into r11 as [field; 2u32];
    cast  0field 0field into r12 as [field; 2u32];
    cast  0field 0field into r13 as [field; 2u32];
    cast  0field 0field into r14 as [field; 2u32];
    cast  0field 0field into r15 as [field; 2u32];
    cast  0field 0field into r16 as [field; 2u32];
    cast  0field 0field into r17 as [field; 2u32];
    cast  r9 r10 r11 r12 r13 r14 r15 r16 r17 into r18 as [[field; 2u32]; 9u32];
    cast  0field 0field 0field into r19 as [field; 3u32];
    cast  0u8 0u8 into r20 as [u8; 2u32];
    cast  0u8 0u8 into r21 as [u8; 2u32];
    cast  r20 r21 into r22 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r23 as [u8; 2u32];
    cast  0u8 0u8 into r24 as [u8; 2u32];
    cast  r23 r24 into r25 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r26 as [u8; 2u32];
    cast  0u8 0u8 into r27 as [u8; 2u32];
    cast  r26 r27 into r28 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r29 as [u8; 2u32];
    cast  0u8 0u8 into r30 as [u8; 2u32];
    cast  r29 r30 into r31 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r32 as [u8; 2u32];
    cast  0u8 0u8 into r33 as [u8; 2u32];
    cast  r32 r33 into r34 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r35 as [u8; 2u32];
    cast  0u8 0u8 into r36 as [u8; 2u32];
    cast  r35 r36 into r37 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r38 as [u8; 2u32];
    cast  0u8 0u8 into r39 as [u8; 2u32];
    cast  r38 r39 into r40 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r41 as [u8; 2u32];
    cast  0u8 0u8 into r42 as [u8; 2u32];
    cast  r41 r42 into r43 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r44 as [u8; 2u32];
    cast  0u8 0u8 into r45 as [u8; 2u32];
    cast  r44 r45 into r46 as [[u8; 2u32]; 2u32];
    cast  r22 r25 r28 r31 r34 r37 r40 r43 r46 into r47 as [[[u8; 2u32]; 2u32]; 9u32];
    cast  0u8 0u8 into r48 as [u8; 2u32];
    cast  0u8 0u8 into r49 as [u8; 2u32];
    cast  0u8 0u8 into r50 as [u8; 2u32];
    cast  r48 r49 r50 into r51 as [[u8; 2u32]; 3u32];
    cast  0u8 0u8 into r52 as [u8; 2u32];
    cast  0u8 0u8 into r53 as [u8; 2u32];
    cast  0field 0field into r54 as [field; 2u32];
    cast  0field 0field into r55 as [field; 2u32];
    cast  0field 0field into r56 as [field; 2u32];
    cast  0field 0field into r57 as [field; 2u32];
    cast  0field 0field into r58 as [field; 2u32];
    cast  0field 0field into r59 as [field; 2u32];
    cast  0field 0field into r60 as [field; 2u32];
    cast  0field 0field into r61 as [field; 2u32];
    cast  0field 0field into r62 as [field; 2u32];
    cast  r54 r55 r56 r57 r58 r59 r60 r61 r62 into r63 as [[field; 2u32]; 9u32];
    cast  0field 0field into r64 as [field; 2u32];
    cast  0field 0field into r65 as [field; 2u32];
    cast  0field 0field into r66 as [field; 2u32];
    cast  0field 0field into r67 as [field; 2u32];
    cast  0field 0field into r68 as [field; 2u32];
    cast  0field 0field into r69 as [field; 2u32];
    cast  0field 0field into r70 as [field; 2u32];
    cast  0field 0field into r71 as [field; 2u32];
    cast  0field 0field into r72 as [field; 2u32];
    cast  r64 r65 r66 r67 r68 r69 r70 r71 r72 into r73 as [[field; 2u32]; 9u32];
    cast  0field 0field into r74 as [field; 2u32];
    cast  0field 0field into r75 as [field; 2u32];
    cast  0field 0field into r76 as [field; 2u32];
    cast  0field 0field into r77 as [field; 2u32];
    cast  0field 0field into r78 as [field; 2u32];
    cast  0field 0field into r79 as [field; 2u32];
    cast  0field 0field into r80 as [field; 2u32];
    cast  0field 0field into r81 as [field; 2u32];
    cast  0field 0field into r82 as [field; 2u32];
    cast  r74 r75 r76 r77 r78 r79 r80 r81 r82 into r83 as [[field; 2u32]; 9u32];
    cast  0field 0field into r84 as [field; 2u32];
    cast  0field 0field into r85 as [field; 2u32];
    cast  0field 0field into r86 as [field; 2u32];
    cast  0field 0field into r87 as [field; 2u32];
    cast  0field 0field into r88 as [field; 2u32];
    cast  0field 0field into r89 as [field; 2u32];
    cast  0field 0field into r90 as [field; 2u32];
    cast  0field 0field into r91 as [field; 2u32];
    cast  0field 0field into r92 as [field; 2u32];
    cast  r84 r85 r86 r87 r88 r89 r90 r91 r92 into r93 as [[field; 2u32]; 9u32];
    cast  0field 0field into r94 as [field; 2u32];
    cast  0field 0field into r95 as [field; 2u32];
    cast  0field 0field into r96 as [field; 2u32];
    cast  0field 0field into r97 as [field; 2u32];
    cast  0field 0field into r98 as [field; 2u32];
    cast  0field 0field into r99 as [field; 2u32];
    cast  0field 0field into r100 as [field; 2u32];
    cast  0field 0field into r101 as [field; 2u32];
    cast  0field 0field into r102 as [field; 2u32];
    cast  r94 r95 r96 r97 r98 r99 r100 r101 r102 into r103 as [[field; 2u32]; 9u32];
    cast  0field 0field into r104 as [field; 2u32];
    cast  0field 0field into r105 as [field; 2u32];
    cast  0field 0field into r106 as [field; 2u32];
    cast  0field 0field into r107 as [field; 2u32];
    cast  0field 0field into r108 as [field; 2u32];
    cast  0field 0field into r109 as [field; 2u32];
    cast  0field 0field into r110 as [field; 2u32];
    cast  0field 0field into r111 as [field; 2u32];
    cast  0field 0field into r112 as [field; 2u32];
    cast  r104 r105 r106 r107 r108 r109 r110 r111 r112 into r113 as [[field; 2u32]; 9u32];
    cast  0field 0field into r114 as [field; 2u32];
    cast  0field 0field into r115 as [field; 2u32];
    cast  0field 0field into r116 as [field; 2u32];
    cast  0field 0field into r117 as [field; 2u32];
    cast  0field 0field into r118 as [field; 2u32];
    cast  0field 0field into r119 as [field; 2u32];
    cast  0field 0field into r120 as [field; 2u32];
    cast  0field 0field into r121 as [field; 2u32];
    cast  0field 0field into r122 as [field; 2u32];
    cast  r114 r115 r116 r117 r118 r119 r120 r121 r122 into r123 as [[field; 2u32]; 9u32];
    cast  0field 0field into r124 as [field; 2u32];
    cast  0field 0field into r125 as [field; 2u32];
    cast  0field 0field into r126 as [field; 2u32];
    cast  0field 0field into r127 as [field; 2u32];
    cast  0field 0field into r128 as [field; 2u32];
    cast  0field 0field into r129 as [field; 2u32];
    cast  0field 0field into r130 as [field; 2u32];
    cast  0field 0field into r131 as [field; 2u32];
    cast  0field 0field into r132 as [field; 2u32];
    cast  r124 r125 r126 r127 r128 r129 r130 r131 r132 into r133 as [[field; 2u32]; 9u32];
    cast  0field 0field into r134 as [field; 2u32];
    cast  0field 0field into r135 as [field; 2u32];
    cast  0field 0field into r136 as [field; 2u32];
    cast  0field 0field into r137 as [field; 2u32];
    cast  0field 0field into r138 as [field; 2u32];
    cast  0field 0field into r139 as [field; 2u32];
    cast  0field 0field into r140 as [field; 2u32];
    cast  0field 0field into r141 as [field; 2u32];
    cast  0field 0field into r142 as [field; 2u32];
    cast  r134 r135 r136 r137 r138 r139 r140 r141 r142 into r143 as [[field; 2u32]; 9u32];
    cast  r63 r73 r83 r93 r103 r113 r123 r133 r143 into r144 as [[[field; 2u32]; 9u32]; 9u32];
    cast  0field 0field 0field into r145 as [field; 3u32];
    cast  0field 0field 0field into r146 as [field; 3u32];
    cast  0field 0field 0field into r147 as [field; 3u32];
    cast  0field 0field 0field into r148 as [field; 3u32];
    cast  0field 0field 0field into r149 as [field; 3u32];
    cast  0field 0field 0field into r150 as [field; 3u32];
    cast  0field 0field 0field into r151 as [field; 3u32];
    cast  0field 0field 0field into r152 as [field; 3u32];
    cast  0field 0field 0field into r153 as [field; 3u32];
    cast  r145 r146 r147 r148 r149 r150 r151 r152 r153 into r154 as [[field; 3u32]; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r155 as [field; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r156 as [field; 9u32];
    cast true r1 r2 r3 r4 r5 r8 0u8 0u8 r18 r19 0field 0field r47 r51 r52 r53 r144 r154 r155 r156 false false false false false into r157 as GameState;
    set r157 into game_state_map[r0];




function join_game:
    input r0 as address.private;
    input r1 as Players.private;
    input r2 as field.private;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as u128.private;
    is.eq r1.player0 self.caller into r6;
    ternary r6 0u8 0u8 into r7;
    is.eq r1.player1 self.caller into r8;
    ternary r8 1u8 r7 into r9;
    is.eq r1.player2 self.caller into r10;
    ternary r10 2u8 r9 into r11;
    is.eq r1.player3 self.caller into r12;
    ternary r12 3u8 r11 into r13;
    is.eq r1.player4 self.caller into r14;
    ternary r14 4u8 r13 into r15;
    is.eq r1.player5 self.caller into r16;
    ternary r16 5u8 r15 into r17;
    is.eq r1.player6 self.caller into r18;
    ternary r18 6u8 r17 into r19;
    is.eq r1.player7 self.caller into r20;
    ternary r20 7u8 r19 into r21;
    is.eq r1.player8 self.caller into r22;
    ternary r22 8u8 r21 into r23;
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field into r24 as [field; 26u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field into r25 as [field; 26u32];
    cast  r24 r25 into r26 as [[field; 26u32]; 2u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field into r27 as [field; 26u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field 0field into r28 as [field; 26u32];
    cast  r27 r28 into r29 as [[field; 26u32]; 2u32];
    cast self.caller r0 r23 r4 r5 r2 r3 r26 r29 into r30 as Player.record;
    async join_game r0 self.caller r4 r5 into r31;
    output r30 as Player.record;
    output r31 as zk_texas_holdem.aleo/join_game.future;

finalize join_game:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as field.public;
    input r3 as u128.public;
    get game_state_map[r0] into r4;
    assert.eq r4.active true;
    is.eq r4.phi r2 into r5;
    assert.eq r5 true;
    is.eq r4.n r3 into r6;
    assert.eq r6 true;
    is.eq r4.players.player0 r1 into r7;
    ternary r7 true false into r8;
    is.eq r4.players.player1 r1 into r9;
    ternary r9 true r8 into r10;
    is.eq r4.players.player2 r1 into r11;
    ternary r11 true r10 into r12;
    is.eq r4.players.player3 r1 into r13;
    ternary r13 true r12 into r14;
    is.eq r4.players.player4 r1 into r15;
    ternary r15 true r14 into r16;
    is.eq r4.players.player5 r1 into r17;
    ternary r17 true r16 into r18;
    is.eq r4.players.player6 r1 into r19;
    ternary r19 true r18 into r20;
    is.eq r4.players.player7 r1 into r21;
    ternary r21 true r20 into r22;
    is.eq r4.players.player8 r1 into r23;
    ternary r23 true r22 into r24;
    assert.eq r24 true;


function shuffle_and_pass:
    input r0 as Player.record;
    input r1 as Deck.record;
    input r2 as [i8; 7u32].private;
    input r3 as address.private;
    call zk_sra_encryption_v0_0_2.aleo/encrypt_deck r0.e r0.n r1.cards into r4;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[0u32] 128u16 r4 into r5;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[1u32] 128u16 r5 into r6;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[2u32] 128u16 r6 into r7;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[3u32] 128u16 r7 into r8;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[4u32] 128u16 r8 into r9;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[5u32] 128u16 r9 into r10;
    call zk_deck_shuffle_v0_0_1.aleo/shuffle_deck r2[6u32] 128u16 r10 into r11;
    cast r0.owner r0.table_address r0.index r0.phi r0.n r0.e r0.d r0.deck_e r0.deck_d into r12 as Player.record;
    cast r3 into r13 as address;
    cast r13 r11 into r14 as Deck.record;
    async shuffle_and_pass self.caller r0.table_address r3 into r15;
    output r12 as Player.record;
    output r14 as Deck.record;
    output r15 as zk_texas_holdem.aleo/shuffle_and_pass.future;

finalize shuffle_and_pass:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    get game_state_map[r1] into r3;
    assert.eq r3.active true;
    is.eq r3.players.player0 r0 into r4;
    not r4 into r5;
    is.eq r3.next_players.player0 r2 into r6;
    or r5 r6 into r7;
    assert.eq r7 true;
    is.eq r3.players.player1 r0 into r8;
    not r8 into r9;
    is.eq r3.next_players.player1 r2 into r10;
    or r9 r10 into r11;
    assert.eq r11 true;
    is.eq r3.players.player2 r0 into r12;
    not r12 into r13;
    is.eq r3.next_players.player2 r2 into r14;
    or r13 r14 into r15;
    assert.eq r15 true;
    is.eq r3.players.player3 r0 into r16;
    not r16 into r17;
    is.eq r3.next_players.player3 r2 into r18;
    or r17 r18 into r19;
    assert.eq r19 true;
    is.eq r3.players.player4 r0 into r20;
    not r20 into r21;
    is.eq r3.next_players.player4 r2 into r22;
    or r21 r22 into r23;
    assert.eq r23 true;
    is.eq r3.players.player5 r0 into r24;
    not r24 into r25;
    is.eq r3.next_players.player5 r2 into r26;
    or r25 r26 into r27;
    assert.eq r27 true;
    is.eq r3.players.player6 r0 into r28;
    not r28 into r29;
    is.eq r3.next_players.player6 r2 into r30;
    or r29 r30 into r31;
    assert.eq r31 true;
    is.eq r3.players.player7 r0 into r32;
    not r32 into r33;
    is.eq r3.next_players.player7 r2 into r34;
    or r33 r34 into r35;
    assert.eq r35 true;
    is.eq r3.players.player8 r0 into r36;
    not r36 into r37;
    is.eq r3.next_players.player8 r2 into r38;
    or r37 r38 into r39;
    assert.eq r39 true;


function decrypt_encrypt_each_then_pass:
    input r0 as Player.record;
    input r1 as Deck.record;
    input r2 as [[field; 26u32]; 2u32].private;
    input r3 as [[field; 26u32]; 2u32].private;
    input r4 as address.private;
    call zk_sra_encryption_v0_0_2.aleo/decrypt_deck r0.d r0.n r1.cards into r5;
    call zk_sra_encryption_v0_0_2.aleo/encrypt_deck_per_card r2 r0.n r5 into r6;
    cast self.caller r0.table_address r0.index r0.phi r0.n r0.e r0.d r2 r3 into r7 as Player.record;
    cast r4 r6 into r8 as Deck.record;
    async decrypt_encrypt_each_then_pass self.caller r0.table_address r4 into r9;
    output r7 as Player.record;
    output r8 as Deck.record;
    output r9 as zk_texas_holdem.aleo/decrypt_encrypt_each_then_pass.future;

finalize decrypt_encrypt_each_then_pass:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    get game_state_map[r1] into r3;
    assert.eq r3.active true;
    is.eq r3.players.player0 r0 into r4;
    not r4 into r5;
    is.eq r3.next_players.player0 r2 into r6;
    or r5 r6 into r7;
    assert.eq r7 true;
    is.eq r3.players.player1 r0 into r8;
    not r8 into r9;
    is.eq r3.next_players.player1 r2 into r10;
    or r9 r10 into r11;
    assert.eq r11 true;
    is.eq r3.players.player2 r0 into r12;
    not r12 into r13;
    is.eq r3.next_players.player2 r2 into r14;
    or r13 r14 into r15;
    assert.eq r15 true;
    is.eq r3.players.player3 r0 into r16;
    not r16 into r17;
    is.eq r3.next_players.player3 r2 into r18;
    or r17 r18 into r19;
    assert.eq r19 true;
    is.eq r3.players.player4 r0 into r20;
    not r20 into r21;
    is.eq r3.next_players.player4 r2 into r22;
    or r21 r22 into r23;
    assert.eq r23 true;
    is.eq r3.players.player5 r0 into r24;
    not r24 into r25;
    is.eq r3.next_players.player5 r2 into r26;
    or r25 r26 into r27;
    assert.eq r27 true;
    is.eq r3.players.player6 r0 into r28;
    not r28 into r29;
    is.eq r3.next_players.player6 r2 into r30;
    or r29 r30 into r31;
    assert.eq r31 true;
    is.eq r3.players.player7 r0 into r32;
    not r32 into r33;
    is.eq r3.next_players.player7 r2 into r34;
    or r33 r34 into r35;
    assert.eq r35 true;
    is.eq r3.players.player8 r0 into r36;
    not r36 into r37;
    is.eq r3.next_players.player8 r2 into r38;
    or r37 r38 into r39;
    assert.eq r39 true;


function publish_deck:
    input r0 as Player.record;
    input r1 as Deck.record;
    cast self.caller r0.table_address r0.index r0.phi r0.n r0.e r0.d r1.cards r0.deck_d into r2 as Player.record;
    cast self.caller r1.cards into r3 as Deck.record;
    async publish_deck self.caller r0.table_address r1.cards into r4;
    output r2 as Player.record;
    output r3 as Deck.record;
    output r4 as zk_texas_holdem.aleo/publish_deck.future;

finalize publish_deck:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as [[field; 26u32]; 2u32].public;
    get game_state_map[r1] into r3;
    assert.eq r3.active true;
    assert.eq r3.players.player0 r0;
    assert.eq r3.players.player0 r1;
    cast  0field 0field into r4 as [field; 2u32];
    cast  0field 0field into r5 as [field; 2u32];
    cast  0field 0field into r6 as [field; 2u32];
    cast  0field 0field into r7 as [field; 2u32];
    cast  0field 0field into r8 as [field; 2u32];
    cast  0field 0field into r9 as [field; 2u32];
    cast  0field 0field into r10 as [field; 2u32];
    cast  0field 0field into r11 as [field; 2u32];
    cast  0field 0field into r12 as [field; 2u32];
    cast  r4 r5 r6 r7 r8 r9 r10 r11 r12 into r13 as [[field; 2u32]; 9u32];
    cast  0field 0field 0field into r14 as [field; 3u32];
    cast  0u8 0u8 into r15 as [u8; 2u32];
    cast  0u8 0u8 into r16 as [u8; 2u32];
    cast  r15 r16 into r17 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r18 as [u8; 2u32];
    cast  0u8 0u8 into r19 as [u8; 2u32];
    cast  r18 r19 into r20 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r21 as [u8; 2u32];
    cast  0u8 0u8 into r22 as [u8; 2u32];
    cast  r21 r22 into r23 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r24 as [u8; 2u32];
    cast  0u8 0u8 into r25 as [u8; 2u32];
    cast  r24 r25 into r26 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r27 as [u8; 2u32];
    cast  0u8 0u8 into r28 as [u8; 2u32];
    cast  r27 r28 into r29 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r30 as [u8; 2u32];
    cast  0u8 0u8 into r31 as [u8; 2u32];
    cast  r30 r31 into r32 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r33 as [u8; 2u32];
    cast  0u8 0u8 into r34 as [u8; 2u32];
    cast  r33 r34 into r35 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r36 as [u8; 2u32];
    cast  0u8 0u8 into r37 as [u8; 2u32];
    cast  r36 r37 into r38 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r39 as [u8; 2u32];
    cast  0u8 0u8 into r40 as [u8; 2u32];
    cast  r39 r40 into r41 as [[u8; 2u32]; 2u32];
    cast  r17 r20 r23 r26 r29 r32 r35 r38 r41 into r42 as [[[u8; 2u32]; 2u32]; 9u32];
    cast  0u8 0u8 into r43 as [u8; 2u32];
    cast  0u8 0u8 into r44 as [u8; 2u32];
    cast  0u8 0u8 into r45 as [u8; 2u32];
    cast  r43 r44 r45 into r46 as [[u8; 2u32]; 3u32];
    cast  0u8 0u8 into r47 as [u8; 2u32];
    cast  0u8 0u8 into r48 as [u8; 2u32];
    cast  0field 0field into r49 as [field; 2u32];
    cast  0field 0field into r50 as [field; 2u32];
    cast  0field 0field into r51 as [field; 2u32];
    cast  0field 0field into r52 as [field; 2u32];
    cast  0field 0field into r53 as [field; 2u32];
    cast  0field 0field into r54 as [field; 2u32];
    cast  0field 0field into r55 as [field; 2u32];
    cast  0field 0field into r56 as [field; 2u32];
    cast  0field 0field into r57 as [field; 2u32];
    cast  r49 r50 r51 r52 r53 r54 r55 r56 r57 into r58 as [[field; 2u32]; 9u32];
    cast  0field 0field into r59 as [field; 2u32];
    cast  0field 0field into r60 as [field; 2u32];
    cast  0field 0field into r61 as [field; 2u32];
    cast  0field 0field into r62 as [field; 2u32];
    cast  0field 0field into r63 as [field; 2u32];
    cast  0field 0field into r64 as [field; 2u32];
    cast  0field 0field into r65 as [field; 2u32];
    cast  0field 0field into r66 as [field; 2u32];
    cast  0field 0field into r67 as [field; 2u32];
    cast  r59 r60 r61 r62 r63 r64 r65 r66 r67 into r68 as [[field; 2u32]; 9u32];
    cast  0field 0field into r69 as [field; 2u32];
    cast  0field 0field into r70 as [field; 2u32];
    cast  0field 0field into r71 as [field; 2u32];
    cast  0field 0field into r72 as [field; 2u32];
    cast  0field 0field into r73 as [field; 2u32];
    cast  0field 0field into r74 as [field; 2u32];
    cast  0field 0field into r75 as [field; 2u32];
    cast  0field 0field into r76 as [field; 2u32];
    cast  0field 0field into r77 as [field; 2u32];
    cast  r69 r70 r71 r72 r73 r74 r75 r76 r77 into r78 as [[field; 2u32]; 9u32];
    cast  0field 0field into r79 as [field; 2u32];
    cast  0field 0field into r80 as [field; 2u32];
    cast  0field 0field into r81 as [field; 2u32];
    cast  0field 0field into r82 as [field; 2u32];
    cast  0field 0field into r83 as [field; 2u32];
    cast  0field 0field into r84 as [field; 2u32];
    cast  0field 0field into r85 as [field; 2u32];
    cast  0field 0field into r86 as [field; 2u32];
    cast  0field 0field into r87 as [field; 2u32];
    cast  r79 r80 r81 r82 r83 r84 r85 r86 r87 into r88 as [[field; 2u32]; 9u32];
    cast  0field 0field into r89 as [field; 2u32];
    cast  0field 0field into r90 as [field; 2u32];
    cast  0field 0field into r91 as [field; 2u32];
    cast  0field 0field into r92 as [field; 2u32];
    cast  0field 0field into r93 as [field; 2u32];
    cast  0field 0field into r94 as [field; 2u32];
    cast  0field 0field into r95 as [field; 2u32];
    cast  0field 0field into r96 as [field; 2u32];
    cast  0field 0field into r97 as [field; 2u32];
    cast  r89 r90 r91 r92 r93 r94 r95 r96 r97 into r98 as [[field; 2u32]; 9u32];
    cast  0field 0field into r99 as [field; 2u32];
    cast  0field 0field into r100 as [field; 2u32];
    cast  0field 0field into r101 as [field; 2u32];
    cast  0field 0field into r102 as [field; 2u32];
    cast  0field 0field into r103 as [field; 2u32];
    cast  0field 0field into r104 as [field; 2u32];
    cast  0field 0field into r105 as [field; 2u32];
    cast  0field 0field into r106 as [field; 2u32];
    cast  0field 0field into r107 as [field; 2u32];
    cast  r99 r100 r101 r102 r103 r104 r105 r106 r107 into r108 as [[field; 2u32]; 9u32];
    cast  0field 0field into r109 as [field; 2u32];
    cast  0field 0field into r110 as [field; 2u32];
    cast  0field 0field into r111 as [field; 2u32];
    cast  0field 0field into r112 as [field; 2u32];
    cast  0field 0field into r113 as [field; 2u32];
    cast  0field 0field into r114 as [field; 2u32];
    cast  0field 0field into r115 as [field; 2u32];
    cast  0field 0field into r116 as [field; 2u32];
    cast  0field 0field into r117 as [field; 2u32];
    cast  r109 r110 r111 r112 r113 r114 r115 r116 r117 into r118 as [[field; 2u32]; 9u32];
    cast  0field 0field into r119 as [field; 2u32];
    cast  0field 0field into r120 as [field; 2u32];
    cast  0field 0field into r121 as [field; 2u32];
    cast  0field 0field into r122 as [field; 2u32];
    cast  0field 0field into r123 as [field; 2u32];
    cast  0field 0field into r124 as [field; 2u32];
    cast  0field 0field into r125 as [field; 2u32];
    cast  0field 0field into r126 as [field; 2u32];
    cast  0field 0field into r127 as [field; 2u32];
    cast  r119 r120 r121 r122 r123 r124 r125 r126 r127 into r128 as [[field; 2u32]; 9u32];
    cast  0field 0field into r129 as [field; 2u32];
    cast  0field 0field into r130 as [field; 2u32];
    cast  0field 0field into r131 as [field; 2u32];
    cast  0field 0field into r132 as [field; 2u32];
    cast  0field 0field into r133 as [field; 2u32];
    cast  0field 0field into r134 as [field; 2u32];
    cast  0field 0field into r135 as [field; 2u32];
    cast  0field 0field into r136 as [field; 2u32];
    cast  0field 0field into r137 as [field; 2u32];
    cast  r129 r130 r131 r132 r133 r134 r135 r136 r137 into r138 as [[field; 2u32]; 9u32];
    cast  r58 r68 r78 r88 r98 r108 r118 r128 r138 into r139 as [[[field; 2u32]; 9u32]; 9u32];
    cast  0field 0field 0field into r140 as [field; 3u32];
    cast  0field 0field 0field into r141 as [field; 3u32];
    cast  0field 0field 0field into r142 as [field; 3u32];
    cast  0field 0field 0field into r143 as [field; 3u32];
    cast  0field 0field 0field into r144 as [field; 3u32];
    cast  0field 0field 0field into r145 as [field; 3u32];
    cast  0field 0field 0field into r146 as [field; 3u32];
    cast  0field 0field 0field into r147 as [field; 3u32];
    cast  0field 0field 0field into r148 as [field; 3u32];
    cast  r140 r141 r142 r143 r144 r145 r146 r147 r148 into r149 as [[field; 3u32]; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r150 as [field; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r151 as [field; 9u32];
    cast true r3.player_count r3.players r3.next_players r3.phi r3.n r2 0u8 0u8 r13 r14 0field 0field r42 r46 r47 r48 r139 r149 r150 r151 true false false false false into r152 as GameState;
    set r152 into game_state_map[r1];






function deal_flop:
    input r0 as Player.record;
    is.eq r0.owner r0.table_address into r1;
    assert.eq r1 true;
    cast self.caller r0.table_address r0.index r0.phi r0.n r0.e r0.d r0.deck_e r0.deck_d into r2 as Player.record;
    async deal_flop self.caller r0.table_address into r3;
    output r2 as Player.record;
    output r3 as zk_texas_holdem.aleo/deal_flop.future;

finalize deal_flop:
    input r0 as address.public;
    input r1 as address.public;
    get game_state_map[r1] into r2;
    assert.eq r2.active true;
    assert.neq r2.flop_dealt true;
    is.eq 0u8 r2.pointer_i into r3;
    is.eq 0u8 r2.pointer_j into r4;
    add r2.pointer_j 1u8 into r5;
    is.eq r2.pointer_i 0u8 into r6;
    is.eq r5 26u8 into r7;
    and r6 r7 into r8;
    add r2.pointer_i 1u8 into r9;
    ternary r8 0u8 r5 into r10;
    ternary r8 r9 0u8 into r11;
    ternary r4 r10 0u8 into r12;
    ternary r4 r11 0u8 into r13;
    is.eq 1u8 r2.pointer_j into r14;
    add r2.pointer_j 1u8 into r15;
    is.eq r2.pointer_i 0u8 into r16;
    is.eq r15 26u8 into r17;
    and r16 r17 into r18;
    add r2.pointer_i 1u8 into r19;
    ternary r18 0u8 r15 into r20;
    ternary r18 r19 r13 into r21;
    ternary r14 r20 r12 into r22;
    ternary r14 r21 r13 into r23;
    is.eq 2u8 r2.pointer_j into r24;
    add r2.pointer_j 1u8 into r25;
    is.eq r2.pointer_i 0u8 into r26;
    is.eq r25 26u8 into r27;
    and r26 r27 into r28;
    add r2.pointer_i 1u8 into r29;
    ternary r28 0u8 r25 into r30;
    ternary r28 r29 r23 into r31;
    ternary r24 r30 r22 into r32;
    ternary r24 r31 r23 into r33;
    is.eq 3u8 r2.pointer_j into r34;
    add r2.pointer_j 1u8 into r35;
    is.eq r2.pointer_i 0u8 into r36;
    is.eq r35 26u8 into r37;
    and r36 r37 into r38;
    add r2.pointer_i 1u8 into r39;
    ternary r38 0u8 r35 into r40;
    ternary r38 r39 r33 into r41;
    ternary r34 r40 r32 into r42;
    ternary r34 r41 r33 into r43;
    is.eq 4u8 r2.pointer_j into r44;
    add r2.pointer_j 1u8 into r45;
    is.eq r2.pointer_i 0u8 into r46;
    is.eq r45 26u8 into r47;
    and r46 r47 into r48;
    add r2.pointer_i 1u8 into r49;
    ternary r48 0u8 r45 into r50;
    ternary r48 r49 r43 into r51;
    ternary r44 r50 r42 into r52;
    ternary r44 r51 r43 into r53;
    is.eq 5u8 r2.pointer_j into r54;
    add r2.pointer_j 1u8 into r55;
    is.eq r2.pointer_i 0u8 into r56;
    is.eq r55 26u8 into r57;
    and r56 r57 into r58;
    add r2.pointer_i 1u8 into r59;
    ternary r58 0u8 r55 into r60;
    ternary r58 r59 r53 into r61;
    ternary r54 r60 r52 into r62;
    ternary r54 r61 r53 into r63;
    is.eq 6u8 r2.pointer_j into r64;
    add r2.pointer_j 1u8 into r65;
    is.eq r2.pointer_i 0u8 into r66;
    is.eq r65 26u8 into r67;
    and r66 r67 into r68;
    add r2.pointer_i 1u8 into r69;
    ternary r68 0u8 r65 into r70;
    ternary r68 r69 r63 into r71;
    ternary r64 r70 r62 into r72;
    ternary r64 r71 r63 into r73;
    is.eq 7u8 r2.pointer_j into r74;
    add r2.pointer_j 1u8 into r75;
    is.eq r2.pointer_i 0u8 into r76;
    is.eq r75 26u8 into r77;
    and r76 r77 into r78;
    add r2.pointer_i 1u8 into r79;
    ternary r78 0u8 r75 into r80;
    ternary r78 r79 r73 into r81;
    ternary r74 r80 r72 into r82;
    ternary r74 r81 r73 into r83;
    is.eq 8u8 r2.pointer_j into r84;
    add r2.pointer_j 1u8 into r85;
    is.eq r2.pointer_i 0u8 into r86;
    is.eq r85 26u8 into r87;
    and r86 r87 into r88;
    add r2.pointer_i 1u8 into r89;
    ternary r88 0u8 r85 into r90;
    ternary r88 r89 r83 into r91;
    ternary r84 r90 r82 into r92;
    ternary r84 r91 r83 into r93;
    is.eq 9u8 r2.pointer_j into r94;
    add r2.pointer_j 1u8 into r95;
    is.eq r2.pointer_i 0u8 into r96;
    is.eq r95 26u8 into r97;
    and r96 r97 into r98;
    add r2.pointer_i 1u8 into r99;
    ternary r98 0u8 r95 into r100;
    ternary r98 r99 r93 into r101;
    ternary r94 r100 r92 into r102;
    ternary r94 r101 r93 into r103;
    is.eq 10u8 r2.pointer_j into r104;
    add r2.pointer_j 1u8 into r105;
    is.eq r2.pointer_i 0u8 into r106;
    is.eq r105 26u8 into r107;
    and r106 r107 into r108;
    add r2.pointer_i 1u8 into r109;
    ternary r108 0u8 r105 into r110;
    ternary r108 r109 r103 into r111;
    ternary r104 r110 r102 into r112;
    ternary r104 r111 r103 into r113;
    is.eq 11u8 r2.pointer_j into r114;
    add r2.pointer_j 1u8 into r115;
    is.eq r2.pointer_i 0u8 into r116;
    is.eq r115 26u8 into r117;
    and r116 r117 into r118;
    add r2.pointer_i 1u8 into r119;
    ternary r118 0u8 r115 into r120;
    ternary r118 r119 r113 into r121;
    ternary r114 r120 r112 into r122;
    ternary r114 r121 r113 into r123;
    is.eq 12u8 r2.pointer_j into r124;
    add r2.pointer_j 1u8 into r125;
    is.eq r2.pointer_i 0u8 into r126;
    is.eq r125 26u8 into r127;
    and r126 r127 into r128;
    add r2.pointer_i 1u8 into r129;
    ternary r128 0u8 r125 into r130;
    ternary r128 r129 r123 into r131;
    ternary r124 r130 r122 into r132;
    ternary r124 r131 r123 into r133;
    is.eq 13u8 r2.pointer_j into r134;
    add r2.pointer_j 1u8 into r135;
    is.eq r2.pointer_i 0u8 into r136;
    is.eq r135 26u8 into r137;
    and r136 r137 into r138;
    add r2.pointer_i 1u8 into r139;
    ternary r138 0u8 r135 into r140;
    ternary r138 r139 r133 into r141;
    ternary r134 r140 r132 into r142;
    ternary r134 r141 r133 into r143;
    is.eq 14u8 r2.pointer_j into r144;
    add r2.pointer_j 1u8 into r145;
    is.eq r2.pointer_i 0u8 into r146;
    is.eq r145 26u8 into r147;
    and r146 r147 into r148;
    add r2.pointer_i 1u8 into r149;
    ternary r148 0u8 r145 into r150;
    ternary r148 r149 r143 into r151;
    ternary r144 r150 r142 into r152;
    ternary r144 r151 r143 into r153;
    is.eq 15u8 r2.pointer_j into r154;
    add r2.pointer_j 1u8 into r155;
    is.eq r2.pointer_i 0u8 into r156;
    is.eq r155 26u8 into r157;
    and r156 r157 into r158;
    add r2.pointer_i 1u8 into r159;
    ternary r158 0u8 r155 into r160;
    ternary r158 r159 r153 into r161;
    ternary r154 r160 r152 into r162;
    ternary r154 r161 r153 into r163;
    is.eq 16u8 r2.pointer_j into r164;
    add r2.pointer_j 1u8 into r165;
    is.eq r2.pointer_i 0u8 into r166;
    is.eq r165 26u8 into r167;
    and r166 r167 into r168;
    add r2.pointer_i 1u8 into r169;
    ternary r168 0u8 r165 into r170;
    ternary r168 r169 r163 into r171;
    ternary r164 r170 r162 into r172;
    ternary r164 r171 r163 into r173;
    is.eq 17u8 r2.pointer_j into r174;
    add r2.pointer_j 1u8 into r175;
    is.eq r2.pointer_i 0u8 into r176;
    is.eq r175 26u8 into r177;
    and r176 r177 into r178;
    add r2.pointer_i 1u8 into r179;
    ternary r178 0u8 r175 into r180;
    ternary r178 r179 r173 into r181;
    ternary r174 r180 r172 into r182;
    ternary r174 r181 r173 into r183;
    is.eq 18u8 r2.pointer_j into r184;
    add r2.pointer_j 1u8 into r185;
    is.eq r2.pointer_i 0u8 into r186;
    is.eq r185 26u8 into r187;
    and r186 r187 into r188;
    add r2.pointer_i 1u8 into r189;
    ternary r188 0u8 r185 into r190;
    ternary r188 r189 r183 into r191;
    ternary r184 r190 r182 into r192;
    ternary r184 r191 r183 into r193;
    is.eq 19u8 r2.pointer_j into r194;
    add r2.pointer_j 1u8 into r195;
    is.eq r2.pointer_i 0u8 into r196;
    is.eq r195 26u8 into r197;
    and r196 r197 into r198;
    add r2.pointer_i 1u8 into r199;
    ternary r198 0u8 r195 into r200;
    ternary r198 r199 r193 into r201;
    ternary r194 r200 r192 into r202;
    ternary r194 r201 r193 into r203;
    is.eq 20u8 r2.pointer_j into r204;
    add r2.pointer_j 1u8 into r205;
    is.eq r2.pointer_i 0u8 into r206;
    is.eq r205 26u8 into r207;
    and r206 r207 into r208;
    add r2.pointer_i 1u8 into r209;
    ternary r208 0u8 r205 into r210;
    ternary r208 r209 r203 into r211;
    ternary r204 r210 r202 into r212;
    ternary r204 r211 r203 into r213;
    is.eq 21u8 r2.pointer_j into r214;
    add r2.pointer_j 1u8 into r215;
    is.eq r2.pointer_i 0u8 into r216;
    is.eq r215 26u8 into r217;
    and r216 r217 into r218;
    add r2.pointer_i 1u8 into r219;
    ternary r218 0u8 r215 into r220;
    ternary r218 r219 r213 into r221;
    ternary r214 r220 r212 into r222;
    ternary r214 r221 r213 into r223;
    is.eq 22u8 r2.pointer_j into r224;
    add r2.pointer_j 1u8 into r225;
    is.eq r2.pointer_i 0u8 into r226;
    is.eq r225 26u8 into r227;
    and r226 r227 into r228;
    add r2.pointer_i 1u8 into r229;
    ternary r228 0u8 r225 into r230;
    ternary r228 r229 r223 into r231;
    ternary r224 r230 r222 into r232;
    ternary r224 r231 r223 into r233;
    is.eq 23u8 r2.pointer_j into r234;
    add r2.pointer_j 1u8 into r235;
    is.eq r2.pointer_i 0u8 into r236;
    is.eq r235 26u8 into r237;
    and r236 r237 into r238;
    add r2.pointer_i 1u8 into r239;
    ternary r238 0u8 r235 into r240;
    ternary r238 r239 r233 into r241;
    ternary r234 r240 r232 into r242;
    ternary r234 r241 r233 into r243;
    is.eq 24u8 r2.pointer_j into r244;
    add r2.pointer_j 1u8 into r245;
    is.eq r2.pointer_i 0u8 into r246;
    is.eq r245 26u8 into r247;
    and r246 r247 into r248;
    add r2.pointer_i 1u8 into r249;
    ternary r248 0u8 r245 into r250;
    ternary r248 r249 r243 into r251;
    ternary r244 r250 r242 into r252;
    ternary r244 r251 r243 into r253;
    is.eq 25u8 r2.pointer_j into r254;
    add r2.pointer_j 1u8 into r255;
    is.eq r2.pointer_i 0u8 into r256;
    is.eq r255 26u8 into r257;
    and r256 r257 into r258;
    add r2.pointer_i 1u8 into r259;
    ternary r258 0u8 r255 into r260;
    ternary r258 r259 r253 into r261;
    ternary r254 r260 r252 into r262;
    ternary r254 r261 r253 into r263;
    ternary r3 r262 0u8 into r264;
    ternary r3 r263 0u8 into r265;
    is.eq 1u8 r2.pointer_i into r266;
    is.eq 0u8 r2.pointer_j into r267;
    add r2.pointer_j 1u8 into r268;
    is.eq r2.pointer_i 0u8 into r269;
    is.eq r268 26u8 into r270;
    and r269 r270 into r271;
    add r2.pointer_i 1u8 into r272;
    ternary r271 0u8 r268 into r273;
    ternary r271 r272 r265 into r274;
    ternary r267 r273 r264 into r275;
    ternary r267 r274 r265 into r276;
    is.eq 1u8 r2.pointer_j into r277;
    add r2.pointer_j 1u8 into r278;
    is.eq r2.pointer_i 0u8 into r279;
    is.eq r278 26u8 into r280;
    and r279 r280 into r281;
    add r2.pointer_i 1u8 into r282;
    ternary r281 0u8 r278 into r283;
    ternary r281 r282 r276 into r284;
    ternary r277 r283 r275 into r285;
    ternary r277 r284 r276 into r286;
    is.eq 2u8 r2.pointer_j into r287;
    add r2.pointer_j 1u8 into r288;
    is.eq r2.pointer_i 0u8 into r289;
    is.eq r288 26u8 into r290;
    and r289 r290 into r291;
    add r2.pointer_i 1u8 into r292;
    ternary r291 0u8 r288 into r293;
    ternary r291 r292 r286 into r294;
    ternary r287 r293 r285 into r295;
    ternary r287 r294 r286 into r296;
    is.eq 3u8 r2.pointer_j into r297;
    add r2.pointer_j 1u8 into r298;
    is.eq r2.pointer_i 0u8 into r299;
    is.eq r298 26u8 into r300;
    and r299 r300 into r301;
    add r2.pointer_i 1u8 into r302;
    ternary r301 0u8 r298 into r303;
    ternary r301 r302 r296 into r304;
    ternary r297 r303 r295 into r305;
    ternary r297 r304 r296 into r306;
    is.eq 4u8 r2.pointer_j into r307;
    add r2.pointer_j 1u8 into r308;
    is.eq r2.pointer_i 0u8 into r309;
    is.eq r308 26u8 into r310;
    and r309 r310 into r311;
    add r2.pointer_i 1u8 into r312;
    ternary r311 0u8 r308 into r313;
    ternary r311 r312 r306 into r314;
    ternary r307 r313 r305 into r315;
    ternary r307 r314 r306 into r316;
    is.eq 5u8 r2.pointer_j into r317;
    add r2.pointer_j 1u8 into r318;
    is.eq r2.pointer_i 0u8 into r319;
    is.eq r318 26u8 into r320;
    and r319 r320 into r321;
    add r2.pointer_i 1u8 into r322;
    ternary r321 0u8 r318 into r323;
    ternary r321 r322 r316 into r324;
    ternary r317 r323 r315 into r325;
    ternary r317 r324 r316 into r326;
    is.eq 6u8 r2.pointer_j into r327;
    add r2.pointer_j 1u8 into r328;
    is.eq r2.pointer_i 0u8 into r329;
    is.eq r328 26u8 into r330;
    and r329 r330 into r331;
    add r2.pointer_i 1u8 into r332;
    ternary r331 0u8 r328 into r333;
    ternary r331 r332 r326 into r334;
    ternary r327 r333 r325 into r335;
    ternary r327 r334 r326 into r336;
    is.eq 7u8 r2.pointer_j into r337;
    add r2.pointer_j 1u8 into r338;
    is.eq r2.pointer_i 0u8 into r339;
    is.eq r338 26u8 into r340;
    and r339 r340 into r341;
    add r2.pointer_i 1u8 into r342;
    ternary r341 0u8 r338 into r343;
    ternary r341 r342 r336 into r344;
    ternary r337 r343 r335 into r345;
    ternary r337 r344 r336 into r346;
    is.eq 8u8 r2.pointer_j into r347;
    add r2.pointer_j 1u8 into r348;
    is.eq r2.pointer_i 0u8 into r349;
    is.eq r348 26u8 into r350;
    and r349 r350 into r351;
    add r2.pointer_i 1u8 into r352;
    ternary r351 0u8 r348 into r353;
    ternary r351 r352 r346 into r354;
    ternary r347 r353 r345 into r355;
    ternary r347 r354 r346 into r356;
    is.eq 9u8 r2.pointer_j into r357;
    add r2.pointer_j 1u8 into r358;
    is.eq r2.pointer_i 0u8 into r359;
    is.eq r358 26u8 into r360;
    and r359 r360 into r361;
    add r2.pointer_i 1u8 into r362;
    ternary r361 0u8 r358 into r363;
    ternary r361 r362 r356 into r364;
    ternary r357 r363 r355 into r365;
    ternary r357 r364 r356 into r366;
    is.eq 10u8 r2.pointer_j into r367;
    add r2.pointer_j 1u8 into r368;
    is.eq r2.pointer_i 0u8 into r369;
    is.eq r368 26u8 into r370;
    and r369 r370 into r371;
    add r2.pointer_i 1u8 into r372;
    ternary r371 0u8 r368 into r373;
    ternary r371 r372 r366 into r374;
    ternary r367 r373 r365 into r375;
    ternary r367 r374 r366 into r376;
    is.eq 11u8 r2.pointer_j into r377;
    add r2.pointer_j 1u8 into r378;
    is.eq r2.pointer_i 0u8 into r379;
    is.eq r378 26u8 into r380;
    and r379 r380 into r381;
    add r2.pointer_i 1u8 into r382;
    ternary r381 0u8 r378 into r383;
    ternary r381 r382 r376 into r384;
    ternary r377 r383 r375 into r385;
    ternary r377 r384 r376 into r386;
    is.eq 12u8 r2.pointer_j into r387;
    add r2.pointer_j 1u8 into r388;
    is.eq r2.pointer_i 0u8 into r389;
    is.eq r388 26u8 into r390;
    and r389 r390 into r391;
    add r2.pointer_i 1u8 into r392;
    ternary r391 0u8 r388 into r393;
    ternary r391 r392 r386 into r394;
    ternary r387 r393 r385 into r395;
    ternary r387 r394 r386 into r396;
    is.eq 13u8 r2.pointer_j into r397;
    add r2.pointer_j 1u8 into r398;
    is.eq r2.pointer_i 0u8 into r399;
    is.eq r398 26u8 into r400;
    and r399 r400 into r401;
    add r2.pointer_i 1u8 into r402;
    ternary r401 0u8 r398 into r403;
    ternary r401 r402 r396 into r404;
    ternary r397 r403 r395 into r405;
    ternary r397 r404 r396 into r406;
    is.eq 14u8 r2.pointer_j into r407;
    add r2.pointer_j 1u8 into r408;
    is.eq r2.pointer_i 0u8 into r409;
    is.eq r408 26u8 into r410;
    and r409 r410 into r411;
    add r2.pointer_i 1u8 into r412;
    ternary r411 0u8 r408 into r413;
    ternary r411 r412 r406 into r414;
    ternary r407 r413 r405 into r415;
    ternary r407 r414 r406 into r416;
    is.eq 15u8 r2.pointer_j into r417;
    add r2.pointer_j 1u8 into r418;
    is.eq r2.pointer_i 0u8 into r419;
    is.eq r418 26u8 into r420;
    and r419 r420 into r421;
    add r2.pointer_i 1u8 into r422;
    ternary r421 0u8 r418 into r423;
    ternary r421 r422 r416 into r424;
    ternary r417 r423 r415 into r425;
    ternary r417 r424 r416 into r426;
    is.eq 16u8 r2.pointer_j into r427;
    add r2.pointer_j 1u8 into r428;
    is.eq r2.pointer_i 0u8 into r429;
    is.eq r428 26u8 into r430;
    and r429 r430 into r431;
    add r2.pointer_i 1u8 into r432;
    ternary r431 0u8 r428 into r433;
    ternary r431 r432 r426 into r434;
    ternary r427 r433 r425 into r435;
    ternary r427 r434 r426 into r436;
    is.eq 17u8 r2.pointer_j into r437;
    add r2.pointer_j 1u8 into r438;
    is.eq r2.pointer_i 0u8 into r439;
    is.eq r438 26u8 into r440;
    and r439 r440 into r441;
    add r2.pointer_i 1u8 into r442;
    ternary r441 0u8 r438 into r443;
    ternary r441 r442 r436 into r444;
    ternary r437 r443 r435 into r445;
    ternary r437 r444 r436 into r446;
    is.eq 18u8 r2.pointer_j into r447;
    add r2.pointer_j 1u8 into r448;
    is.eq r2.pointer_i 0u8 into r449;
    is.eq r448 26u8 into r450;
    and r449 r450 into r451;
    add r2.pointer_i 1u8 into r452;
    ternary r451 0u8 r448 into r453;
    ternary r451 r452 r446 into r454;
    ternary r447 r453 r445 into r455;
    ternary r447 r454 r446 into r456;
    is.eq 19u8 r2.pointer_j into r457;
    add r2.pointer_j 1u8 into r458;
    is.eq r2.pointer_i 0u8 into r459;
    is.eq r458 26u8 into r460;
    and r459 r460 into r461;
    add r2.pointer_i 1u8 into r462;
    ternary r461 0u8 r458 into r463;
    ternary r461 r462 r456 into r464;
    ternary r457 r463 r455 into r465;
    ternary r457 r464 r456 into r466;
    is.eq 20u8 r2.pointer_j into r467;
    add r2.pointer_j 1u8 into r468;
    is.eq r2.pointer_i 0u8 into r469;
    is.eq r468 26u8 into r470;
    and r469 r470 into r471;
    add r2.pointer_i 1u8 into r472;
    ternary r471 0u8 r468 into r473;
    ternary r471 r472 r466 into r474;
    ternary r467 r473 r465 into r475;
    ternary r467 r474 r466 into r476;
    is.eq 21u8 r2.pointer_j into r477;
    add r2.pointer_j 1u8 into r478;
    is.eq r2.pointer_i 0u8 into r479;
    is.eq r478 26u8 into r480;
    and r479 r480 into r481;
    add r2.pointer_i 1u8 into r482;
    ternary r481 0u8 r478 into r483;
    ternary r481 r482 r476 into r484;
    ternary r477 r483 r475 into r485;
    ternary r477 r484 r476 into r486;
    is.eq 22u8 r2.pointer_j into r487;
    add r2.pointer_j 1u8 into r488;
    is.eq r2.pointer_i 0u8 into r489;
    is.eq r488 26u8 into r490;
    and r489 r490 into r491;
    add r2.pointer_i 1u8 into r492;
    ternary r491 0u8 r488 into r493;
    ternary r491 r492 r486 into r494;
    ternary r487 r493 r485 into r495;
    ternary r487 r494 r486 into r496;
    is.eq 23u8 r2.pointer_j into r497;
    add r2.pointer_j 1u8 into r498;
    is.eq r2.pointer_i 0u8 into r499;
    is.eq r498 26u8 into r500;
    and r499 r500 into r501;
    add r2.pointer_i 1u8 into r502;
    ternary r501 0u8 r498 into r503;
    ternary r501 r502 r496 into r504;
    ternary r497 r503 r495 into r505;
    ternary r497 r504 r496 into r506;
    is.eq 24u8 r2.pointer_j into r507;
    add r2.pointer_j 1u8 into r508;
    is.eq r2.pointer_i 0u8 into r509;
    is.eq r508 26u8 into r510;
    and r509 r510 into r511;
    add r2.pointer_i 1u8 into r512;
    ternary r511 0u8 r508 into r513;
    ternary r511 r512 r506 into r514;
    ternary r507 r513 r505 into r515;
    ternary r507 r514 r506 into r516;
    is.eq 25u8 r2.pointer_j into r517;
    add r2.pointer_j 1u8 into r518;
    is.eq r2.pointer_i 0u8 into r519;
    is.eq r518 26u8 into r520;
    and r519 r520 into r521;
    add r2.pointer_i 1u8 into r522;
    ternary r521 0u8 r518 into r523;
    ternary r521 r522 r516 into r524;
    ternary r517 r523 r515 into r525;
    ternary r517 r524 r516 into r526;
    ternary r266 r525 r264 into r527;
    ternary r266 r526 r265 into r528;
    is.eq 0u8 r528 into r529;
    is.eq 0u8 r527 into r530;
    add r527 1u8 into r531;
    is.eq r528 0u8 into r532;
    is.eq r531 26u8 into r533;
    and r532 r533 into r534;
    add r528 1u8 into r535;
    ternary r534 0u8 r531 into r536;
    ternary r534 r535 0u8 into r537;
    ternary r530 r2.deck[0u32][0u32] 0field into r538;
    ternary r530 r536 0u8 into r539;
    ternary r530 r537 0u8 into r540;
    is.eq 1u8 r527 into r541;
    add r527 1u8 into r542;
    is.eq r528 0u8 into r543;
    is.eq r542 26u8 into r544;
    and r543 r544 into r545;
    add r528 1u8 into r546;
    ternary r545 0u8 r542 into r547;
    ternary r545 r546 r540 into r548;
    ternary r541 r2.deck[0u32][1u32] r538 into r549;
    ternary r541 r547 r539 into r550;
    ternary r541 r548 r540 into r551;
    is.eq 2u8 r527 into r552;
    add r527 1u8 into r553;
    is.eq r528 0u8 into r554;
    is.eq r553 26u8 into r555;
    and r554 r555 into r556;
    add r528 1u8 into r557;
    ternary r556 0u8 r553 into r558;
    ternary r556 r557 r551 into r559;
    ternary r552 r2.deck[0u32][2u32] r549 into r560;
    ternary r552 r558 r550 into r561;
    ternary r552 r559 r551 into r562;
    is.eq 3u8 r527 into r563;
    add r527 1u8 into r564;
    is.eq r528 0u8 into r565;
    is.eq r564 26u8 into r566;
    and r565 r566 into r567;
    add r528 1u8 into r568;
    ternary r567 0u8 r564 into r569;
    ternary r567 r568 r562 into r570;
    ternary r563 r2.deck[0u32][3u32] r560 into r571;
    ternary r563 r569 r561 into r572;
    ternary r563 r570 r562 into r573;
    is.eq 4u8 r527 into r574;
    add r527 1u8 into r575;
    is.eq r528 0u8 into r576;
    is.eq r575 26u8 into r577;
    and r576 r577 into r578;
    add r528 1u8 into r579;
    ternary r578 0u8 r575 into r580;
    ternary r578 r579 r573 into r581;
    ternary r574 r2.deck[0u32][4u32] r571 into r582;
    ternary r574 r580 r572 into r583;
    ternary r574 r581 r573 into r584;
    is.eq 5u8 r527 into r585;
    add r527 1u8 into r586;
    is.eq r528 0u8 into r587;
    is.eq r586 26u8 into r588;
    and r587 r588 into r589;
    add r528 1u8 into r590;
    ternary r589 0u8 r586 into r591;
    ternary r589 r590 r584 into r592;
    ternary r585 r2.deck[0u32][5u32] r582 into r593;
    ternary r585 r591 r583 into r594;
    ternary r585 r592 r584 into r595;
    is.eq 6u8 r527 into r596;
    add r527 1u8 into r597;
    is.eq r528 0u8 into r598;
    is.eq r597 26u8 into r599;
    and r598 r599 into r600;
    add r528 1u8 into r601;
    ternary r600 0u8 r597 into r602;
    ternary r600 r601 r595 into r603;
    ternary r596 r2.deck[0u32][6u32] r593 into r604;
    ternary r596 r602 r594 into r605;
    ternary r596 r603 r595 into r606;
    is.eq 7u8 r527 into r607;
    add r527 1u8 into r608;
    is.eq r528 0u8 into r609;
    is.eq r608 26u8 into r610;
    and r609 r610 into r611;
    add r528 1u8 into r612;
    ternary r611 0u8 r608 into r613;
    ternary r611 r612 r606 into r614;
    ternary r607 r2.deck[0u32][7u32] r604 into r615;
    ternary r607 r613 r605 into r616;
    ternary r607 r614 r606 into r617;
    is.eq 8u8 r527 into r618;
    add r527 1u8 into r619;
    is.eq r528 0u8 into r620;
    is.eq r619 26u8 into r621;
    and r620 r621 into r622;
    add r528 1u8 into r623;
    ternary r622 0u8 r619 into r624;
    ternary r622 r623 r617 into r625;
    ternary r618 r2.deck[0u32][8u32] r615 into r626;
    ternary r618 r624 r616 into r627;
    ternary r618 r625 r617 into r628;
    is.eq 9u8 r527 into r629;
    add r527 1u8 into r630;
    is.eq r528 0u8 into r631;
    is.eq r630 26u8 into r632;
    and r631 r632 into r633;
    add r528 1u8 into r634;
    ternary r633 0u8 r630 into r635;
    ternary r633 r634 r628 into r636;
    ternary r629 r2.deck[0u32][9u32] r626 into r637;
    ternary r629 r635 r627 into r638;
    ternary r629 r636 r628 into r639;
    is.eq 10u8 r527 into r640;
    add r527 1u8 into r641;
    is.eq r528 0u8 into r642;
    is.eq r641 26u8 into r643;
    and r642 r643 into r644;
    add r528 1u8 into r645;
    ternary r644 0u8 r641 into r646;
    ternary r644 r645 r639 into r647;
    ternary r640 r2.deck[0u32][10u32] r637 into r648;
    ternary r640 r646 r638 into r649;
    ternary r640 r647 r639 into r650;
    is.eq 11u8 r527 into r651;
    add r527 1u8 into r652;
    is.eq r528 0u8 into r653;
    is.eq r652 26u8 into r654;
    and r653 r654 into r655;
    add r528 1u8 into r656;
    ternary r655 0u8 r652 into r657;
    ternary r655 r656 r650 into r658;
    ternary r651 r2.deck[0u32][11u32] r648 into r659;
    ternary r651 r657 r649 into r660;
    ternary r651 r658 r650 into r661;
    is.eq 12u8 r527 into r662;
    add r527 1u8 into r663;
    is.eq r528 0u8 into r664;
    is.eq r663 26u8 into r665;
    and r664 r665 into r666;
    add r528 1u8 into r667;
    ternary r666 0u8 r663 into r668;
    ternary r666 r667 r661 into r669;
    ternary r662 r2.deck[0u32][12u32] r659 into r670;
    ternary r662 r668 r660 into r671;
    ternary r662 r669 r661 into r672;
    is.eq 13u8 r527 into r673;
    add r527 1u8 into r674;
    is.eq r528 0u8 into r675;
    is.eq r674 26u8 into r676;
    and r675 r676 into r677;
    add r528 1u8 into r678;
    ternary r677 0u8 r674 into r679;
    ternary r677 r678 r672 into r680;
    ternary r673 r2.deck[0u32][13u32] r670 into r681;
    ternary r673 r679 r671 into r682;
    ternary r673 r680 r672 into r683;
    is.eq 14u8 r527 into r684;
    add r527 1u8 into r685;
    is.eq r528 0u8 into r686;
    is.eq r685 26u8 into r687;
    and r686 r687 into r688;
    add r528 1u8 into r689;
    ternary r688 0u8 r685 into r690;
    ternary r688 r689 r683 into r691;
    ternary r684 r2.deck[0u32][14u32] r681 into r692;
    ternary r684 r690 r682 into r693;
    ternary r684 r691 r683 into r694;
    is.eq 15u8 r527 into r695;
    add r527 1u8 into r696;
    is.eq r528 0u8 into r697;
    is.eq r696 26u8 into r698;
    and r697 r698 into r699;
    add r528 1u8 into r700;
    ternary r699 0u8 r696 into r701;
    ternary r699 r700 r694 into r702;
    ternary r695 r2.deck[0u32][15u32] r692 into r703;
    ternary r695 r701 r693 into r704;
    ternary r695 r702 r694 into r705;
    is.eq 16u8 r527 into r706;
    add r527 1u8 into r707;
    is.eq r528 0u8 into r708;
    is.eq r707 26u8 into r709;
    and r708 r709 into r710;
    add r528 1u8 into r711;
    ternary r710 0u8 r707 into r712;
    ternary r710 r711 r705 into r713;
    ternary r706 r2.deck[0u32][16u32] r703 into r714;
    ternary r706 r712 r704 into r715;
    ternary r706 r713 r705 into r716;
    is.eq 17u8 r527 into r717;
    add r527 1u8 into r718;
    is.eq r528 0u8 into r719;
    is.eq r718 26u8 into r720;
    and r719 r720 into r721;
    add r528 1u8 into r722;
    ternary r721 0u8 r718 into r723;
    ternary r721 r722 r716 into r724;
    ternary r717 r2.deck[0u32][17u32] r714 into r725;
    ternary r717 r723 r715 into r726;
    ternary r717 r724 r716 into r727;
    is.eq 18u8 r527 into r728;
    add r527 1u8 into r729;
    is.eq r528 0u8 into r730;
    is.eq r729 26u8 into r731;
    and r730 r731 into r732;
    add r528 1u8 into r733;
    ternary r732 0u8 r729 into r734;
    ternary r732 r733 r727 into r735;
    ternary r728 r2.deck[0u32][18u32] r725 into r736;
    ternary r728 r734 r726 into r737;
    ternary r728 r735 r727 into r738;
    is.eq 19u8 r527 into r739;
    add r527 1u8 into r740;
    is.eq r528 0u8 into r741;
    is.eq r740 26u8 into r742;
    and r741 r742 into r743;
    add r528 1u8 into r744;
    ternary r743 0u8 r740 into r745;
    ternary r743 r744 r738 into r746;
    ternary r739 r2.deck[0u32][19u32] r736 into r747;
    ternary r739 r745 r737 into r748;
    ternary r739 r746 r738 into r749;
    is.eq 20u8 r527 into r750;
    add r527 1u8 into r751;
    is.eq r528 0u8 into r752;
    is.eq r751 26u8 into r753;
    and r752 r753 into r754;
    add r528 1u8 into r755;
    ternary r754 0u8 r751 into r756;
    ternary r754 r755 r749 into r757;
    ternary r750 r2.deck[0u32][20u32] r747 into r758;
    ternary r750 r756 r748 into r759;
    ternary r750 r757 r749 into r760;
    is.eq 21u8 r527 into r761;
    add r527 1u8 into r762;
    is.eq r528 0u8 into r763;
    is.eq r762 26u8 into r764;
    and r763 r764 into r765;
    add r528 1u8 into r766;
    ternary r765 0u8 r762 into r767;
    ternary r765 r766 r760 into r768;
    ternary r761 r2.deck[0u32][21u32] r758 into r769;
    ternary r761 r767 r759 into r770;
    ternary r761 r768 r760 into r771;
    is.eq 22u8 r527 into r772;
    add r527 1u8 into r773;
    is.eq r528 0u8 into r774;
    is.eq r773 26u8 into r775;
    and r774 r775 into r776;
    add r528 1u8 into r777;
    ternary r776 0u8 r773 into r778;
    ternary r776 r777 r771 into r779;
    ternary r772 r2.deck[0u32][22u32] r769 into r780;
    ternary r772 r778 r770 into r781;
    ternary r772 r779 r771 into r782;
    is.eq 23u8 r527 into r783;
    add r527 1u8 into r784;
    is.eq r528 0u8 into r785;
    is.eq r784 26u8 into r786;
    and r785 r786 into r787;
    add r528 1u8 into r788;
    ternary r787 0u8 r784 into r789;
    ternary r787 r788 r782 into r790;
    ternary r783 r2.deck[0u32][23u32] r780 into r791;
    ternary r783 r789 r781 into r792;
    ternary r783 r790 r782 into r793;
    is.eq 24u8 r527 into r794;
    add r527 1u8 into r795;
    is.eq r528 0u8 into r796;
    is.eq r795 26u8 into r797;
    and r796 r797 into r798;
    add r528 1u8 into r799;
    ternary r798 0u8 r795 into r800;
    ternary r798 r799 r793 into r801;
    ternary r794 r2.deck[0u32][24u32] r791 into r802;
    ternary r794 r800 r792 into r803;
    ternary r794 r801 r793 into r804;
    is.eq 25u8 r527 into r805;
    add r527 1u8 into r806;
    is.eq r528 0u8 into r807;
    is.eq r806 26u8 into r808;
    and r807 r808 into r809;
    add r528 1u8 into r810;
    ternary r809 0u8 r806 into r811;
    ternary r809 r810 r804 into r812;
    ternary r805 r2.deck[0u32][25u32] r802 into r813;
    ternary r805 r811 r803 into r814;
    ternary r805 r812 r804 into r815;
    ternary r529 r813 0field into r816;
    ternary r529 r814 0u8 into r817;
    ternary r529 r815 0u8 into r818;
    is.eq 1u8 r528 into r819;
    is.eq 0u8 r527 into r820;
    add r527 1u8 into r821;
    is.eq r528 0u8 into r822;
    is.eq r821 26u8 into r823;
    and r822 r823 into r824;
    add r528 1u8 into r825;
    ternary r824 0u8 r821 into r826;
    ternary r824 r825 r818 into r827;
    ternary r820 r2.deck[1u32][0u32] r816 into r828;
    ternary r820 r826 r817 into r829;
    ternary r820 r827 r818 into r830;
    is.eq 1u8 r527 into r831;
    add r527 1u8 into r832;
    is.eq r528 0u8 into r833;
    is.eq r832 26u8 into r834;
    and r833 r834 into r835;
    add r528 1u8 into r836;
    ternary r835 0u8 r832 into r837;
    ternary r835 r836 r830 into r838;
    ternary r831 r2.deck[1u32][1u32] r828 into r839;
    ternary r831 r837 r829 into r840;
    ternary r831 r838 r830 into r841;
    is.eq 2u8 r527 into r842;
    add r527 1u8 into r843;
    is.eq r528 0u8 into r844;
    is.eq r843 26u8 into r845;
    and r844 r845 into r846;
    add r528 1u8 into r847;
    ternary r846 0u8 r843 into r848;
    ternary r846 r847 r841 into r849;
    ternary r842 r2.deck[1u32][2u32] r839 into r850;
    ternary r842 r848 r840 into r851;
    ternary r842 r849 r841 into r852;
    is.eq 3u8 r527 into r853;
    add r527 1u8 into r854;
    is.eq r528 0u8 into r855;
    is.eq r854 26u8 into r856;
    and r855 r856 into r857;
    add r528 1u8 into r858;
    ternary r857 0u8 r854 into r859;
    ternary r857 r858 r852 into r860;
    ternary r853 r2.deck[1u32][3u32] r850 into r861;
    ternary r853 r859 r851 into r862;
    ternary r853 r860 r852 into r863;
    is.eq 4u8 r527 into r864;
    add r527 1u8 into r865;
    is.eq r528 0u8 into r866;
    is.eq r865 26u8 into r867;
    and r866 r867 into r868;
    add r528 1u8 into r869;
    ternary r868 0u8 r865 into r870;
    ternary r868 r869 r863 into r871;
    ternary r864 r2.deck[1u32][4u32] r861 into r872;
    ternary r864 r870 r862 into r873;
    ternary r864 r871 r863 into r874;
    is.eq 5u8 r527 into r875;
    add r527 1u8 into r876;
    is.eq r528 0u8 into r877;
    is.eq r876 26u8 into r878;
    and r877 r878 into r879;
    add r528 1u8 into r880;
    ternary r879 0u8 r876 into r881;
    ternary r879 r880 r874 into r882;
    ternary r875 r2.deck[1u32][5u32] r872 into r883;
    ternary r875 r881 r873 into r884;
    ternary r875 r882 r874 into r885;
    is.eq 6u8 r527 into r886;
    add r527 1u8 into r887;
    is.eq r528 0u8 into r888;
    is.eq r887 26u8 into r889;
    and r888 r889 into r890;
    add r528 1u8 into r891;
    ternary r890 0u8 r887 into r892;
    ternary r890 r891 r885 into r893;
    ternary r886 r2.deck[1u32][6u32] r883 into r894;
    ternary r886 r892 r884 into r895;
    ternary r886 r893 r885 into r896;
    is.eq 7u8 r527 into r897;
    add r527 1u8 into r898;
    is.eq r528 0u8 into r899;
    is.eq r898 26u8 into r900;
    and r899 r900 into r901;
    add r528 1u8 into r902;
    ternary r901 0u8 r898 into r903;
    ternary r901 r902 r896 into r904;
    ternary r897 r2.deck[1u32][7u32] r894 into r905;
    ternary r897 r903 r895 into r906;
    ternary r897 r904 r896 into r907;
    is.eq 8u8 r527 into r908;
    add r527 1u8 into r909;
    is.eq r528 0u8 into r910;
    is.eq r909 26u8 into r911;
    and r910 r911 into r912;
    add r528 1u8 into r913;
    ternary r912 0u8 r909 into r914;
    ternary r912 r913 r907 into r915;
    ternary r908 r2.deck[1u32][8u32] r905 into r916;
    ternary r908 r914 r906 into r917;
    ternary r908 r915 r907 into r918;
    is.eq 9u8 r527 into r919;
    add r527 1u8 into r920;
    is.eq r528 0u8 into r921;
    is.eq r920 26u8 into r922;
    and r921 r922 into r923;
    add r528 1u8 into r924;
    ternary r923 0u8 r920 into r925;
    ternary r923 r924 r918 into r926;
    ternary r919 r2.deck[1u32][9u32] r916 into r927;
    ternary r919 r925 r917 into r928;
    ternary r919 r926 r918 into r929;
    is.eq 10u8 r527 into r930;
    add r527 1u8 into r931;
    is.eq r528 0u8 into r932;
    is.eq r931 26u8 into r933;
    and r932 r933 into r934;
    add r528 1u8 into r935;
    ternary r934 0u8 r931 into r936;
    ternary r934 r935 r929 into r937;
    ternary r930 r2.deck[1u32][10u32] r927 into r938;
    ternary r930 r936 r928 into r939;
    ternary r930 r937 r929 into r940;
    is.eq 11u8 r527 into r941;
    add r527 1u8 into r942;
    is.eq r528 0u8 into r943;
    is.eq r942 26u8 into r944;
    and r943 r944 into r945;
    add r528 1u8 into r946;
    ternary r945 0u8 r942 into r947;
    ternary r945 r946 r940 into r948;
    ternary r941 r2.deck[1u32][11u32] r938 into r949;
    ternary r941 r947 r939 into r950;
    ternary r941 r948 r940 into r951;
    is.eq 12u8 r527 into r952;
    add r527 1u8 into r953;
    is.eq r528 0u8 into r954;
    is.eq r953 26u8 into r955;
    and r954 r955 into r956;
    add r528 1u8 into r957;
    ternary r956 0u8 r953 into r958;
    ternary r956 r957 r951 into r959;
    ternary r952 r2.deck[1u32][12u32] r949 into r960;
    ternary r952 r958 r950 into r961;
    ternary r952 r959 r951 into r962;
    is.eq 13u8 r527 into r963;
    add r527 1u8 into r964;
    is.eq r528 0u8 into r965;
    is.eq r964 26u8 into r966;
    and r965 r966 into r967;
    add r528 1u8 into r968;
    ternary r967 0u8 r964 into r969;
    ternary r967 r968 r962 into r970;
    ternary r963 r2.deck[1u32][13u32] r960 into r971;
    ternary r963 r969 r961 into r972;
    ternary r963 r970 r962 into r973;
    is.eq 14u8 r527 into r974;
    add r527 1u8 into r975;
    is.eq r528 0u8 into r976;
    is.eq r975 26u8 into r977;
    and r976 r977 into r978;
    add r528 1u8 into r979;
    ternary r978 0u8 r975 into r980;
    ternary r978 r979 r973 into r981;
    ternary r974 r2.deck[1u32][14u32] r971 into r982;
    ternary r974 r980 r972 into r983;
    ternary r974 r981 r973 into r984;
    is.eq 15u8 r527 into r985;
    add r527 1u8 into r986;
    is.eq r528 0u8 into r987;
    is.eq r986 26u8 into r988;
    and r987 r988 into r989;
    add r528 1u8 into r990;
    ternary r989 0u8 r986 into r991;
    ternary r989 r990 r984 into r992;
    ternary r985 r2.deck[1u32][15u32] r982 into r993;
    ternary r985 r991 r983 into r994;
    ternary r985 r992 r984 into r995;
    is.eq 16u8 r527 into r996;
    add r527 1u8 into r997;
    is.eq r528 0u8 into r998;
    is.eq r997 26u8 into r999;
    and r998 r999 into r1000;
    add r528 1u8 into r1001;
    ternary r1000 0u8 r997 into r1002;
    ternary r1000 r1001 r995 into r1003;
    ternary r996 r2.deck[1u32][16u32] r993 into r1004;
    ternary r996 r1002 r994 into r1005;
    ternary r996 r1003 r995 into r1006;
    is.eq 17u8 r527 into r1007;
    add r527 1u8 into r1008;
    is.eq r528 0u8 into r1009;
    is.eq r1008 26u8 into r1010;
    and r1009 r1010 into r1011;
    add r528 1u8 into r1012;
    ternary r1011 0u8 r1008 into r1013;
    ternary r1011 r1012 r1006 into r1014;
    ternary r1007 r2.deck[1u32][17u32] r1004 into r1015;
    ternary r1007 r1013 r1005 into r1016;
    ternary r1007 r1014 r1006 into r1017;
    is.eq 18u8 r527 into r1018;
    add r527 1u8 into r1019;
    is.eq r528 0u8 into r1020;
    is.eq r1019 26u8 into r1021;
    and r1020 r1021 into r1022;
    add r528 1u8 into r1023;
    ternary r1022 0u8 r1019 into r1024;
    ternary r1022 r1023 r1017 into r1025;
    ternary r1018 r2.deck[1u32][18u32] r1015 into r1026;
    ternary r1018 r1024 r1016 into r1027;
    ternary r1018 r1025 r1017 into r1028;
    is.eq 19u8 r527 into r1029;
    add r527 1u8 into r1030;
    is.eq r528 0u8 into r1031;
    is.eq r1030 26u8 into r1032;
    and r1031 r1032 into r1033;
    add r528 1u8 into r1034;
    ternary r1033 0u8 r1030 into r1035;
    ternary r1033 r1034 r1028 into r1036;
    ternary r1029 r2.deck[1u32][19u32] r1026 into r1037;
    ternary r1029 r1035 r1027 into r1038;
    ternary r1029 r1036 r1028 into r1039;
    is.eq 20u8 r527 into r1040;
    add r527 1u8 into r1041;
    is.eq r528 0u8 into r1042;
    is.eq r1041 26u8 into r1043;
    and r1042 r1043 into r1044;
    add r528 1u8 into r1045;
    ternary r1044 0u8 r1041 into r1046;
    ternary r1044 r1045 r1039 into r1047;
    ternary r1040 r2.deck[1u32][20u32] r1037 into r1048;
    ternary r1040 r1046 r1038 into r1049;
    ternary r1040 r1047 r1039 into r1050;
    is.eq 21u8 r527 into r1051;
    add r527 1u8 into r1052;
    is.eq r528 0u8 into r1053;
    is.eq r1052 26u8 into r1054;
    and r1053 r1054 into r1055;
    add r528 1u8 into r1056;
    ternary r1055 0u8 r1052 into r1057;
    ternary r1055 r1056 r1050 into r1058;
    ternary r1051 r2.deck[1u32][21u32] r1048 into r1059;
    ternary r1051 r1057 r1049 into r1060;
    ternary r1051 r1058 r1050 into r1061;
    is.eq 22u8 r527 into r1062;
    add r527 1u8 into r1063;
    is.eq r528 0u8 into r1064;
    is.eq r1063 26u8 into r1065;
    and r1064 r1065 into r1066;
    add r528 1u8 into r1067;
    ternary r1066 0u8 r1063 into r1068;
    ternary r1066 r1067 r1061 into r1069;
    ternary r1062 r2.deck[1u32][22u32] r1059 into r1070;
    ternary r1062 r1068 r1060 into r1071;
    ternary r1062 r1069 r1061 into r1072;
    is.eq 23u8 r527 into r1073;
    add r527 1u8 into r1074;
    is.eq r528 0u8 into r1075;
    is.eq r1074 26u8 into r1076;
    and r1075 r1076 into r1077;
    add r528 1u8 into r1078;
    ternary r1077 0u8 r1074 into r1079;
    ternary r1077 r1078 r1072 into r1080;
    ternary r1073 r2.deck[1u32][23u32] r1070 into r1081;
    ternary r1073 r1079 r1071 into r1082;
    ternary r1073 r1080 r1072 into r1083;
    is.eq 24u8 r527 into r1084;
    add r527 1u8 into r1085;
    is.eq r528 0u8 into r1086;
    is.eq r1085 26u8 into r1087;
    and r1086 r1087 into r1088;
    add r528 1u8 into r1089;
    ternary r1088 0u8 r1085 into r1090;
    ternary r1088 r1089 r1083 into r1091;
    ternary r1084 r2.deck[1u32][24u32] r1081 into r1092;
    ternary r1084 r1090 r1082 into r1093;
    ternary r1084 r1091 r1083 into r1094;
    is.eq 25u8 r527 into r1095;
    add r527 1u8 into r1096;
    is.eq r528 0u8 into r1097;
    is.eq r1096 26u8 into r1098;
    and r1097 r1098 into r1099;
    add r528 1u8 into r1100;
    ternary r1099 0u8 r1096 into r1101;
    ternary r1099 r1100 r1094 into r1102;
    ternary r1095 r2.deck[1u32][25u32] r1092 into r1103;
    ternary r1095 r1101 r1093 into r1104;
    ternary r1095 r1102 r1094 into r1105;
    ternary r819 r1103 r816 into r1106;
    ternary r819 r1104 r817 into r1107;
    ternary r819 r1105 r818 into r1108;
    is.eq 0u8 r1108 into r1109;
    is.eq 0u8 r1107 into r1110;
    add r1107 1u8 into r1111;
    is.eq r1108 0u8 into r1112;
    is.eq r1111 26u8 into r1113;
    and r1112 r1113 into r1114;
    add r1108 1u8 into r1115;
    ternary r1114 0u8 r1111 into r1116;
    ternary r1114 r1115 0u8 into r1117;
    ternary r1110 r2.deck[0u32][0u32] 0field into r1118;
    ternary r1110 r1116 0u8 into r1119;
    ternary r1110 r1117 0u8 into r1120;
    is.eq 1u8 r1107 into r1121;
    add r1107 1u8 into r1122;
    is.eq r1108 0u8 into r1123;
    is.eq r1122 26u8 into r1124;
    and r1123 r1124 into r1125;
    add r1108 1u8 into r1126;
    ternary r1125 0u8 r1122 into r1127;
    ternary r1125 r1126 r1120 into r1128;
    ternary r1121 r2.deck[0u32][1u32] r1118 into r1129;
    ternary r1121 r1127 r1119 into r1130;
    ternary r1121 r1128 r1120 into r1131;
    is.eq 2u8 r1107 into r1132;
    add r1107 1u8 into r1133;
    is.eq r1108 0u8 into r1134;
    is.eq r1133 26u8 into r1135;
    and r1134 r1135 into r1136;
    add r1108 1u8 into r1137;
    ternary r1136 0u8 r1133 into r1138;
    ternary r1136 r1137 r1131 into r1139;
    ternary r1132 r2.deck[0u32][2u32] r1129 into r1140;
    ternary r1132 r1138 r1130 into r1141;
    ternary r1132 r1139 r1131 into r1142;
    is.eq 3u8 r1107 into r1143;
    add r1107 1u8 into r1144;
    is.eq r1108 0u8 into r1145;
    is.eq r1144 26u8 into r1146;
    and r1145 r1146 into r1147;
    add r1108 1u8 into r1148;
    ternary r1147 0u8 r1144 into r1149;
    ternary r1147 r1148 r1142 into r1150;
    ternary r1143 r2.deck[0u32][3u32] r1140 into r1151;
    ternary r1143 r1149 r1141 into r1152;
    ternary r1143 r1150 r1142 into r1153;
    is.eq 4u8 r1107 into r1154;
    add r1107 1u8 into r1155;
    is.eq r1108 0u8 into r1156;
    is.eq r1155 26u8 into r1157;
    and r1156 r1157 into r1158;
    add r1108 1u8 into r1159;
    ternary r1158 0u8 r1155 into r1160;
    ternary r1158 r1159 r1153 into r1161;
    ternary r1154 r2.deck[0u32][4u32] r1151 into r1162;
    ternary r1154 r1160 r1152 into r1163;
    ternary r1154 r1161 r1153 into r1164;
    is.eq 5u8 r1107 into r1165;
    add r1107 1u8 into r1166;
    is.eq r1108 0u8 into r1167;
    is.eq r1166 26u8 into r1168;
    and r1167 r1168 into r1169;
    add r1108 1u8 into r1170;
    ternary r1169 0u8 r1166 into r1171;
    ternary r1169 r1170 r1164 into r1172;
    ternary r1165 r2.deck[0u32][5u32] r1162 into r1173;
    ternary r1165 r1171 r1163 into r1174;
    ternary r1165 r1172 r1164 into r1175;
    is.eq 6u8 r1107 into r1176;
    add r1107 1u8 into r1177;
    is.eq r1108 0u8 into r1178;
    is.eq r1177 26u8 into r1179;
    and r1178 r1179 into r1180;
    add r1108 1u8 into r1181;
    ternary r1180 0u8 r1177 into r1182;
    ternary r1180 r1181 r1175 into r1183;
    ternary r1176 r2.deck[0u32][6u32] r1173 into r1184;
    ternary r1176 r1182 r1174 into r1185;
    ternary r1176 r1183 r1175 into r1186;
    is.eq 7u8 r1107 into r1187;
    add r1107 1u8 into r1188;
    is.eq r1108 0u8 into r1189;
    is.eq r1188 26u8 into r1190;
    and r1189 r1190 into r1191;
    add r1108 1u8 into r1192;
    ternary r1191 0u8 r1188 into r1193;
    ternary r1191 r1192 r1186 into r1194;
    ternary r1187 r2.deck[0u32][7u32] r1184 into r1195;
    ternary r1187 r1193 r1185 into r1196;
    ternary r1187 r1194 r1186 into r1197;
    is.eq 8u8 r1107 into r1198;
    add r1107 1u8 into r1199;
    is.eq r1108 0u8 into r1200;
    is.eq r1199 26u8 into r1201;
    and r1200 r1201 into r1202;
    add r1108 1u8 into r1203;
    ternary r1202 0u8 r1199 into r1204;
    ternary r1202 r1203 r1197 into r1205;
    ternary r1198 r2.deck[0u32][8u32] r1195 into r1206;
    ternary r1198 r1204 r1196 into r1207;
    ternary r1198 r1205 r1197 into r1208;
    is.eq 9u8 r1107 into r1209;
    add r1107 1u8 into r1210;
    is.eq r1108 0u8 into r1211;
    is.eq r1210 26u8 into r1212;
    and r1211 r1212 into r1213;
    add r1108 1u8 into r1214;
    ternary r1213 0u8 r1210 into r1215;
    ternary r1213 r1214 r1208 into r1216;
    ternary r1209 r2.deck[0u32][9u32] r1206 into r1217;
    ternary r1209 r1215 r1207 into r1218;
    ternary r1209 r1216 r1208 into r1219;
    is.eq 10u8 r1107 into r1220;
    add r1107 1u8 into r1221;
    is.eq r1108 0u8 into r1222;
    is.eq r1221 26u8 into r1223;
    and r1222 r1223 into r1224;
    add r1108 1u8 into r1225;
    ternary r1224 0u8 r1221 into r1226;
    ternary r1224 r1225 r1219 into r1227;
    ternary r1220 r2.deck[0u32][10u32] r1217 into r1228;
    ternary r1220 r1226 r1218 into r1229;
    ternary r1220 r1227 r1219 into r1230;
    is.eq 11u8 r1107 into r1231;
    add r1107 1u8 into r1232;
    is.eq r1108 0u8 into r1233;
    is.eq r1232 26u8 into r1234;
    and r1233 r1234 into r1235;
    add r1108 1u8 into r1236;
    ternary r1235 0u8 r1232 into r1237;
    ternary r1235 r1236 r1230 into r1238;
    ternary r1231 r2.deck[0u32][11u32] r1228 into r1239;
    ternary r1231 r1237 r1229 into r1240;
    ternary r1231 r1238 r1230 into r1241;
    is.eq 12u8 r1107 into r1242;
    add r1107 1u8 into r1243;
    is.eq r1108 0u8 into r1244;
    is.eq r1243 26u8 into r1245;
    and r1244 r1245 into r1246;
    add r1108 1u8 into r1247;
    ternary r1246 0u8 r1243 into r1248;
    ternary r1246 r1247 r1241 into r1249;
    ternary r1242 r2.deck[0u32][12u32] r1239 into r1250;
    ternary r1242 r1248 r1240 into r1251;
    ternary r1242 r1249 r1241 into r1252;
    is.eq 13u8 r1107 into r1253;
    add r1107 1u8 into r1254;
    is.eq r1108 0u8 into r1255;
    is.eq r1254 26u8 into r1256;
    and r1255 r1256 into r1257;
    add r1108 1u8 into r1258;
    ternary r1257 0u8 r1254 into r1259;
    ternary r1257 r1258 r1252 into r1260;
    ternary r1253 r2.deck[0u32][13u32] r1250 into r1261;
    ternary r1253 r1259 r1251 into r1262;
    ternary r1253 r1260 r1252 into r1263;
    is.eq 14u8 r1107 into r1264;
    add r1107 1u8 into r1265;
    is.eq r1108 0u8 into r1266;
    is.eq r1265 26u8 into r1267;
    and r1266 r1267 into r1268;
    add r1108 1u8 into r1269;
    ternary r1268 0u8 r1265 into r1270;
    ternary r1268 r1269 r1263 into r1271;
    ternary r1264 r2.deck[0u32][14u32] r1261 into r1272;
    ternary r1264 r1270 r1262 into r1273;
    ternary r1264 r1271 r1263 into r1274;
    is.eq 15u8 r1107 into r1275;
    add r1107 1u8 into r1276;
    is.eq r1108 0u8 into r1277;
    is.eq r1276 26u8 into r1278;
    and r1277 r1278 into r1279;
    add r1108 1u8 into r1280;
    ternary r1279 0u8 r1276 into r1281;
    ternary r1279 r1280 r1274 into r1282;
    ternary r1275 r2.deck[0u32][15u32] r1272 into r1283;
    ternary r1275 r1281 r1273 into r1284;
    ternary r1275 r1282 r1274 into r1285;
    is.eq 16u8 r1107 into r1286;
    add r1107 1u8 into r1287;
    is.eq r1108 0u8 into r1288;
    is.eq r1287 26u8 into r1289;
    and r1288 r1289 into r1290;
    add r1108 1u8 into r1291;
    ternary r1290 0u8 r1287 into r1292;
    ternary r1290 r1291 r1285 into r1293;
    ternary r1286 r2.deck[0u32][16u32] r1283 into r1294;
    ternary r1286 r1292 r1284 into r1295;
    ternary r1286 r1293 r1285 into r1296;
    is.eq 17u8 r1107 into r1297;
    add r1107 1u8 into r1298;
    is.eq r1108 0u8 into r1299;
    is.eq r1298 26u8 into r1300;
    and r1299 r1300 into r1301;
    add r1108 1u8 into r1302;
    ternary r1301 0u8 r1298 into r1303;
    ternary r1301 r1302 r1296 into r1304;
    ternary r1297 r2.deck[0u32][17u32] r1294 into r1305;
    ternary r1297 r1303 r1295 into r1306;
    ternary r1297 r1304 r1296 into r1307;
    is.eq 18u8 r1107 into r1308;
    add r1107 1u8 into r1309;
    is.eq r1108 0u8 into r1310;
    is.eq r1309 26u8 into r1311;
    and r1310 r1311 into r1312;
    add r1108 1u8 into r1313;
    ternary r1312 0u8 r1309 into r1314;
    ternary r1312 r1313 r1307 into r1315;
    ternary r1308 r2.deck[0u32][18u32] r1305 into r1316;
    ternary r1308 r1314 r1306 into r1317;
    ternary r1308 r1315 r1307 into r1318;
    is.eq 19u8 r1107 into r1319;
    add r1107 1u8 into r1320;
    is.eq r1108 0u8 into r1321;
    is.eq r1320 26u8 into r1322;
    and r1321 r1322 into r1323;
    add r1108 1u8 into r1324;
    ternary r1323 0u8 r1320 into r1325;
    ternary r1323 r1324 r1318 into r1326;
    ternary r1319 r2.deck[0u32][19u32] r1316 into r1327;
    ternary r1319 r1325 r1317 into r1328;
    ternary r1319 r1326 r1318 into r1329;
    is.eq 20u8 r1107 into r1330;
    add r1107 1u8 into r1331;
    is.eq r1108 0u8 into r1332;
    is.eq r1331 26u8 into r1333;
    and r1332 r1333 into r1334;
    add r1108 1u8 into r1335;
    ternary r1334 0u8 r1331 into r1336;
    ternary r1334 r1335 r1329 into r1337;
    ternary r1330 r2.deck[0u32][20u32] r1327 into r1338;
    ternary r1330 r1336 r1328 into r1339;
    ternary r1330 r1337 r1329 into r1340;
    is.eq 21u8 r1107 into r1341;
    add r1107 1u8 into r1342;
    is.eq r1108 0u8 into r1343;
    is.eq r1342 26u8 into r1344;
    and r1343 r1344 into r1345;
    add r1108 1u8 into r1346;
    ternary r1345 0u8 r1342 into r1347;
    ternary r1345 r1346 r1340 into r1348;
    ternary r1341 r2.deck[0u32][21u32] r1338 into r1349;
    ternary r1341 r1347 r1339 into r1350;
    ternary r1341 r1348 r1340 into r1351;
    is.eq 22u8 r1107 into r1352;
    add r1107 1u8 into r1353;
    is.eq r1108 0u8 into r1354;
    is.eq r1353 26u8 into r1355;
    and r1354 r1355 into r1356;
    add r1108 1u8 into r1357;
    ternary r1356 0u8 r1353 into r1358;
    ternary r1356 r1357 r1351 into r1359;
    ternary r1352 r2.deck[0u32][22u32] r1349 into r1360;
    ternary r1352 r1358 r1350 into r1361;
    ternary r1352 r1359 r1351 into r1362;
    is.eq 23u8 r1107 into r1363;
    add r1107 1u8 into r1364;
    is.eq r1108 0u8 into r1365;
    is.eq r1364 26u8 into r1366;
    and r1365 r1366 into r1367;
    add r1108 1u8 into r1368;
    ternary r1367 0u8 r1364 into r1369;
    ternary r1367 r1368 r1362 into r1370;
    ternary r1363 r2.deck[0u32][23u32] r1360 into r1371;
    ternary r1363 r1369 r1361 into r1372;
    ternary r1363 r1370 r1362 into r1373;
    is.eq 24u8 r1107 into r1374;
    add r1107 1u8 into r1375;
    is.eq r1108 0u8 into r1376;
    is.eq r1375 26u8 into r1377;
    and r1376 r1377 into r1378;
    add r1108 1u8 into r1379;
    ternary r1378 0u8 r1375 into r1380;
    ternary r1378 r1379 r1373 into r1381;
    ternary r1374 r2.deck[0u32][24u32] r1371 into r1382;
    ternary r1374 r1380 r1372 into r1383;
    ternary r1374 r1381 r1373 into r1384;
    is.eq 25u8 r1107 into r1385;
    add r1107 1u8 into r1386;
    is.eq r1108 0u8 into r1387;
    is.eq r1386 26u8 into r1388;
    and r1387 r1388 into r1389;
    add r1108 1u8 into r1390;
    ternary r1389 0u8 r1386 into r1391;
    ternary r1389 r1390 r1384 into r1392;
    ternary r1385 r2.deck[0u32][25u32] r1382 into r1393;
    ternary r1385 r1391 r1383 into r1394;
    ternary r1385 r1392 r1384 into r1395;
    ternary r1109 r1393 0field into r1396;
    ternary r1109 r1394 0u8 into r1397;
    ternary r1109 r1395 0u8 into r1398;
    is.eq 1u8 r1108 into r1399;
    is.eq 0u8 r1107 into r1400;
    add r1107 1u8 into r1401;
    is.eq r1108 0u8 into r1402;
    is.eq r1401 26u8 into r1403;
    and r1402 r1403 into r1404;
    add r1108 1u8 into r1405;
    ternary r1404 0u8 r1401 into r1406;
    ternary r1404 r1405 r1398 into r1407;
    ternary r1400 r2.deck[1u32][0u32] r1396 into r1408;
    ternary r1400 r1406 r1397 into r1409;
    ternary r1400 r1407 r1398 into r1410;
    is.eq 1u8 r1107 into r1411;
    add r1107 1u8 into r1412;
    is.eq r1108 0u8 into r1413;
    is.eq r1412 26u8 into r1414;
    and r1413 r1414 into r1415;
    add r1108 1u8 into r1416;
    ternary r1415 0u8 r1412 into r1417;
    ternary r1415 r1416 r1410 into r1418;
    ternary r1411 r2.deck[1u32][1u32] r1408 into r1419;
    ternary r1411 r1417 r1409 into r1420;
    ternary r1411 r1418 r1410 into r1421;
    is.eq 2u8 r1107 into r1422;
    add r1107 1u8 into r1423;
    is.eq r1108 0u8 into r1424;
    is.eq r1423 26u8 into r1425;
    and r1424 r1425 into r1426;
    add r1108 1u8 into r1427;
    ternary r1426 0u8 r1423 into r1428;
    ternary r1426 r1427 r1421 into r1429;
    ternary r1422 r2.deck[1u32][2u32] r1419 into r1430;
    ternary r1422 r1428 r1420 into r1431;
    ternary r1422 r1429 r1421 into r1432;
    is.eq 3u8 r1107 into r1433;
    add r1107 1u8 into r1434;
    is.eq r1108 0u8 into r1435;
    is.eq r1434 26u8 into r1436;
    and r1435 r1436 into r1437;
    add r1108 1u8 into r1438;
    ternary r1437 0u8 r1434 into r1439;
    ternary r1437 r1438 r1432 into r1440;
    ternary r1433 r2.deck[1u32][3u32] r1430 into r1441;
    ternary r1433 r1439 r1431 into r1442;
    ternary r1433 r1440 r1432 into r1443;
    is.eq 4u8 r1107 into r1444;
    add r1107 1u8 into r1445;
    is.eq r1108 0u8 into r1446;
    is.eq r1445 26u8 into r1447;
    and r1446 r1447 into r1448;
    add r1108 1u8 into r1449;
    ternary r1448 0u8 r1445 into r1450;
    ternary r1448 r1449 r1443 into r1451;
    ternary r1444 r2.deck[1u32][4u32] r1441 into r1452;
    ternary r1444 r1450 r1442 into r1453;
    ternary r1444 r1451 r1443 into r1454;
    is.eq 5u8 r1107 into r1455;
    add r1107 1u8 into r1456;
    is.eq r1108 0u8 into r1457;
    is.eq r1456 26u8 into r1458;
    and r1457 r1458 into r1459;
    add r1108 1u8 into r1460;
    ternary r1459 0u8 r1456 into r1461;
    ternary r1459 r1460 r1454 into r1462;
    ternary r1455 r2.deck[1u32][5u32] r1452 into r1463;
    ternary r1455 r1461 r1453 into r1464;
    ternary r1455 r1462 r1454 into r1465;
    is.eq 6u8 r1107 into r1466;
    add r1107 1u8 into r1467;
    is.eq r1108 0u8 into r1468;
    is.eq r1467 26u8 into r1469;
    and r1468 r1469 into r1470;
    add r1108 1u8 into r1471;
    ternary r1470 0u8 r1467 into r1472;
    ternary r1470 r1471 r1465 into r1473;
    ternary r1466 r2.deck[1u32][6u32] r1463 into r1474;
    ternary r1466 r1472 r1464 into r1475;
    ternary r1466 r1473 r1465 into r1476;
    is.eq 7u8 r1107 into r1477;
    add r1107 1u8 into r1478;
    is.eq r1108 0u8 into r1479;
    is.eq r1478 26u8 into r1480;
    and r1479 r1480 into r1481;
    add r1108 1u8 into r1482;
    ternary r1481 0u8 r1478 into r1483;
    ternary r1481 r1482 r1476 into r1484;
    ternary r1477 r2.deck[1u32][7u32] r1474 into r1485;
    ternary r1477 r1483 r1475 into r1486;
    ternary r1477 r1484 r1476 into r1487;
    is.eq 8u8 r1107 into r1488;
    add r1107 1u8 into r1489;
    is.eq r1108 0u8 into r1490;
    is.eq r1489 26u8 into r1491;
    and r1490 r1491 into r1492;
    add r1108 1u8 into r1493;
    ternary r1492 0u8 r1489 into r1494;
    ternary r1492 r1493 r1487 into r1495;
    ternary r1488 r2.deck[1u32][8u32] r1485 into r1496;
    ternary r1488 r1494 r1486 into r1497;
    ternary r1488 r1495 r1487 into r1498;
    is.eq 9u8 r1107 into r1499;
    add r1107 1u8 into r1500;
    is.eq r1108 0u8 into r1501;
    is.eq r1500 26u8 into r1502;
    and r1501 r1502 into r1503;
    add r1108 1u8 into r1504;
    ternary r1503 0u8 r1500 into r1505;
    ternary r1503 r1504 r1498 into r1506;
    ternary r1499 r2.deck[1u32][9u32] r1496 into r1507;
    ternary r1499 r1505 r1497 into r1508;
    ternary r1499 r1506 r1498 into r1509;
    is.eq 10u8 r1107 into r1510;
    add r1107 1u8 into r1511;
    is.eq r1108 0u8 into r1512;
    is.eq r1511 26u8 into r1513;
    and r1512 r1513 into r1514;
    add r1108 1u8 into r1515;
    ternary r1514 0u8 r1511 into r1516;
    ternary r1514 r1515 r1509 into r1517;
    ternary r1510 r2.deck[1u32][10u32] r1507 into r1518;
    ternary r1510 r1516 r1508 into r1519;
    ternary r1510 r1517 r1509 into r1520;
    is.eq 11u8 r1107 into r1521;
    add r1107 1u8 into r1522;
    is.eq r1108 0u8 into r1523;
    is.eq r1522 26u8 into r1524;
    and r1523 r1524 into r1525;
    add r1108 1u8 into r1526;
    ternary r1525 0u8 r1522 into r1527;
    ternary r1525 r1526 r1520 into r1528;
    ternary r1521 r2.deck[1u32][11u32] r1518 into r1529;
    ternary r1521 r1527 r1519 into r1530;
    ternary r1521 r1528 r1520 into r1531;
    is.eq 12u8 r1107 into r1532;
    add r1107 1u8 into r1533;
    is.eq r1108 0u8 into r1534;
    is.eq r1533 26u8 into r1535;
    and r1534 r1535 into r1536;
    add r1108 1u8 into r1537;
    ternary r1536 0u8 r1533 into r1538;
    ternary r1536 r1537 r1531 into r1539;
    ternary r1532 r2.deck[1u32][12u32] r1529 into r1540;
    ternary r1532 r1538 r1530 into r1541;
    ternary r1532 r1539 r1531 into r1542;
    is.eq 13u8 r1107 into r1543;
    add r1107 1u8 into r1544;
    is.eq r1108 0u8 into r1545;
    is.eq r1544 26u8 into r1546;
    and r1545 r1546 into r1547;
    add r1108 1u8 into r1548;
    ternary r1547 0u8 r1544 into r1549;
    ternary r1547 r1548 r1542 into r1550;
    ternary r1543 r2.deck[1u32][13u32] r1540 into r1551;
    ternary r1543 r1549 r1541 into r1552;
    ternary r1543 r1550 r1542 into r1553;
    is.eq 14u8 r1107 into r1554;
    add r1107 1u8 into r1555;
    is.eq r1108 0u8 into r1556;
    is.eq r1555 26u8 into r1557;
    and r1556 r1557 into r1558;
    add r1108 1u8 into r1559;
    ternary r1558 0u8 r1555 into r1560;
    ternary r1558 r1559 r1553 into r1561;
    ternary r1554 r2.deck[1u32][14u32] r1551 into r1562;
    ternary r1554 r1560 r1552 into r1563;
    ternary r1554 r1561 r1553 into r1564;
    is.eq 15u8 r1107 into r1565;
    add r1107 1u8 into r1566;
    is.eq r1108 0u8 into r1567;
    is.eq r1566 26u8 into r1568;
    and r1567 r1568 into r1569;
    add r1108 1u8 into r1570;
    ternary r1569 0u8 r1566 into r1571;
    ternary r1569 r1570 r1564 into r1572;
    ternary r1565 r2.deck[1u32][15u32] r1562 into r1573;
    ternary r1565 r1571 r1563 into r1574;
    ternary r1565 r1572 r1564 into r1575;
    is.eq 16u8 r1107 into r1576;
    add r1107 1u8 into r1577;
    is.eq r1108 0u8 into r1578;
    is.eq r1577 26u8 into r1579;
    and r1578 r1579 into r1580;
    add r1108 1u8 into r1581;
    ternary r1580 0u8 r1577 into r1582;
    ternary r1580 r1581 r1575 into r1583;
    ternary r1576 r2.deck[1u32][16u32] r1573 into r1584;
    ternary r1576 r1582 r1574 into r1585;
    ternary r1576 r1583 r1575 into r1586;
    is.eq 17u8 r1107 into r1587;
    add r1107 1u8 into r1588;
    is.eq r1108 0u8 into r1589;
    is.eq r1588 26u8 into r1590;
    and r1589 r1590 into r1591;
    add r1108 1u8 into r1592;
    ternary r1591 0u8 r1588 into r1593;
    ternary r1591 r1592 r1586 into r1594;
    ternary r1587 r2.deck[1u32][17u32] r1584 into r1595;
    ternary r1587 r1593 r1585 into r1596;
    ternary r1587 r1594 r1586 into r1597;
    is.eq 18u8 r1107 into r1598;
    add r1107 1u8 into r1599;
    is.eq r1108 0u8 into r1600;
    is.eq r1599 26u8 into r1601;
    and r1600 r1601 into r1602;
    add r1108 1u8 into r1603;
    ternary r1602 0u8 r1599 into r1604;
    ternary r1602 r1603 r1597 into r1605;
    ternary r1598 r2.deck[1u32][18u32] r1595 into r1606;
    ternary r1598 r1604 r1596 into r1607;
    ternary r1598 r1605 r1597 into r1608;
    is.eq 19u8 r1107 into r1609;
    add r1107 1u8 into r1610;
    is.eq r1108 0u8 into r1611;
    is.eq r1610 26u8 into r1612;
    and r1611 r1612 into r1613;
    add r1108 1u8 into r1614;
    ternary r1613 0u8 r1610 into r1615;
    ternary r1613 r1614 r1608 into r1616;
    ternary r1609 r2.deck[1u32][19u32] r1606 into r1617;
    ternary r1609 r1615 r1607 into r1618;
    ternary r1609 r1616 r1608 into r1619;
    is.eq 20u8 r1107 into r1620;
    add r1107 1u8 into r1621;
    is.eq r1108 0u8 into r1622;
    is.eq r1621 26u8 into r1623;
    and r1622 r1623 into r1624;
    add r1108 1u8 into r1625;
    ternary r1624 0u8 r1621 into r1626;
    ternary r1624 r1625 r1619 into r1627;
    ternary r1620 r2.deck[1u32][20u32] r1617 into r1628;
    ternary r1620 r1626 r1618 into r1629;
    ternary r1620 r1627 r1619 into r1630;
    is.eq 21u8 r1107 into r1631;
    add r1107 1u8 into r1632;
    is.eq r1108 0u8 into r1633;
    is.eq r1632 26u8 into r1634;
    and r1633 r1634 into r1635;
    add r1108 1u8 into r1636;
    ternary r1635 0u8 r1632 into r1637;
    ternary r1635 r1636 r1630 into r1638;
    ternary r1631 r2.deck[1u32][21u32] r1628 into r1639;
    ternary r1631 r1637 r1629 into r1640;
    ternary r1631 r1638 r1630 into r1641;
    is.eq 22u8 r1107 into r1642;
    add r1107 1u8 into r1643;
    is.eq r1108 0u8 into r1644;
    is.eq r1643 26u8 into r1645;
    and r1644 r1645 into r1646;
    add r1108 1u8 into r1647;
    ternary r1646 0u8 r1643 into r1648;
    ternary r1646 r1647 r1641 into r1649;
    ternary r1642 r2.deck[1u32][22u32] r1639 into r1650;
    ternary r1642 r1648 r1640 into r1651;
    ternary r1642 r1649 r1641 into r1652;
    is.eq 23u8 r1107 into r1653;
    add r1107 1u8 into r1654;
    is.eq r1108 0u8 into r1655;
    is.eq r1654 26u8 into r1656;
    and r1655 r1656 into r1657;
    add r1108 1u8 into r1658;
    ternary r1657 0u8 r1654 into r1659;
    ternary r1657 r1658 r1652 into r1660;
    ternary r1653 r2.deck[1u32][23u32] r1650 into r1661;
    ternary r1653 r1659 r1651 into r1662;
    ternary r1653 r1660 r1652 into r1663;
    is.eq 24u8 r1107 into r1664;
    add r1107 1u8 into r1665;
    is.eq r1108 0u8 into r1666;
    is.eq r1665 26u8 into r1667;
    and r1666 r1667 into r1668;
    add r1108 1u8 into r1669;
    ternary r1668 0u8 r1665 into r1670;
    ternary r1668 r1669 r1663 into r1671;
    ternary r1664 r2.deck[1u32][24u32] r1661 into r1672;
    ternary r1664 r1670 r1662 into r1673;
    ternary r1664 r1671 r1663 into r1674;
    is.eq 25u8 r1107 into r1675;
    add r1107 1u8 into r1676;
    is.eq r1108 0u8 into r1677;
    is.eq r1676 26u8 into r1678;
    and r1677 r1678 into r1679;
    add r1108 1u8 into r1680;
    ternary r1679 0u8 r1676 into r1681;
    ternary r1679 r1680 r1674 into r1682;
    ternary r1675 r2.deck[1u32][25u32] r1672 into r1683;
    ternary r1675 r1681 r1673 into r1684;
    ternary r1675 r1682 r1674 into r1685;
    ternary r1399 r1683 r1396 into r1686;
    ternary r1399 r1684 r1397 into r1687;
    ternary r1399 r1685 r1398 into r1688;
    is.eq 0u8 r1688 into r1689;
    is.eq 0u8 r1687 into r1690;
    add r1687 1u8 into r1691;
    is.eq r1688 0u8 into r1692;
    is.eq r1691 26u8 into r1693;
    and r1692 r1693 into r1694;
    add r1688 1u8 into r1695;
    ternary r1694 0u8 r1691 into r1696;
    ternary r1694 r1695 0u8 into r1697;
    ternary r1690 r2.deck[0u32][0u32] 0field into r1698;
    ternary r1690 r1696 0u8 into r1699;
    ternary r1690 r1697 0u8 into r1700;
    is.eq 1u8 r1687 into r1701;
    add r1687 1u8 into r1702;
    is.eq r1688 0u8 into r1703;
    is.eq r1702 26u8 into r1704;
    and r1703 r1704 into r1705;
    add r1688 1u8 into r1706;
    ternary r1705 0u8 r1702 into r1707;
    ternary r1705 r1706 r1700 into r1708;
    ternary r1701 r2.deck[0u32][1u32] r1698 into r1709;
    ternary r1701 r1707 r1699 into r1710;
    ternary r1701 r1708 r1700 into r1711;
    is.eq 2u8 r1687 into r1712;
    add r1687 1u8 into r1713;
    is.eq r1688 0u8 into r1714;
    is.eq r1713 26u8 into r1715;
    and r1714 r1715 into r1716;
    add r1688 1u8 into r1717;
    ternary r1716 0u8 r1713 into r1718;
    ternary r1716 r1717 r1711 into r1719;
    ternary r1712 r2.deck[0u32][2u32] r1709 into r1720;
    ternary r1712 r1718 r1710 into r1721;
    ternary r1712 r1719 r1711 into r1722;
    is.eq 3u8 r1687 into r1723;
    add r1687 1u8 into r1724;
    is.eq r1688 0u8 into r1725;
    is.eq r1724 26u8 into r1726;
    and r1725 r1726 into r1727;
    add r1688 1u8 into r1728;
    ternary r1727 0u8 r1724 into r1729;
    ternary r1727 r1728 r1722 into r1730;
    ternary r1723 r2.deck[0u32][3u32] r1720 into r1731;
    ternary r1723 r1729 r1721 into r1732;
    ternary r1723 r1730 r1722 into r1733;
    is.eq 4u8 r1687 into r1734;
    add r1687 1u8 into r1735;
    is.eq r1688 0u8 into r1736;
    is.eq r1735 26u8 into r1737;
    and r1736 r1737 into r1738;
    add r1688 1u8 into r1739;
    ternary r1738 0u8 r1735 into r1740;
    ternary r1738 r1739 r1733 into r1741;
    ternary r1734 r2.deck[0u32][4u32] r1731 into r1742;
    ternary r1734 r1740 r1732 into r1743;
    ternary r1734 r1741 r1733 into r1744;
    is.eq 5u8 r1687 into r1745;
    add r1687 1u8 into r1746;
    is.eq r1688 0u8 into r1747;
    is.eq r1746 26u8 into r1748;
    and r1747 r1748 into r1749;
    add r1688 1u8 into r1750;
    ternary r1749 0u8 r1746 into r1751;
    ternary r1749 r1750 r1744 into r1752;
    ternary r1745 r2.deck[0u32][5u32] r1742 into r1753;
    ternary r1745 r1751 r1743 into r1754;
    ternary r1745 r1752 r1744 into r1755;
    is.eq 6u8 r1687 into r1756;
    add r1687 1u8 into r1757;
    is.eq r1688 0u8 into r1758;
    is.eq r1757 26u8 into r1759;
    and r1758 r1759 into r1760;
    add r1688 1u8 into r1761;
    ternary r1760 0u8 r1757 into r1762;
    ternary r1760 r1761 r1755 into r1763;
    ternary r1756 r2.deck[0u32][6u32] r1753 into r1764;
    ternary r1756 r1762 r1754 into r1765;
    ternary r1756 r1763 r1755 into r1766;
    is.eq 7u8 r1687 into r1767;
    add r1687 1u8 into r1768;
    is.eq r1688 0u8 into r1769;
    is.eq r1768 26u8 into r1770;
    and r1769 r1770 into r1771;
    add r1688 1u8 into r1772;
    ternary r1771 0u8 r1768 into r1773;
    ternary r1771 r1772 r1766 into r1774;
    ternary r1767 r2.deck[0u32][7u32] r1764 into r1775;
    ternary r1767 r1773 r1765 into r1776;
    ternary r1767 r1774 r1766 into r1777;
    is.eq 8u8 r1687 into r1778;
    add r1687 1u8 into r1779;
    is.eq r1688 0u8 into r1780;
    is.eq r1779 26u8 into r1781;
    and r1780 r1781 into r1782;
    add r1688 1u8 into r1783;
    ternary r1782 0u8 r1779 into r1784;
    ternary r1782 r1783 r1777 into r1785;
    ternary r1778 r2.deck[0u32][8u32] r1775 into r1786;
    ternary r1778 r1784 r1776 into r1787;
    ternary r1778 r1785 r1777 into r1788;
    is.eq 9u8 r1687 into r1789;
    add r1687 1u8 into r1790;
    is.eq r1688 0u8 into r1791;
    is.eq r1790 26u8 into r1792;
    and r1791 r1792 into r1793;
    add r1688 1u8 into r1794;
    ternary r1793 0u8 r1790 into r1795;
    ternary r1793 r1794 r1788 into r1796;
    ternary r1789 r2.deck[0u32][9u32] r1786 into r1797;
    ternary r1789 r1795 r1787 into r1798;
    ternary r1789 r1796 r1788 into r1799;
    is.eq 10u8 r1687 into r1800;
    add r1687 1u8 into r1801;
    is.eq r1688 0u8 into r1802;
    is.eq r1801 26u8 into r1803;
    and r1802 r1803 into r1804;
    add r1688 1u8 into r1805;
    ternary r1804 0u8 r1801 into r1806;
    ternary r1804 r1805 r1799 into r1807;
    ternary r1800 r2.deck[0u32][10u32] r1797 into r1808;
    ternary r1800 r1806 r1798 into r1809;
    ternary r1800 r1807 r1799 into r1810;
    is.eq 11u8 r1687 into r1811;
    add r1687 1u8 into r1812;
    is.eq r1688 0u8 into r1813;
    is.eq r1812 26u8 into r1814;
    and r1813 r1814 into r1815;
    add r1688 1u8 into r1816;
    ternary r1815 0u8 r1812 into r1817;
    ternary r1815 r1816 r1810 into r1818;
    ternary r1811 r2.deck[0u32][11u32] r1808 into r1819;
    ternary r1811 r1817 r1809 into r1820;
    ternary r1811 r1818 r1810 into r1821;
    is.eq 12u8 r1687 into r1822;
    add r1687 1u8 into r1823;
    is.eq r1688 0u8 into r1824;
    is.eq r1823 26u8 into r1825;
    and r1824 r1825 into r1826;
    add r1688 1u8 into r1827;
    ternary r1826 0u8 r1823 into r1828;
    ternary r1826 r1827 r1821 into r1829;
    ternary r1822 r2.deck[0u32][12u32] r1819 into r1830;
    ternary r1822 r1828 r1820 into r1831;
    ternary r1822 r1829 r1821 into r1832;
    is.eq 13u8 r1687 into r1833;
    add r1687 1u8 into r1834;
    is.eq r1688 0u8 into r1835;
    is.eq r1834 26u8 into r1836;
    and r1835 r1836 into r1837;
    add r1688 1u8 into r1838;
    ternary r1837 0u8 r1834 into r1839;
    ternary r1837 r1838 r1832 into r1840;
    ternary r1833 r2.deck[0u32][13u32] r1830 into r1841;
    ternary r1833 r1839 r1831 into r1842;
    ternary r1833 r1840 r1832 into r1843;
    is.eq 14u8 r1687 into r1844;
    add r1687 1u8 into r1845;
    is.eq r1688 0u8 into r1846;
    is.eq r1845 26u8 into r1847;
    and r1846 r1847 into r1848;
    add r1688 1u8 into r1849;
    ternary r1848 0u8 r1845 into r1850;
    ternary r1848 r1849 r1843 into r1851;
    ternary r1844 r2.deck[0u32][14u32] r1841 into r1852;
    ternary r1844 r1850 r1842 into r1853;
    ternary r1844 r1851 r1843 into r1854;
    is.eq 15u8 r1687 into r1855;
    add r1687 1u8 into r1856;
    is.eq r1688 0u8 into r1857;
    is.eq r1856 26u8 into r1858;
    and r1857 r1858 into r1859;
    add r1688 1u8 into r1860;
    ternary r1859 0u8 r1856 into r1861;
    ternary r1859 r1860 r1854 into r1862;
    ternary r1855 r2.deck[0u32][15u32] r1852 into r1863;
    ternary r1855 r1861 r1853 into r1864;
    ternary r1855 r1862 r1854 into r1865;
    is.eq 16u8 r1687 into r1866;
    add r1687 1u8 into r1867;
    is.eq r1688 0u8 into r1868;
    is.eq r1867 26u8 into r1869;
    and r1868 r1869 into r1870;
    add r1688 1u8 into r1871;
    ternary r1870 0u8 r1867 into r1872;
    ternary r1870 r1871 r1865 into r1873;
    ternary r1866 r2.deck[0u32][16u32] r1863 into r1874;
    ternary r1866 r1872 r1864 into r1875;
    ternary r1866 r1873 r1865 into r1876;
    is.eq 17u8 r1687 into r1877;
    add r1687 1u8 into r1878;
    is.eq r1688 0u8 into r1879;
    is.eq r1878 26u8 into r1880;
    and r1879 r1880 into r1881;
    add r1688 1u8 into r1882;
    ternary r1881 0u8 r1878 into r1883;
    ternary r1881 r1882 r1876 into r1884;
    ternary r1877 r2.deck[0u32][17u32] r1874 into r1885;
    ternary r1877 r1883 r1875 into r1886;
    ternary r1877 r1884 r1876 into r1887;
    is.eq 18u8 r1687 into r1888;
    add r1687 1u8 into r1889;
    is.eq r1688 0u8 into r1890;
    is.eq r1889 26u8 into r1891;
    and r1890 r1891 into r1892;
    add r1688 1u8 into r1893;
    ternary r1892 0u8 r1889 into r1894;
    ternary r1892 r1893 r1887 into r1895;
    ternary r1888 r2.deck[0u32][18u32] r1885 into r1896;
    ternary r1888 r1894 r1886 into r1897;
    ternary r1888 r1895 r1887 into r1898;
    is.eq 19u8 r1687 into r1899;
    add r1687 1u8 into r1900;
    is.eq r1688 0u8 into r1901;
    is.eq r1900 26u8 into r1902;
    and r1901 r1902 into r1903;
    add r1688 1u8 into r1904;
    ternary r1903 0u8 r1900 into r1905;
    ternary r1903 r1904 r1898 into r1906;
    ternary r1899 r2.deck[0u32][19u32] r1896 into r1907;
    ternary r1899 r1905 r1897 into r1908;
    ternary r1899 r1906 r1898 into r1909;
    is.eq 20u8 r1687 into r1910;
    add r1687 1u8 into r1911;
    is.eq r1688 0u8 into r1912;
    is.eq r1911 26u8 into r1913;
    and r1912 r1913 into r1914;
    add r1688 1u8 into r1915;
    ternary r1914 0u8 r1911 into r1916;
    ternary r1914 r1915 r1909 into r1917;
    ternary r1910 r2.deck[0u32][20u32] r1907 into r1918;
    ternary r1910 r1916 r1908 into r1919;
    ternary r1910 r1917 r1909 into r1920;
    is.eq 21u8 r1687 into r1921;
    add r1687 1u8 into r1922;
    is.eq r1688 0u8 into r1923;
    is.eq r1922 26u8 into r1924;
    and r1923 r1924 into r1925;
    add r1688 1u8 into r1926;
    ternary r1925 0u8 r1922 into r1927;
    ternary r1925 r1926 r1920 into r1928;
    ternary r1921 r2.deck[0u32][21u32] r1918 into r1929;
    ternary r1921 r1927 r1919 into r1930;
    ternary r1921 r1928 r1920 into r1931;
    is.eq 22u8 r1687 into r1932;
    add r1687 1u8 into r1933;
    is.eq r1688 0u8 into r1934;
    is.eq r1933 26u8 into r1935;
    and r1934 r1935 into r1936;
    add r1688 1u8 into r1937;
    ternary r1936 0u8 r1933 into r1938;
    ternary r1936 r1937 r1931 into r1939;
    ternary r1932 r2.deck[0u32][22u32] r1929 into r1940;
    ternary r1932 r1938 r1930 into r1941;
    ternary r1932 r1939 r1931 into r1942;
    is.eq 23u8 r1687 into r1943;
    add r1687 1u8 into r1944;
    is.eq r1688 0u8 into r1945;
    is.eq r1944 26u8 into r1946;
    and r1945 r1946 into r1947;
    add r1688 1u8 into r1948;
    ternary r1947 0u8 r1944 into r1949;
    ternary r1947 r1948 r1942 into r1950;
    ternary r1943 r2.deck[0u32][23u32] r1940 into r1951;
    ternary r1943 r1949 r1941 into r1952;
    ternary r1943 r1950 r1942 into r1953;
    is.eq 24u8 r1687 into r1954;
    add r1687 1u8 into r1955;
    is.eq r1688 0u8 into r1956;
    is.eq r1955 26u8 into r1957;
    and r1956 r1957 into r1958;
    add r1688 1u8 into r1959;
    ternary r1958 0u8 r1955 into r1960;
    ternary r1958 r1959 r1953 into r1961;
    ternary r1954 r2.deck[0u32][24u32] r1951 into r1962;
    ternary r1954 r1960 r1952 into r1963;
    ternary r1954 r1961 r1953 into r1964;
    is.eq 25u8 r1687 into r1965;
    add r1687 1u8 into r1966;
    is.eq r1688 0u8 into r1967;
    is.eq r1966 26u8 into r1968;
    and r1967 r1968 into r1969;
    add r1688 1u8 into r1970;
    ternary r1969 0u8 r1966 into r1971;
    ternary r1969 r1970 r1964 into r1972;
    ternary r1965 r2.deck[0u32][25u32] r1962 into r1973;
    ternary r1965 r1971 r1963 into r1974;
    ternary r1965 r1972 r1964 into r1975;
    ternary r1689 r1973 0field into r1976;
    ternary r1689 r1974 0u8 into r1977;
    ternary r1689 r1975 0u8 into r1978;
    is.eq 1u8 r1688 into r1979;
    is.eq 0u8 r1687 into r1980;
    add r1687 1u8 into r1981;
    is.eq r1688 0u8 into r1982;
    is.eq r1981 26u8 into r1983;
    and r1982 r1983 into r1984;
    add r1688 1u8 into r1985;
    ternary r1984 0u8 r1981 into r1986;
    ternary r1984 r1985 r1978 into r1987;
    ternary r1980 r2.deck[1u32][0u32] r1976 into r1988;
    ternary r1980 r1986 r1977 into r1989;
    ternary r1980 r1987 r1978 into r1990;
    is.eq 1u8 r1687 into r1991;
    add r1687 1u8 into r1992;
    is.eq r1688 0u8 into r1993;
    is.eq r1992 26u8 into r1994;
    and r1993 r1994 into r1995;
    add r1688 1u8 into r1996;
    ternary r1995 0u8 r1992 into r1997;
    ternary r1995 r1996 r1990 into r1998;
    ternary r1991 r2.deck[1u32][1u32] r1988 into r1999;
    ternary r1991 r1997 r1989 into r2000;
    ternary r1991 r1998 r1990 into r2001;
    is.eq 2u8 r1687 into r2002;
    add r1687 1u8 into r2003;
    is.eq r1688 0u8 into r2004;
    is.eq r2003 26u8 into r2005;
    and r2004 r2005 into r2006;
    add r1688 1u8 into r2007;
    ternary r2006 0u8 r2003 into r2008;
    ternary r2006 r2007 r2001 into r2009;
    ternary r2002 r2.deck[1u32][2u32] r1999 into r2010;
    ternary r2002 r2008 r2000 into r2011;
    ternary r2002 r2009 r2001 into r2012;
    is.eq 3u8 r1687 into r2013;
    add r1687 1u8 into r2014;
    is.eq r1688 0u8 into r2015;
    is.eq r2014 26u8 into r2016;
    and r2015 r2016 into r2017;
    add r1688 1u8 into r2018;
    ternary r2017 0u8 r2014 into r2019;
    ternary r2017 r2018 r2012 into r2020;
    ternary r2013 r2.deck[1u32][3u32] r2010 into r2021;
    ternary r2013 r2019 r2011 into r2022;
    ternary r2013 r2020 r2012 into r2023;
    is.eq 4u8 r1687 into r2024;
    add r1687 1u8 into r2025;
    is.eq r1688 0u8 into r2026;
    is.eq r2025 26u8 into r2027;
    and r2026 r2027 into r2028;
    add r1688 1u8 into r2029;
    ternary r2028 0u8 r2025 into r2030;
    ternary r2028 r2029 r2023 into r2031;
    ternary r2024 r2.deck[1u32][4u32] r2021 into r2032;
    ternary r2024 r2030 r2022 into r2033;
    ternary r2024 r2031 r2023 into r2034;
    is.eq 5u8 r1687 into r2035;
    add r1687 1u8 into r2036;
    is.eq r1688 0u8 into r2037;
    is.eq r2036 26u8 into r2038;
    and r2037 r2038 into r2039;
    add r1688 1u8 into r2040;
    ternary r2039 0u8 r2036 into r2041;
    ternary r2039 r2040 r2034 into r2042;
    ternary r2035 r2.deck[1u32][5u32] r2032 into r2043;
    ternary r2035 r2041 r2033 into r2044;
    ternary r2035 r2042 r2034 into r2045;
    is.eq 6u8 r1687 into r2046;
    add r1687 1u8 into r2047;
    is.eq r1688 0u8 into r2048;
    is.eq r2047 26u8 into r2049;
    and r2048 r2049 into r2050;
    add r1688 1u8 into r2051;
    ternary r2050 0u8 r2047 into r2052;
    ternary r2050 r2051 r2045 into r2053;
    ternary r2046 r2.deck[1u32][6u32] r2043 into r2054;
    ternary r2046 r2052 r2044 into r2055;
    ternary r2046 r2053 r2045 into r2056;
    is.eq 7u8 r1687 into r2057;
    add r1687 1u8 into r2058;
    is.eq r1688 0u8 into r2059;
    is.eq r2058 26u8 into r2060;
    and r2059 r2060 into r2061;
    add r1688 1u8 into r2062;
    ternary r2061 0u8 r2058 into r2063;
    ternary r2061 r2062 r2056 into r2064;
    ternary r2057 r2.deck[1u32][7u32] r2054 into r2065;
    ternary r2057 r2063 r2055 into r2066;
    ternary r2057 r2064 r2056 into r2067;
    is.eq 8u8 r1687 into r2068;
    add r1687 1u8 into r2069;
    is.eq r1688 0u8 into r2070;
    is.eq r2069 26u8 into r2071;
    and r2070 r2071 into r2072;
    add r1688 1u8 into r2073;
    ternary r2072 0u8 r2069 into r2074;
    ternary r2072 r2073 r2067 into r2075;
    ternary r2068 r2.deck[1u32][8u32] r2065 into r2076;
    ternary r2068 r2074 r2066 into r2077;
    ternary r2068 r2075 r2067 into r2078;
    is.eq 9u8 r1687 into r2079;
    add r1687 1u8 into r2080;
    is.eq r1688 0u8 into r2081;
    is.eq r2080 26u8 into r2082;
    and r2081 r2082 into r2083;
    add r1688 1u8 into r2084;
    ternary r2083 0u8 r2080 into r2085;
    ternary r2083 r2084 r2078 into r2086;
    ternary r2079 r2.deck[1u32][9u32] r2076 into r2087;
    ternary r2079 r2085 r2077 into r2088;
    ternary r2079 r2086 r2078 into r2089;
    is.eq 10u8 r1687 into r2090;
    add r1687 1u8 into r2091;
    is.eq r1688 0u8 into r2092;
    is.eq r2091 26u8 into r2093;
    and r2092 r2093 into r2094;
    add r1688 1u8 into r2095;
    ternary r2094 0u8 r2091 into r2096;
    ternary r2094 r2095 r2089 into r2097;
    ternary r2090 r2.deck[1u32][10u32] r2087 into r2098;
    ternary r2090 r2096 r2088 into r2099;
    ternary r2090 r2097 r2089 into r2100;
    is.eq 11u8 r1687 into r2101;
    add r1687 1u8 into r2102;
    is.eq r1688 0u8 into r2103;
    is.eq r2102 26u8 into r2104;
    and r2103 r2104 into r2105;
    add r1688 1u8 into r2106;
    ternary r2105 0u8 r2102 into r2107;
    ternary r2105 r2106 r2100 into r2108;
    ternary r2101 r2.deck[1u32][11u32] r2098 into r2109;
    ternary r2101 r2107 r2099 into r2110;
    ternary r2101 r2108 r2100 into r2111;
    is.eq 12u8 r1687 into r2112;
    add r1687 1u8 into r2113;
    is.eq r1688 0u8 into r2114;
    is.eq r2113 26u8 into r2115;
    and r2114 r2115 into r2116;
    add r1688 1u8 into r2117;
    ternary r2116 0u8 r2113 into r2118;
    ternary r2116 r2117 r2111 into r2119;
    ternary r2112 r2.deck[1u32][12u32] r2109 into r2120;
    ternary r2112 r2118 r2110 into r2121;
    ternary r2112 r2119 r2111 into r2122;
    is.eq 13u8 r1687 into r2123;
    add r1687 1u8 into r2124;
    is.eq r1688 0u8 into r2125;
    is.eq r2124 26u8 into r2126;
    and r2125 r2126 into r2127;
    add r1688 1u8 into r2128;
    ternary r2127 0u8 r2124 into r2129;
    ternary r2127 r2128 r2122 into r2130;
    ternary r2123 r2.deck[1u32][13u32] r2120 into r2131;
    ternary r2123 r2129 r2121 into r2132;
    ternary r2123 r2130 r2122 into r2133;
    is.eq 14u8 r1687 into r2134;
    add r1687 1u8 into r2135;
    is.eq r1688 0u8 into r2136;
    is.eq r2135 26u8 into r2137;
    and r2136 r2137 into r2138;
    add r1688 1u8 into r2139;
    ternary r2138 0u8 r2135 into r2140;
    ternary r2138 r2139 r2133 into r2141;
    ternary r2134 r2.deck[1u32][14u32] r2131 into r2142;
    ternary r2134 r2140 r2132 into r2143;
    ternary r2134 r2141 r2133 into r2144;
    is.eq 15u8 r1687 into r2145;
    add r1687 1u8 into r2146;
    is.eq r1688 0u8 into r2147;
    is.eq r2146 26u8 into r2148;
    and r2147 r2148 into r2149;
    add r1688 1u8 into r2150;
    ternary r2149 0u8 r2146 into r2151;
    ternary r2149 r2150 r2144 into r2152;
    ternary r2145 r2.deck[1u32][15u32] r2142 into r2153;
    ternary r2145 r2151 r2143 into r2154;
    ternary r2145 r2152 r2144 into r2155;
    is.eq 16u8 r1687 into r2156;
    add r1687 1u8 into r2157;
    is.eq r1688 0u8 into r2158;
    is.eq r2157 26u8 into r2159;
    and r2158 r2159 into r2160;
    add r1688 1u8 into r2161;
    ternary r2160 0u8 r2157 into r2162;
    ternary r2160 r2161 r2155 into r2163;
    ternary r2156 r2.deck[1u32][16u32] r2153 into r2164;
    ternary r2156 r2162 r2154 into r2165;
    ternary r2156 r2163 r2155 into r2166;
    is.eq 17u8 r1687 into r2167;
    add r1687 1u8 into r2168;
    is.eq r1688 0u8 into r2169;
    is.eq r2168 26u8 into r2170;
    and r2169 r2170 into r2171;
    add r1688 1u8 into r2172;
    ternary r2171 0u8 r2168 into r2173;
    ternary r2171 r2172 r2166 into r2174;
    ternary r2167 r2.deck[1u32][17u32] r2164 into r2175;
    ternary r2167 r2173 r2165 into r2176;
    ternary r2167 r2174 r2166 into r2177;
    is.eq 18u8 r1687 into r2178;
    add r1687 1u8 into r2179;
    is.eq r1688 0u8 into r2180;
    is.eq r2179 26u8 into r2181;
    and r2180 r2181 into r2182;
    add r1688 1u8 into r2183;
    ternary r2182 0u8 r2179 into r2184;
    ternary r2182 r2183 r2177 into r2185;
    ternary r2178 r2.deck[1u32][18u32] r2175 into r2186;
    ternary r2178 r2184 r2176 into r2187;
    ternary r2178 r2185 r2177 into r2188;
    is.eq 19u8 r1687 into r2189;
    add r1687 1u8 into r2190;
    is.eq r1688 0u8 into r2191;
    is.eq r2190 26u8 into r2192;
    and r2191 r2192 into r2193;
    add r1688 1u8 into r2194;
    ternary r2193 0u8 r2190 into r2195;
    ternary r2193 r2194 r2188 into r2196;
    ternary r2189 r2.deck[1u32][19u32] r2186 into r2197;
    ternary r2189 r2195 r2187 into r2198;
    ternary r2189 r2196 r2188 into r2199;
    is.eq 20u8 r1687 into r2200;
    add r1687 1u8 into r2201;
    is.eq r1688 0u8 into r2202;
    is.eq r2201 26u8 into r2203;
    and r2202 r2203 into r2204;
    add r1688 1u8 into r2205;
    ternary r2204 0u8 r2201 into r2206;
    ternary r2204 r2205 r2199 into r2207;
    ternary r2200 r2.deck[1u32][20u32] r2197 into r2208;
    ternary r2200 r2206 r2198 into r2209;
    ternary r2200 r2207 r2199 into r2210;
    is.eq 21u8 r1687 into r2211;
    add r1687 1u8 into r2212;
    is.eq r1688 0u8 into r2213;
    is.eq r2212 26u8 into r2214;
    and r2213 r2214 into r2215;
    add r1688 1u8 into r2216;
    ternary r2215 0u8 r2212 into r2217;
    ternary r2215 r2216 r2210 into r2218;
    ternary r2211 r2.deck[1u32][21u32] r2208 into r2219;
    ternary r2211 r2217 r2209 into r2220;
    ternary r2211 r2218 r2210 into r2221;
    is.eq 22u8 r1687 into r2222;
    add r1687 1u8 into r2223;
    is.eq r1688 0u8 into r2224;
    is.eq r2223 26u8 into r2225;
    and r2224 r2225 into r2226;
    add r1688 1u8 into r2227;
    ternary r2226 0u8 r2223 into r2228;
    ternary r2226 r2227 r2221 into r2229;
    ternary r2222 r2.deck[1u32][22u32] r2219 into r2230;
    ternary r2222 r2228 r2220 into r2231;
    ternary r2222 r2229 r2221 into r2232;
    is.eq 23u8 r1687 into r2233;
    add r1687 1u8 into r2234;
    is.eq r1688 0u8 into r2235;
    is.eq r2234 26u8 into r2236;
    and r2235 r2236 into r2237;
    add r1688 1u8 into r2238;
    ternary r2237 0u8 r2234 into r2239;
    ternary r2237 r2238 r2232 into r2240;
    ternary r2233 r2.deck[1u32][23u32] r2230 into r2241;
    ternary r2233 r2239 r2231 into r2242;
    ternary r2233 r2240 r2232 into r2243;
    is.eq 24u8 r1687 into r2244;
    add r1687 1u8 into r2245;
    is.eq r1688 0u8 into r2246;
    is.eq r2245 26u8 into r2247;
    and r2246 r2247 into r2248;
    add r1688 1u8 into r2249;
    ternary r2248 0u8 r2245 into r2250;
    ternary r2248 r2249 r2243 into r2251;
    ternary r2244 r2.deck[1u32][24u32] r2241 into r2252;
    ternary r2244 r2250 r2242 into r2253;
    ternary r2244 r2251 r2243 into r2254;
    is.eq 25u8 r1687 into r2255;
    add r1687 1u8 into r2256;
    is.eq r1688 0u8 into r2257;
    is.eq r2256 26u8 into r2258;
    and r2257 r2258 into r2259;
    add r1688 1u8 into r2260;
    ternary r2259 0u8 r2256 into r2261;
    ternary r2259 r2260 r2254 into r2262;
    ternary r2255 r2.deck[1u32][25u32] r2252 into r2263;
    ternary r2255 r2261 r2253 into r2264;
    ternary r2255 r2262 r2254 into r2265;
    ternary r1979 r2263 r1976 into r2266;
    ternary r1979 r2264 r1977 into r2267;
    ternary r1979 r2265 r1978 into r2268;
    cast  0field 0field into r2269 as [field; 2u32];
    cast  0field 0field into r2270 as [field; 2u32];
    cast  0field 0field into r2271 as [field; 2u32];
    cast  0field 0field into r2272 as [field; 2u32];
    cast  0field 0field into r2273 as [field; 2u32];
    cast  0field 0field into r2274 as [field; 2u32];
    cast  0field 0field into r2275 as [field; 2u32];
    cast  0field 0field into r2276 as [field; 2u32];
    cast  0field 0field into r2277 as [field; 2u32];
    cast  r2269 r2270 r2271 r2272 r2273 r2274 r2275 r2276 r2277 into r2278 as [[field; 2u32]; 9u32];
    cast  r1106 r1686 r2266 into r2279 as [field; 3u32];
    cast  0u8 0u8 into r2280 as [u8; 2u32];
    cast  0u8 0u8 into r2281 as [u8; 2u32];
    cast  r2280 r2281 into r2282 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2283 as [u8; 2u32];
    cast  0u8 0u8 into r2284 as [u8; 2u32];
    cast  r2283 r2284 into r2285 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2286 as [u8; 2u32];
    cast  0u8 0u8 into r2287 as [u8; 2u32];
    cast  r2286 r2287 into r2288 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2289 as [u8; 2u32];
    cast  0u8 0u8 into r2290 as [u8; 2u32];
    cast  r2289 r2290 into r2291 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2292 as [u8; 2u32];
    cast  0u8 0u8 into r2293 as [u8; 2u32];
    cast  r2292 r2293 into r2294 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2295 as [u8; 2u32];
    cast  0u8 0u8 into r2296 as [u8; 2u32];
    cast  r2295 r2296 into r2297 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2298 as [u8; 2u32];
    cast  0u8 0u8 into r2299 as [u8; 2u32];
    cast  r2298 r2299 into r2300 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2301 as [u8; 2u32];
    cast  0u8 0u8 into r2302 as [u8; 2u32];
    cast  r2301 r2302 into r2303 as [[u8; 2u32]; 2u32];
    cast  0u8 0u8 into r2304 as [u8; 2u32];
    cast  0u8 0u8 into r2305 as [u8; 2u32];
    cast  r2304 r2305 into r2306 as [[u8; 2u32]; 2u32];
    cast  r2282 r2285 r2288 r2291 r2294 r2297 r2300 r2303 r2306 into r2307 as [[[u8; 2u32]; 2u32]; 9u32];
    cast  r1108 r1107 into r2308 as [u8; 2u32];
    cast  r1688 r1687 into r2309 as [u8; 2u32];
    cast  r2268 r2267 into r2310 as [u8; 2u32];
    cast  r2308 r2309 r2310 into r2311 as [[u8; 2u32]; 3u32];
    cast  0u8 0u8 into r2312 as [u8; 2u32];
    cast  0u8 0u8 into r2313 as [u8; 2u32];
    cast  0field 0field into r2314 as [field; 2u32];
    cast  0field 0field into r2315 as [field; 2u32];
    cast  0field 0field into r2316 as [field; 2u32];
    cast  0field 0field into r2317 as [field; 2u32];
    cast  0field 0field into r2318 as [field; 2u32];
    cast  0field 0field into r2319 as [field; 2u32];
    cast  0field 0field into r2320 as [field; 2u32];
    cast  0field 0field into r2321 as [field; 2u32];
    cast  0field 0field into r2322 as [field; 2u32];
    cast  r2314 r2315 r2316 r2317 r2318 r2319 r2320 r2321 r2322 into r2323 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2324 as [field; 2u32];
    cast  0field 0field into r2325 as [field; 2u32];
    cast  0field 0field into r2326 as [field; 2u32];
    cast  0field 0field into r2327 as [field; 2u32];
    cast  0field 0field into r2328 as [field; 2u32];
    cast  0field 0field into r2329 as [field; 2u32];
    cast  0field 0field into r2330 as [field; 2u32];
    cast  0field 0field into r2331 as [field; 2u32];
    cast  0field 0field into r2332 as [field; 2u32];
    cast  r2324 r2325 r2326 r2327 r2328 r2329 r2330 r2331 r2332 into r2333 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2334 as [field; 2u32];
    cast  0field 0field into r2335 as [field; 2u32];
    cast  0field 0field into r2336 as [field; 2u32];
    cast  0field 0field into r2337 as [field; 2u32];
    cast  0field 0field into r2338 as [field; 2u32];
    cast  0field 0field into r2339 as [field; 2u32];
    cast  0field 0field into r2340 as [field; 2u32];
    cast  0field 0field into r2341 as [field; 2u32];
    cast  0field 0field into r2342 as [field; 2u32];
    cast  r2334 r2335 r2336 r2337 r2338 r2339 r2340 r2341 r2342 into r2343 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2344 as [field; 2u32];
    cast  0field 0field into r2345 as [field; 2u32];
    cast  0field 0field into r2346 as [field; 2u32];
    cast  0field 0field into r2347 as [field; 2u32];
    cast  0field 0field into r2348 as [field; 2u32];
    cast  0field 0field into r2349 as [field; 2u32];
    cast  0field 0field into r2350 as [field; 2u32];
    cast  0field 0field into r2351 as [field; 2u32];
    cast  0field 0field into r2352 as [field; 2u32];
    cast  r2344 r2345 r2346 r2347 r2348 r2349 r2350 r2351 r2352 into r2353 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2354 as [field; 2u32];
    cast  0field 0field into r2355 as [field; 2u32];
    cast  0field 0field into r2356 as [field; 2u32];
    cast  0field 0field into r2357 as [field; 2u32];
    cast  0field 0field into r2358 as [field; 2u32];
    cast  0field 0field into r2359 as [field; 2u32];
    cast  0field 0field into r2360 as [field; 2u32];
    cast  0field 0field into r2361 as [field; 2u32];
    cast  0field 0field into r2362 as [field; 2u32];
    cast  r2354 r2355 r2356 r2357 r2358 r2359 r2360 r2361 r2362 into r2363 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2364 as [field; 2u32];
    cast  0field 0field into r2365 as [field; 2u32];
    cast  0field 0field into r2366 as [field; 2u32];
    cast  0field 0field into r2367 as [field; 2u32];
    cast  0field 0field into r2368 as [field; 2u32];
    cast  0field 0field into r2369 as [field; 2u32];
    cast  0field 0field into r2370 as [field; 2u32];
    cast  0field 0field into r2371 as [field; 2u32];
    cast  0field 0field into r2372 as [field; 2u32];
    cast  r2364 r2365 r2366 r2367 r2368 r2369 r2370 r2371 r2372 into r2373 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2374 as [field; 2u32];
    cast  0field 0field into r2375 as [field; 2u32];
    cast  0field 0field into r2376 as [field; 2u32];
    cast  0field 0field into r2377 as [field; 2u32];
    cast  0field 0field into r2378 as [field; 2u32];
    cast  0field 0field into r2379 as [field; 2u32];
    cast  0field 0field into r2380 as [field; 2u32];
    cast  0field 0field into r2381 as [field; 2u32];
    cast  0field 0field into r2382 as [field; 2u32];
    cast  r2374 r2375 r2376 r2377 r2378 r2379 r2380 r2381 r2382 into r2383 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2384 as [field; 2u32];
    cast  0field 0field into r2385 as [field; 2u32];
    cast  0field 0field into r2386 as [field; 2u32];
    cast  0field 0field into r2387 as [field; 2u32];
    cast  0field 0field into r2388 as [field; 2u32];
    cast  0field 0field into r2389 as [field; 2u32];
    cast  0field 0field into r2390 as [field; 2u32];
    cast  0field 0field into r2391 as [field; 2u32];
    cast  0field 0field into r2392 as [field; 2u32];
    cast  r2384 r2385 r2386 r2387 r2388 r2389 r2390 r2391 r2392 into r2393 as [[field; 2u32]; 9u32];
    cast  0field 0field into r2394 as [field; 2u32];
    cast  0field 0field into r2395 as [field; 2u32];
    cast  0field 0field into r2396 as [field; 2u32];
    cast  0field 0field into r2397 as [field; 2u32];
    cast  0field 0field into r2398 as [field; 2u32];
    cast  0field 0field into r2399 as [field; 2u32];
    cast  0field 0field into r2400 as [field; 2u32];
    cast  0field 0field into r2401 as [field; 2u32];
    cast  0field 0field into r2402 as [field; 2u32];
    cast  r2394 r2395 r2396 r2397 r2398 r2399 r2400 r2401 r2402 into r2403 as [[field; 2u32]; 9u32];
    cast  r2323 r2333 r2343 r2353 r2363 r2373 r2383 r2393 r2403 into r2404 as [[[field; 2u32]; 9u32]; 9u32];
    cast  0field 0field 0field into r2405 as [field; 3u32];
    cast  0field 0field 0field into r2406 as [field; 3u32];
    cast  0field 0field 0field into r2407 as [field; 3u32];
    cast  0field 0field 0field into r2408 as [field; 3u32];
    cast  0field 0field 0field into r2409 as [field; 3u32];
    cast  0field 0field 0field into r2410 as [field; 3u32];
    cast  0field 0field 0field into r2411 as [field; 3u32];
    cast  0field 0field 0field into r2412 as [field; 3u32];
    cast  0field 0field 0field into r2413 as [field; 3u32];
    cast  r2405 r2406 r2407 r2408 r2409 r2410 r2411 r2412 r2413 into r2414 as [[field; 3u32]; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r2415 as [field; 9u32];
    cast  0field 0field 0field 0field 0field 0field 0field 0field 0field into r2416 as [field; 9u32];
    cast true r2.player_count r2.players r2.next_players r2.phi r2.n r2.deck r2268 r2267 r2278 r2279 0field 0field r2307 r2311 r2312 r2313 r2404 r2414 r2415 r2416 r2.deck_ready r2.hands_dealt true false false into r2417 as GameState;
    set r2417 into game_state_map[r1];


function reveal_flop:
    input r0 as Player.record;
    input r1 as field.public;
    input r2 as field.public;
    input r3 as field.public;
    input r4 as field.public;
    input r5 as field.public;
    input r6 as field.public;
    call zk_sra_encryption_v0_0_2.aleo/sra_decrypt r1 r4 r0.n into r7;
    call zk_sra_encryption_v0_0_2.aleo/sra_decrypt r2 r5 r0.n into r8;
    call zk_sra_encryption_v0_0_2.aleo/sra_decrypt r3 r6 r0.n into r9;
    async reveal_flop self.caller r0.table_address r0.index r0.deck_d r7 r8 r9 r1 r2 r3 r4 r5 r6 into r10;
    output r7 as field.private;
    output r8 as field.private;
    output r9 as field.private;
    output r10 as zk_texas_holdem.aleo/reveal_flop.future;

finalize reveal_flop:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as u8.public;
    input r3 as [[field; 26u32]; 2u32].public;
    input r4 as field.public;
    input r5 as field.public;
    input r6 as field.public;
    input r7 as field.public;
    input r8 as field.public;
    input r9 as field.public;
    input r10 as field.public;
    input r11 as field.public;
    input r12 as field.public;
    get game_state_map[r1] into r13;
    assert.eq r13.active true;
    is.eq 0u8 r13.flop_ij[0u32][0u32] into r14;
    is.eq 0u8 r13.flop_ij[0u32][1u32] into r15;
    add r13.flop_ij[0u32][1u32] 1u8 into r16;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r17;
    is.eq r16 26u8 into r18;
    and r17 r18 into r19;
    add r13.flop_ij[0u32][0u32] 1u8 into r20;
    ternary r19 0u8 r16 into r21;
    ternary r19 r20 0u8 into r22;
    ternary r15 r13.deck[0u32][0u32] 0field into r23;
    ternary r15 r21 0u8 into r24;
    ternary r15 r22 0u8 into r25;
    is.eq 1u8 r13.flop_ij[0u32][1u32] into r26;
    add r13.flop_ij[0u32][1u32] 1u8 into r27;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r28;
    is.eq r27 26u8 into r29;
    and r28 r29 into r30;
    add r13.flop_ij[0u32][0u32] 1u8 into r31;
    ternary r30 0u8 r27 into r32;
    ternary r30 r31 r25 into r33;
    ternary r26 r13.deck[0u32][1u32] r23 into r34;
    ternary r26 r32 r24 into r35;
    ternary r26 r33 r25 into r36;
    is.eq 2u8 r13.flop_ij[0u32][1u32] into r37;
    add r13.flop_ij[0u32][1u32] 1u8 into r38;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r39;
    is.eq r38 26u8 into r40;
    and r39 r40 into r41;
    add r13.flop_ij[0u32][0u32] 1u8 into r42;
    ternary r41 0u8 r38 into r43;
    ternary r41 r42 r36 into r44;
    ternary r37 r13.deck[0u32][2u32] r34 into r45;
    ternary r37 r43 r35 into r46;
    ternary r37 r44 r36 into r47;
    is.eq 3u8 r13.flop_ij[0u32][1u32] into r48;
    add r13.flop_ij[0u32][1u32] 1u8 into r49;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r50;
    is.eq r49 26u8 into r51;
    and r50 r51 into r52;
    add r13.flop_ij[0u32][0u32] 1u8 into r53;
    ternary r52 0u8 r49 into r54;
    ternary r52 r53 r47 into r55;
    ternary r48 r13.deck[0u32][3u32] r45 into r56;
    ternary r48 r54 r46 into r57;
    ternary r48 r55 r47 into r58;
    is.eq 4u8 r13.flop_ij[0u32][1u32] into r59;
    add r13.flop_ij[0u32][1u32] 1u8 into r60;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r61;
    is.eq r60 26u8 into r62;
    and r61 r62 into r63;
    add r13.flop_ij[0u32][0u32] 1u8 into r64;
    ternary r63 0u8 r60 into r65;
    ternary r63 r64 r58 into r66;
    ternary r59 r13.deck[0u32][4u32] r56 into r67;
    ternary r59 r65 r57 into r68;
    ternary r59 r66 r58 into r69;
    is.eq 5u8 r13.flop_ij[0u32][1u32] into r70;
    add r13.flop_ij[0u32][1u32] 1u8 into r71;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r72;
    is.eq r71 26u8 into r73;
    and r72 r73 into r74;
    add r13.flop_ij[0u32][0u32] 1u8 into r75;
    ternary r74 0u8 r71 into r76;
    ternary r74 r75 r69 into r77;
    ternary r70 r13.deck[0u32][5u32] r67 into r78;
    ternary r70 r76 r68 into r79;
    ternary r70 r77 r69 into r80;
    is.eq 6u8 r13.flop_ij[0u32][1u32] into r81;
    add r13.flop_ij[0u32][1u32] 1u8 into r82;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r83;
    is.eq r82 26u8 into r84;
    and r83 r84 into r85;
    add r13.flop_ij[0u32][0u32] 1u8 into r86;
    ternary r85 0u8 r82 into r87;
    ternary r85 r86 r80 into r88;
    ternary r81 r13.deck[0u32][6u32] r78 into r89;
    ternary r81 r87 r79 into r90;
    ternary r81 r88 r80 into r91;
    is.eq 7u8 r13.flop_ij[0u32][1u32] into r92;
    add r13.flop_ij[0u32][1u32] 1u8 into r93;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r94;
    is.eq r93 26u8 into r95;
    and r94 r95 into r96;
    add r13.flop_ij[0u32][0u32] 1u8 into r97;
    ternary r96 0u8 r93 into r98;
    ternary r96 r97 r91 into r99;
    ternary r92 r13.deck[0u32][7u32] r89 into r100;
    ternary r92 r98 r90 into r101;
    ternary r92 r99 r91 into r102;
    is.eq 8u8 r13.flop_ij[0u32][1u32] into r103;
    add r13.flop_ij[0u32][1u32] 1u8 into r104;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r105;
    is.eq r104 26u8 into r106;
    and r105 r106 into r107;
    add r13.flop_ij[0u32][0u32] 1u8 into r108;
    ternary r107 0u8 r104 into r109;
    ternary r107 r108 r102 into r110;
    ternary r103 r13.deck[0u32][8u32] r100 into r111;
    ternary r103 r109 r101 into r112;
    ternary r103 r110 r102 into r113;
    is.eq 9u8 r13.flop_ij[0u32][1u32] into r114;
    add r13.flop_ij[0u32][1u32] 1u8 into r115;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r116;
    is.eq r115 26u8 into r117;
    and r116 r117 into r118;
    add r13.flop_ij[0u32][0u32] 1u8 into r119;
    ternary r118 0u8 r115 into r120;
    ternary r118 r119 r113 into r121;
    ternary r114 r13.deck[0u32][9u32] r111 into r122;
    ternary r114 r120 r112 into r123;
    ternary r114 r121 r113 into r124;
    is.eq 10u8 r13.flop_ij[0u32][1u32] into r125;
    add r13.flop_ij[0u32][1u32] 1u8 into r126;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r127;
    is.eq r126 26u8 into r128;
    and r127 r128 into r129;
    add r13.flop_ij[0u32][0u32] 1u8 into r130;
    ternary r129 0u8 r126 into r131;
    ternary r129 r130 r124 into r132;
    ternary r125 r13.deck[0u32][10u32] r122 into r133;
    ternary r125 r131 r123 into r134;
    ternary r125 r132 r124 into r135;
    is.eq 11u8 r13.flop_ij[0u32][1u32] into r136;
    add r13.flop_ij[0u32][1u32] 1u8 into r137;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r138;
    is.eq r137 26u8 into r139;
    and r138 r139 into r140;
    add r13.flop_ij[0u32][0u32] 1u8 into r141;
    ternary r140 0u8 r137 into r142;
    ternary r140 r141 r135 into r143;
    ternary r136 r13.deck[0u32][11u32] r133 into r144;
    ternary r136 r142 r134 into r145;
    ternary r136 r143 r135 into r146;
    is.eq 12u8 r13.flop_ij[0u32][1u32] into r147;
    add r13.flop_ij[0u32][1u32] 1u8 into r148;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r149;
    is.eq r148 26u8 into r150;
    and r149 r150 into r151;
    add r13.flop_ij[0u32][0u32] 1u8 into r152;
    ternary r151 0u8 r148 into r153;
    ternary r151 r152 r146 into r154;
    ternary r147 r13.deck[0u32][12u32] r144 into r155;
    ternary r147 r153 r145 into r156;
    ternary r147 r154 r146 into r157;
    is.eq 13u8 r13.flop_ij[0u32][1u32] into r158;
    add r13.flop_ij[0u32][1u32] 1u8 into r159;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r160;
    is.eq r159 26u8 into r161;
    and r160 r161 into r162;
    add r13.flop_ij[0u32][0u32] 1u8 into r163;
    ternary r162 0u8 r159 into r164;
    ternary r162 r163 r157 into r165;
    ternary r158 r13.deck[0u32][13u32] r155 into r166;
    ternary r158 r164 r156 into r167;
    ternary r158 r165 r157 into r168;
    is.eq 14u8 r13.flop_ij[0u32][1u32] into r169;
    add r13.flop_ij[0u32][1u32] 1u8 into r170;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r171;
    is.eq r170 26u8 into r172;
    and r171 r172 into r173;
    add r13.flop_ij[0u32][0u32] 1u8 into r174;
    ternary r173 0u8 r170 into r175;
    ternary r173 r174 r168 into r176;
    ternary r169 r13.deck[0u32][14u32] r166 into r177;
    ternary r169 r175 r167 into r178;
    ternary r169 r176 r168 into r179;
    is.eq 15u8 r13.flop_ij[0u32][1u32] into r180;
    add r13.flop_ij[0u32][1u32] 1u8 into r181;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r182;
    is.eq r181 26u8 into r183;
    and r182 r183 into r184;
    add r13.flop_ij[0u32][0u32] 1u8 into r185;
    ternary r184 0u8 r181 into r186;
    ternary r184 r185 r179 into r187;
    ternary r180 r13.deck[0u32][15u32] r177 into r188;
    ternary r180 r186 r178 into r189;
    ternary r180 r187 r179 into r190;
    is.eq 16u8 r13.flop_ij[0u32][1u32] into r191;
    add r13.flop_ij[0u32][1u32] 1u8 into r192;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r193;
    is.eq r192 26u8 into r194;
    and r193 r194 into r195;
    add r13.flop_ij[0u32][0u32] 1u8 into r196;
    ternary r195 0u8 r192 into r197;
    ternary r195 r196 r190 into r198;
    ternary r191 r13.deck[0u32][16u32] r188 into r199;
    ternary r191 r197 r189 into r200;
    ternary r191 r198 r190 into r201;
    is.eq 17u8 r13.flop_ij[0u32][1u32] into r202;
    add r13.flop_ij[0u32][1u32] 1u8 into r203;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r204;
    is.eq r203 26u8 into r205;
    and r204 r205 into r206;
    add r13.flop_ij[0u32][0u32] 1u8 into r207;
    ternary r206 0u8 r203 into r208;
    ternary r206 r207 r201 into r209;
    ternary r202 r13.deck[0u32][17u32] r199 into r210;
    ternary r202 r208 r200 into r211;
    ternary r202 r209 r201 into r212;
    is.eq 18u8 r13.flop_ij[0u32][1u32] into r213;
    add r13.flop_ij[0u32][1u32] 1u8 into r214;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r215;
    is.eq r214 26u8 into r216;
    and r215 r216 into r217;
    add r13.flop_ij[0u32][0u32] 1u8 into r218;
    ternary r217 0u8 r214 into r219;
    ternary r217 r218 r212 into r220;
    ternary r213 r13.deck[0u32][18u32] r210 into r221;
    ternary r213 r219 r211 into r222;
    ternary r213 r220 r212 into r223;
    is.eq 19u8 r13.flop_ij[0u32][1u32] into r224;
    add r13.flop_ij[0u32][1u32] 1u8 into r225;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r226;
    is.eq r225 26u8 into r227;
    and r226 r227 into r228;
    add r13.flop_ij[0u32][0u32] 1u8 into r229;
    ternary r228 0u8 r225 into r230;
    ternary r228 r229 r223 into r231;
    ternary r224 r13.deck[0u32][19u32] r221 into r232;
    ternary r224 r230 r222 into r233;
    ternary r224 r231 r223 into r234;
    is.eq 20u8 r13.flop_ij[0u32][1u32] into r235;
    add r13.flop_ij[0u32][1u32] 1u8 into r236;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r237;
    is.eq r236 26u8 into r238;
    and r237 r238 into r239;
    add r13.flop_ij[0u32][0u32] 1u8 into r240;
    ternary r239 0u8 r236 into r241;
    ternary r239 r240 r234 into r242;
    ternary r235 r13.deck[0u32][20u32] r232 into r243;
    ternary r235 r241 r233 into r244;
    ternary r235 r242 r234 into r245;
    is.eq 21u8 r13.flop_ij[0u32][1u32] into r246;
    add r13.flop_ij[0u32][1u32] 1u8 into r247;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r248;
    is.eq r247 26u8 into r249;
    and r248 r249 into r250;
    add r13.flop_ij[0u32][0u32] 1u8 into r251;
    ternary r250 0u8 r247 into r252;
    ternary r250 r251 r245 into r253;
    ternary r246 r13.deck[0u32][21u32] r243 into r254;
    ternary r246 r252 r244 into r255;
    ternary r246 r253 r245 into r256;
    is.eq 22u8 r13.flop_ij[0u32][1u32] into r257;
    add r13.flop_ij[0u32][1u32] 1u8 into r258;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r259;
    is.eq r258 26u8 into r260;
    and r259 r260 into r261;
    add r13.flop_ij[0u32][0u32] 1u8 into r262;
    ternary r261 0u8 r258 into r263;
    ternary r261 r262 r256 into r264;
    ternary r257 r13.deck[0u32][22u32] r254 into r265;
    ternary r257 r263 r255 into r266;
    ternary r257 r264 r256 into r267;
    is.eq 23u8 r13.flop_ij[0u32][1u32] into r268;
    add r13.flop_ij[0u32][1u32] 1u8 into r269;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r270;
    is.eq r269 26u8 into r271;
    and r270 r271 into r272;
    add r13.flop_ij[0u32][0u32] 1u8 into r273;
    ternary r272 0u8 r269 into r274;
    ternary r272 r273 r267 into r275;
    ternary r268 r13.deck[0u32][23u32] r265 into r276;
    ternary r268 r274 r266 into r277;
    ternary r268 r275 r267 into r278;
    is.eq 24u8 r13.flop_ij[0u32][1u32] into r279;
    add r13.flop_ij[0u32][1u32] 1u8 into r280;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r281;
    is.eq r280 26u8 into r282;
    and r281 r282 into r283;
    add r13.flop_ij[0u32][0u32] 1u8 into r284;
    ternary r283 0u8 r280 into r285;
    ternary r283 r284 r278 into r286;
    ternary r279 r13.deck[0u32][24u32] r276 into r287;
    ternary r279 r285 r277 into r288;
    ternary r279 r286 r278 into r289;
    is.eq 25u8 r13.flop_ij[0u32][1u32] into r290;
    add r13.flop_ij[0u32][1u32] 1u8 into r291;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r292;
    is.eq r291 26u8 into r293;
    and r292 r293 into r294;
    add r13.flop_ij[0u32][0u32] 1u8 into r295;
    ternary r294 0u8 r291 into r296;
    ternary r294 r295 r289 into r297;
    ternary r290 r13.deck[0u32][25u32] r287 into r298;
    ternary r290 r296 r288 into r299;
    ternary r290 r297 r289 into r300;
    ternary r14 r298 0field into r301;
    ternary r14 r299 0u8 into r302;
    ternary r14 r300 0u8 into r303;
    is.eq 1u8 r13.flop_ij[0u32][0u32] into r304;
    is.eq 0u8 r13.flop_ij[0u32][1u32] into r305;
    add r13.flop_ij[0u32][1u32] 1u8 into r306;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r307;
    is.eq r306 26u8 into r308;
    and r307 r308 into r309;
    add r13.flop_ij[0u32][0u32] 1u8 into r310;
    ternary r309 0u8 r306 into r311;
    ternary r309 r310 r303 into r312;
    ternary r305 r13.deck[1u32][0u32] r301 into r313;
    ternary r305 r311 r302 into r314;
    ternary r305 r312 r303 into r315;
    is.eq 1u8 r13.flop_ij[0u32][1u32] into r316;
    add r13.flop_ij[0u32][1u32] 1u8 into r317;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r318;
    is.eq r317 26u8 into r319;
    and r318 r319 into r320;
    add r13.flop_ij[0u32][0u32] 1u8 into r321;
    ternary r320 0u8 r317 into r322;
    ternary r320 r321 r315 into r323;
    ternary r316 r13.deck[1u32][1u32] r313 into r324;
    ternary r316 r322 r314 into r325;
    ternary r316 r323 r315 into r326;
    is.eq 2u8 r13.flop_ij[0u32][1u32] into r327;
    add r13.flop_ij[0u32][1u32] 1u8 into r328;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r329;
    is.eq r328 26u8 into r330;
    and r329 r330 into r331;
    add r13.flop_ij[0u32][0u32] 1u8 into r332;
    ternary r331 0u8 r328 into r333;
    ternary r331 r332 r326 into r334;
    ternary r327 r13.deck[1u32][2u32] r324 into r335;
    ternary r327 r333 r325 into r336;
    ternary r327 r334 r326 into r337;
    is.eq 3u8 r13.flop_ij[0u32][1u32] into r338;
    add r13.flop_ij[0u32][1u32] 1u8 into r339;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r340;
    is.eq r339 26u8 into r341;
    and r340 r341 into r342;
    add r13.flop_ij[0u32][0u32] 1u8 into r343;
    ternary r342 0u8 r339 into r344;
    ternary r342 r343 r337 into r345;
    ternary r338 r13.deck[1u32][3u32] r335 into r346;
    ternary r338 r344 r336 into r347;
    ternary r338 r345 r337 into r348;
    is.eq 4u8 r13.flop_ij[0u32][1u32] into r349;
    add r13.flop_ij[0u32][1u32] 1u8 into r350;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r351;
    is.eq r350 26u8 into r352;
    and r351 r352 into r353;
    add r13.flop_ij[0u32][0u32] 1u8 into r354;
    ternary r353 0u8 r350 into r355;
    ternary r353 r354 r348 into r356;
    ternary r349 r13.deck[1u32][4u32] r346 into r357;
    ternary r349 r355 r347 into r358;
    ternary r349 r356 r348 into r359;
    is.eq 5u8 r13.flop_ij[0u32][1u32] into r360;
    add r13.flop_ij[0u32][1u32] 1u8 into r361;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r362;
    is.eq r361 26u8 into r363;
    and r362 r363 into r364;
    add r13.flop_ij[0u32][0u32] 1u8 into r365;
    ternary r364 0u8 r361 into r366;
    ternary r364 r365 r359 into r367;
    ternary r360 r13.deck[1u32][5u32] r357 into r368;
    ternary r360 r366 r358 into r369;
    ternary r360 r367 r359 into r370;
    is.eq 6u8 r13.flop_ij[0u32][1u32] into r371;
    add r13.flop_ij[0u32][1u32] 1u8 into r372;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r373;
    is.eq r372 26u8 into r374;
    and r373 r374 into r375;
    add r13.flop_ij[0u32][0u32] 1u8 into r376;
    ternary r375 0u8 r372 into r377;
    ternary r375 r376 r370 into r378;
    ternary r371 r13.deck[1u32][6u32] r368 into r379;
    ternary r371 r377 r369 into r380;
    ternary r371 r378 r370 into r381;
    is.eq 7u8 r13.flop_ij[0u32][1u32] into r382;
    add r13.flop_ij[0u32][1u32] 1u8 into r383;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r384;
    is.eq r383 26u8 into r385;
    and r384 r385 into r386;
    add r13.flop_ij[0u32][0u32] 1u8 into r387;
    ternary r386 0u8 r383 into r388;
    ternary r386 r387 r381 into r389;
    ternary r382 r13.deck[1u32][7u32] r379 into r390;
    ternary r382 r388 r380 into r391;
    ternary r382 r389 r381 into r392;
    is.eq 8u8 r13.flop_ij[0u32][1u32] into r393;
    add r13.flop_ij[0u32][1u32] 1u8 into r394;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r395;
    is.eq r394 26u8 into r396;
    and r395 r396 into r397;
    add r13.flop_ij[0u32][0u32] 1u8 into r398;
    ternary r397 0u8 r394 into r399;
    ternary r397 r398 r392 into r400;
    ternary r393 r13.deck[1u32][8u32] r390 into r401;
    ternary r393 r399 r391 into r402;
    ternary r393 r400 r392 into r403;
    is.eq 9u8 r13.flop_ij[0u32][1u32] into r404;
    add r13.flop_ij[0u32][1u32] 1u8 into r405;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r406;
    is.eq r405 26u8 into r407;
    and r406 r407 into r408;
    add r13.flop_ij[0u32][0u32] 1u8 into r409;
    ternary r408 0u8 r405 into r410;
    ternary r408 r409 r403 into r411;
    ternary r404 r13.deck[1u32][9u32] r401 into r412;
    ternary r404 r410 r402 into r413;
    ternary r404 r411 r403 into r414;
    is.eq 10u8 r13.flop_ij[0u32][1u32] into r415;
    add r13.flop_ij[0u32][1u32] 1u8 into r416;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r417;
    is.eq r416 26u8 into r418;
    and r417 r418 into r419;
    add r13.flop_ij[0u32][0u32] 1u8 into r420;
    ternary r419 0u8 r416 into r421;
    ternary r419 r420 r414 into r422;
    ternary r415 r13.deck[1u32][10u32] r412 into r423;
    ternary r415 r421 r413 into r424;
    ternary r415 r422 r414 into r425;
    is.eq 11u8 r13.flop_ij[0u32][1u32] into r426;
    add r13.flop_ij[0u32][1u32] 1u8 into r427;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r428;
    is.eq r427 26u8 into r429;
    and r428 r429 into r430;
    add r13.flop_ij[0u32][0u32] 1u8 into r431;
    ternary r430 0u8 r427 into r432;
    ternary r430 r431 r425 into r433;
    ternary r426 r13.deck[1u32][11u32] r423 into r434;
    ternary r426 r432 r424 into r435;
    ternary r426 r433 r425 into r436;
    is.eq 12u8 r13.flop_ij[0u32][1u32] into r437;
    add r13.flop_ij[0u32][1u32] 1u8 into r438;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r439;
    is.eq r438 26u8 into r440;
    and r439 r440 into r441;
    add r13.flop_ij[0u32][0u32] 1u8 into r442;
    ternary r441 0u8 r438 into r443;
    ternary r441 r442 r436 into r444;
    ternary r437 r13.deck[1u32][12u32] r434 into r445;
    ternary r437 r443 r435 into r446;
    ternary r437 r444 r436 into r447;
    is.eq 13u8 r13.flop_ij[0u32][1u32] into r448;
    add r13.flop_ij[0u32][1u32] 1u8 into r449;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r450;
    is.eq r449 26u8 into r451;
    and r450 r451 into r452;
    add r13.flop_ij[0u32][0u32] 1u8 into r453;
    ternary r452 0u8 r449 into r454;
    ternary r452 r453 r447 into r455;
    ternary r448 r13.deck[1u32][13u32] r445 into r456;
    ternary r448 r454 r446 into r457;
    ternary r448 r455 r447 into r458;
    is.eq 14u8 r13.flop_ij[0u32][1u32] into r459;
    add r13.flop_ij[0u32][1u32] 1u8 into r460;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r461;
    is.eq r460 26u8 into r462;
    and r461 r462 into r463;
    add r13.flop_ij[0u32][0u32] 1u8 into r464;
    ternary r463 0u8 r460 into r465;
    ternary r463 r464 r458 into r466;
    ternary r459 r13.deck[1u32][14u32] r456 into r467;
    ternary r459 r465 r457 into r468;
    ternary r459 r466 r458 into r469;
    is.eq 15u8 r13.flop_ij[0u32][1u32] into r470;
    add r13.flop_ij[0u32][1u32] 1u8 into r471;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r472;
    is.eq r471 26u8 into r473;
    and r472 r473 into r474;
    add r13.flop_ij[0u32][0u32] 1u8 into r475;
    ternary r474 0u8 r471 into r476;
    ternary r474 r475 r469 into r477;
    ternary r470 r13.deck[1u32][15u32] r467 into r478;
    ternary r470 r476 r468 into r479;
    ternary r470 r477 r469 into r480;
    is.eq 16u8 r13.flop_ij[0u32][1u32] into r481;
    add r13.flop_ij[0u32][1u32] 1u8 into r482;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r483;
    is.eq r482 26u8 into r484;
    and r483 r484 into r485;
    add r13.flop_ij[0u32][0u32] 1u8 into r486;
    ternary r485 0u8 r482 into r487;
    ternary r485 r486 r480 into r488;
    ternary r481 r13.deck[1u32][16u32] r478 into r489;
    ternary r481 r487 r479 into r490;
    ternary r481 r488 r480 into r491;
    is.eq 17u8 r13.flop_ij[0u32][1u32] into r492;
    add r13.flop_ij[0u32][1u32] 1u8 into r493;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r494;
    is.eq r493 26u8 into r495;
    and r494 r495 into r496;
    add r13.flop_ij[0u32][0u32] 1u8 into r497;
    ternary r496 0u8 r493 into r498;
    ternary r496 r497 r491 into r499;
    ternary r492 r13.deck[1u32][17u32] r489 into r500;
    ternary r492 r498 r490 into r501;
    ternary r492 r499 r491 into r502;
    is.eq 18u8 r13.flop_ij[0u32][1u32] into r503;
    add r13.flop_ij[0u32][1u32] 1u8 into r504;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r505;
    is.eq r504 26u8 into r506;
    and r505 r506 into r507;
    add r13.flop_ij[0u32][0u32] 1u8 into r508;
    ternary r507 0u8 r504 into r509;
    ternary r507 r508 r502 into r510;
    ternary r503 r13.deck[1u32][18u32] r500 into r511;
    ternary r503 r509 r501 into r512;
    ternary r503 r510 r502 into r513;
    is.eq 19u8 r13.flop_ij[0u32][1u32] into r514;
    add r13.flop_ij[0u32][1u32] 1u8 into r515;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r516;
    is.eq r515 26u8 into r517;
    and r516 r517 into r518;
    add r13.flop_ij[0u32][0u32] 1u8 into r519;
    ternary r518 0u8 r515 into r520;
    ternary r518 r519 r513 into r521;
    ternary r514 r13.deck[1u32][19u32] r511 into r522;
    ternary r514 r520 r512 into r523;
    ternary r514 r521 r513 into r524;
    is.eq 20u8 r13.flop_ij[0u32][1u32] into r525;
    add r13.flop_ij[0u32][1u32] 1u8 into r526;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r527;
    is.eq r526 26u8 into r528;
    and r527 r528 into r529;
    add r13.flop_ij[0u32][0u32] 1u8 into r530;
    ternary r529 0u8 r526 into r531;
    ternary r529 r530 r524 into r532;
    ternary r525 r13.deck[1u32][20u32] r522 into r533;
    ternary r525 r531 r523 into r534;
    ternary r525 r532 r524 into r535;
    is.eq 21u8 r13.flop_ij[0u32][1u32] into r536;
    add r13.flop_ij[0u32][1u32] 1u8 into r537;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r538;
    is.eq r537 26u8 into r539;
    and r538 r539 into r540;
    add r13.flop_ij[0u32][0u32] 1u8 into r541;
    ternary r540 0u8 r537 into r542;
    ternary r540 r541 r535 into r543;
    ternary r536 r13.deck[1u32][21u32] r533 into r544;
    ternary r536 r542 r534 into r545;
    ternary r536 r543 r535 into r546;
    is.eq 22u8 r13.flop_ij[0u32][1u32] into r547;
    add r13.flop_ij[0u32][1u32] 1u8 into r548;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r549;
    is.eq r548 26u8 into r550;
    and r549 r550 into r551;
    add r13.flop_ij[0u32][0u32] 1u8 into r552;
    ternary r551 0u8 r548 into r553;
    ternary r551 r552 r546 into r554;
    ternary r547 r13.deck[1u32][22u32] r544 into r555;
    ternary r547 r553 r545 into r556;
    ternary r547 r554 r546 into r557;
    is.eq 23u8 r13.flop_ij[0u32][1u32] into r558;
    add r13.flop_ij[0u32][1u32] 1u8 into r559;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r560;
    is.eq r559 26u8 into r561;
    and r560 r561 into r562;
    add r13.flop_ij[0u32][0u32] 1u8 into r563;
    ternary r562 0u8 r559 into r564;
    ternary r562 r563 r557 into r565;
    ternary r558 r13.deck[1u32][23u32] r555 into r566;
    ternary r558 r564 r556 into r567;
    ternary r558 r565 r557 into r568;
    is.eq 24u8 r13.flop_ij[0u32][1u32] into r569;
    add r13.flop_ij[0u32][1u32] 1u8 into r570;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r571;
    is.eq r570 26u8 into r572;
    and r571 r572 into r573;
    add r13.flop_ij[0u32][0u32] 1u8 into r574;
    ternary r573 0u8 r570 into r575;
    ternary r573 r574 r568 into r576;
    ternary r569 r13.deck[1u32][24u32] r566 into r577;
    ternary r569 r575 r567 into r578;
    ternary r569 r576 r568 into r579;
    is.eq 25u8 r13.flop_ij[0u32][1u32] into r580;
    add r13.flop_ij[0u32][1u32] 1u8 into r581;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r582;
    is.eq r581 26u8 into r583;
    and r582 r583 into r584;
    add r13.flop_ij[0u32][0u32] 1u8 into r585;
    ternary r584 0u8 r581 into r586;
    ternary r584 r585 r579 into r587;
    ternary r580 r13.deck[1u32][25u32] r577 into r588;
    ternary r580 r586 r578 into r589;
    ternary r580 r587 r579 into r590;
    ternary r304 r588 r301 into r591;
    ternary r304 r589 r302 into r592;
    ternary r304 r590 r303 into r593;
    is.eq 0u8 r13.flop_ij[1u32][0u32] into r594;
    is.eq 0u8 r13.flop_ij[1u32][1u32] into r595;
    add r13.flop_ij[1u32][1u32] 1u8 into r596;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r597;
    is.eq r596 26u8 into r598;
    and r597 r598 into r599;
    add r13.flop_ij[1u32][0u32] 1u8 into r600;
    ternary r599 0u8 r596 into r601;
    ternary r599 r600 0u8 into r602;
    ternary r595 r13.deck[0u32][0u32] 0field into r603;
    ternary r595 r601 0u8 into r604;
    ternary r595 r602 0u8 into r605;
    is.eq 1u8 r13.flop_ij[1u32][1u32] into r606;
    add r13.flop_ij[1u32][1u32] 1u8 into r607;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r608;
    is.eq r607 26u8 into r609;
    and r608 r609 into r610;
    add r13.flop_ij[1u32][0u32] 1u8 into r611;
    ternary r610 0u8 r607 into r612;
    ternary r610 r611 r605 into r613;
    ternary r606 r13.deck[0u32][1u32] r603 into r614;
    ternary r606 r612 r604 into r615;
    ternary r606 r613 r605 into r616;
    is.eq 2u8 r13.flop_ij[1u32][1u32] into r617;
    add r13.flop_ij[1u32][1u32] 1u8 into r618;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r619;
    is.eq r618 26u8 into r620;
    and r619 r620 into r621;
    add r13.flop_ij[1u32][0u32] 1u8 into r622;
    ternary r621 0u8 r618 into r623;
    ternary r621 r622 r616 into r624;
    ternary r617 r13.deck[0u32][2u32] r614 into r625;
    ternary r617 r623 r615 into r626;
    ternary r617 r624 r616 into r627;
    is.eq 3u8 r13.flop_ij[1u32][1u32] into r628;
    add r13.flop_ij[1u32][1u32] 1u8 into r629;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r630;
    is.eq r629 26u8 into r631;
    and r630 r631 into r632;
    add r13.flop_ij[1u32][0u32] 1u8 into r633;
    ternary r632 0u8 r629 into r634;
    ternary r632 r633 r627 into r635;
    ternary r628 r13.deck[0u32][3u32] r625 into r636;
    ternary r628 r634 r626 into r637;
    ternary r628 r635 r627 into r638;
    is.eq 4u8 r13.flop_ij[1u32][1u32] into r639;
    add r13.flop_ij[1u32][1u32] 1u8 into r640;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r641;
    is.eq r640 26u8 into r642;
    and r641 r642 into r643;
    add r13.flop_ij[1u32][0u32] 1u8 into r644;
    ternary r643 0u8 r640 into r645;
    ternary r643 r644 r638 into r646;
    ternary r639 r13.deck[0u32][4u32] r636 into r647;
    ternary r639 r645 r637 into r648;
    ternary r639 r646 r638 into r649;
    is.eq 5u8 r13.flop_ij[1u32][1u32] into r650;
    add r13.flop_ij[1u32][1u32] 1u8 into r651;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r652;
    is.eq r651 26u8 into r653;
    and r652 r653 into r654;
    add r13.flop_ij[1u32][0u32] 1u8 into r655;
    ternary r654 0u8 r651 into r656;
    ternary r654 r655 r649 into r657;
    ternary r650 r13.deck[0u32][5u32] r647 into r658;
    ternary r650 r656 r648 into r659;
    ternary r650 r657 r649 into r660;
    is.eq 6u8 r13.flop_ij[1u32][1u32] into r661;
    add r13.flop_ij[1u32][1u32] 1u8 into r662;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r663;
    is.eq r662 26u8 into r664;
    and r663 r664 into r665;
    add r13.flop_ij[1u32][0u32] 1u8 into r666;
    ternary r665 0u8 r662 into r667;
    ternary r665 r666 r660 into r668;
    ternary r661 r13.deck[0u32][6u32] r658 into r669;
    ternary r661 r667 r659 into r670;
    ternary r661 r668 r660 into r671;
    is.eq 7u8 r13.flop_ij[1u32][1u32] into r672;
    add r13.flop_ij[1u32][1u32] 1u8 into r673;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r674;
    is.eq r673 26u8 into r675;
    and r674 r675 into r676;
    add r13.flop_ij[1u32][0u32] 1u8 into r677;
    ternary r676 0u8 r673 into r678;
    ternary r676 r677 r671 into r679;
    ternary r672 r13.deck[0u32][7u32] r669 into r680;
    ternary r672 r678 r670 into r681;
    ternary r672 r679 r671 into r682;
    is.eq 8u8 r13.flop_ij[1u32][1u32] into r683;
    add r13.flop_ij[1u32][1u32] 1u8 into r684;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r685;
    is.eq r684 26u8 into r686;
    and r685 r686 into r687;
    add r13.flop_ij[1u32][0u32] 1u8 into r688;
    ternary r687 0u8 r684 into r689;
    ternary r687 r688 r682 into r690;
    ternary r683 r13.deck[0u32][8u32] r680 into r691;
    ternary r683 r689 r681 into r692;
    ternary r683 r690 r682 into r693;
    is.eq 9u8 r13.flop_ij[1u32][1u32] into r694;
    add r13.flop_ij[1u32][1u32] 1u8 into r695;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r696;
    is.eq r695 26u8 into r697;
    and r696 r697 into r698;
    add r13.flop_ij[1u32][0u32] 1u8 into r699;
    ternary r698 0u8 r695 into r700;
    ternary r698 r699 r693 into r701;
    ternary r694 r13.deck[0u32][9u32] r691 into r702;
    ternary r694 r700 r692 into r703;
    ternary r694 r701 r693 into r704;
    is.eq 10u8 r13.flop_ij[1u32][1u32] into r705;
    add r13.flop_ij[1u32][1u32] 1u8 into r706;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r707;
    is.eq r706 26u8 into r708;
    and r707 r708 into r709;
    add r13.flop_ij[1u32][0u32] 1u8 into r710;
    ternary r709 0u8 r706 into r711;
    ternary r709 r710 r704 into r712;
    ternary r705 r13.deck[0u32][10u32] r702 into r713;
    ternary r705 r711 r703 into r714;
    ternary r705 r712 r704 into r715;
    is.eq 11u8 r13.flop_ij[1u32][1u32] into r716;
    add r13.flop_ij[1u32][1u32] 1u8 into r717;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r718;
    is.eq r717 26u8 into r719;
    and r718 r719 into r720;
    add r13.flop_ij[1u32][0u32] 1u8 into r721;
    ternary r720 0u8 r717 into r722;
    ternary r720 r721 r715 into r723;
    ternary r716 r13.deck[0u32][11u32] r713 into r724;
    ternary r716 r722 r714 into r725;
    ternary r716 r723 r715 into r726;
    is.eq 12u8 r13.flop_ij[1u32][1u32] into r727;
    add r13.flop_ij[1u32][1u32] 1u8 into r728;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r729;
    is.eq r728 26u8 into r730;
    and r729 r730 into r731;
    add r13.flop_ij[1u32][0u32] 1u8 into r732;
    ternary r731 0u8 r728 into r733;
    ternary r731 r732 r726 into r734;
    ternary r727 r13.deck[0u32][12u32] r724 into r735;
    ternary r727 r733 r725 into r736;
    ternary r727 r734 r726 into r737;
    is.eq 13u8 r13.flop_ij[1u32][1u32] into r738;
    add r13.flop_ij[1u32][1u32] 1u8 into r739;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r740;
    is.eq r739 26u8 into r741;
    and r740 r741 into r742;
    add r13.flop_ij[1u32][0u32] 1u8 into r743;
    ternary r742 0u8 r739 into r744;
    ternary r742 r743 r737 into r745;
    ternary r738 r13.deck[0u32][13u32] r735 into r746;
    ternary r738 r744 r736 into r747;
    ternary r738 r745 r737 into r748;
    is.eq 14u8 r13.flop_ij[1u32][1u32] into r749;
    add r13.flop_ij[1u32][1u32] 1u8 into r750;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r751;
    is.eq r750 26u8 into r752;
    and r751 r752 into r753;
    add r13.flop_ij[1u32][0u32] 1u8 into r754;
    ternary r753 0u8 r750 into r755;
    ternary r753 r754 r748 into r756;
    ternary r749 r13.deck[0u32][14u32] r746 into r757;
    ternary r749 r755 r747 into r758;
    ternary r749 r756 r748 into r759;
    is.eq 15u8 r13.flop_ij[1u32][1u32] into r760;
    add r13.flop_ij[1u32][1u32] 1u8 into r761;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r762;
    is.eq r761 26u8 into r763;
    and r762 r763 into r764;
    add r13.flop_ij[1u32][0u32] 1u8 into r765;
    ternary r764 0u8 r761 into r766;
    ternary r764 r765 r759 into r767;
    ternary r760 r13.deck[0u32][15u32] r757 into r768;
    ternary r760 r766 r758 into r769;
    ternary r760 r767 r759 into r770;
    is.eq 16u8 r13.flop_ij[1u32][1u32] into r771;
    add r13.flop_ij[1u32][1u32] 1u8 into r772;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r773;
    is.eq r772 26u8 into r774;
    and r773 r774 into r775;
    add r13.flop_ij[1u32][0u32] 1u8 into r776;
    ternary r775 0u8 r772 into r777;
    ternary r775 r776 r770 into r778;
    ternary r771 r13.deck[0u32][16u32] r768 into r779;
    ternary r771 r777 r769 into r780;
    ternary r771 r778 r770 into r781;
    is.eq 17u8 r13.flop_ij[1u32][1u32] into r782;
    add r13.flop_ij[1u32][1u32] 1u8 into r783;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r784;
    is.eq r783 26u8 into r785;
    and r784 r785 into r786;
    add r13.flop_ij[1u32][0u32] 1u8 into r787;
    ternary r786 0u8 r783 into r788;
    ternary r786 r787 r781 into r789;
    ternary r782 r13.deck[0u32][17u32] r779 into r790;
    ternary r782 r788 r780 into r791;
    ternary r782 r789 r781 into r792;
    is.eq 18u8 r13.flop_ij[1u32][1u32] into r793;
    add r13.flop_ij[1u32][1u32] 1u8 into r794;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r795;
    is.eq r794 26u8 into r796;
    and r795 r796 into r797;
    add r13.flop_ij[1u32][0u32] 1u8 into r798;
    ternary r797 0u8 r794 into r799;
    ternary r797 r798 r792 into r800;
    ternary r793 r13.deck[0u32][18u32] r790 into r801;
    ternary r793 r799 r791 into r802;
    ternary r793 r800 r792 into r803;
    is.eq 19u8 r13.flop_ij[1u32][1u32] into r804;
    add r13.flop_ij[1u32][1u32] 1u8 into r805;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r806;
    is.eq r805 26u8 into r807;
    and r806 r807 into r808;
    add r13.flop_ij[1u32][0u32] 1u8 into r809;
    ternary r808 0u8 r805 into r810;
    ternary r808 r809 r803 into r811;
    ternary r804 r13.deck[0u32][19u32] r801 into r812;
    ternary r804 r810 r802 into r813;
    ternary r804 r811 r803 into r814;
    is.eq 20u8 r13.flop_ij[1u32][1u32] into r815;
    add r13.flop_ij[1u32][1u32] 1u8 into r816;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r817;
    is.eq r816 26u8 into r818;
    and r817 r818 into r819;
    add r13.flop_ij[1u32][0u32] 1u8 into r820;
    ternary r819 0u8 r816 into r821;
    ternary r819 r820 r814 into r822;
    ternary r815 r13.deck[0u32][20u32] r812 into r823;
    ternary r815 r821 r813 into r824;
    ternary r815 r822 r814 into r825;
    is.eq 21u8 r13.flop_ij[1u32][1u32] into r826;
    add r13.flop_ij[1u32][1u32] 1u8 into r827;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r828;
    is.eq r827 26u8 into r829;
    and r828 r829 into r830;
    add r13.flop_ij[1u32][0u32] 1u8 into r831;
    ternary r830 0u8 r827 into r832;
    ternary r830 r831 r825 into r833;
    ternary r826 r13.deck[0u32][21u32] r823 into r834;
    ternary r826 r832 r824 into r835;
    ternary r826 r833 r825 into r836;
    is.eq 22u8 r13.flop_ij[1u32][1u32] into r837;
    add r13.flop_ij[1u32][1u32] 1u8 into r838;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r839;
    is.eq r838 26u8 into r840;
    and r839 r840 into r841;
    add r13.flop_ij[1u32][0u32] 1u8 into r842;
    ternary r841 0u8 r838 into r843;
    ternary r841 r842 r836 into r844;
    ternary r837 r13.deck[0u32][22u32] r834 into r845;
    ternary r837 r843 r835 into r846;
    ternary r837 r844 r836 into r847;
    is.eq 23u8 r13.flop_ij[1u32][1u32] into r848;
    add r13.flop_ij[1u32][1u32] 1u8 into r849;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r850;
    is.eq r849 26u8 into r851;
    and r850 r851 into r852;
    add r13.flop_ij[1u32][0u32] 1u8 into r853;
    ternary r852 0u8 r849 into r854;
    ternary r852 r853 r847 into r855;
    ternary r848 r13.deck[0u32][23u32] r845 into r856;
    ternary r848 r854 r846 into r857;
    ternary r848 r855 r847 into r858;
    is.eq 24u8 r13.flop_ij[1u32][1u32] into r859;
    add r13.flop_ij[1u32][1u32] 1u8 into r860;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r861;
    is.eq r860 26u8 into r862;
    and r861 r862 into r863;
    add r13.flop_ij[1u32][0u32] 1u8 into r864;
    ternary r863 0u8 r860 into r865;
    ternary r863 r864 r858 into r866;
    ternary r859 r13.deck[0u32][24u32] r856 into r867;
    ternary r859 r865 r857 into r868;
    ternary r859 r866 r858 into r869;
    is.eq 25u8 r13.flop_ij[1u32][1u32] into r870;
    add r13.flop_ij[1u32][1u32] 1u8 into r871;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r872;
    is.eq r871 26u8 into r873;
    and r872 r873 into r874;
    add r13.flop_ij[1u32][0u32] 1u8 into r875;
    ternary r874 0u8 r871 into r876;
    ternary r874 r875 r869 into r877;
    ternary r870 r13.deck[0u32][25u32] r867 into r878;
    ternary r870 r876 r868 into r879;
    ternary r870 r877 r869 into r880;
    ternary r594 r878 0field into r881;
    ternary r594 r879 0u8 into r882;
    ternary r594 r880 0u8 into r883;
    is.eq 1u8 r13.flop_ij[1u32][0u32] into r884;
    is.eq 0u8 r13.flop_ij[1u32][1u32] into r885;
    add r13.flop_ij[1u32][1u32] 1u8 into r886;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r887;
    is.eq r886 26u8 into r888;
    and r887 r888 into r889;
    add r13.flop_ij[1u32][0u32] 1u8 into r890;
    ternary r889 0u8 r886 into r891;
    ternary r889 r890 r883 into r892;
    ternary r885 r13.deck[1u32][0u32] r881 into r893;
    ternary r885 r891 r882 into r894;
    ternary r885 r892 r883 into r895;
    is.eq 1u8 r13.flop_ij[1u32][1u32] into r896;
    add r13.flop_ij[1u32][1u32] 1u8 into r897;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r898;
    is.eq r897 26u8 into r899;
    and r898 r899 into r900;
    add r13.flop_ij[1u32][0u32] 1u8 into r901;
    ternary r900 0u8 r897 into r902;
    ternary r900 r901 r895 into r903;
    ternary r896 r13.deck[1u32][1u32] r893 into r904;
    ternary r896 r902 r894 into r905;
    ternary r896 r903 r895 into r906;
    is.eq 2u8 r13.flop_ij[1u32][1u32] into r907;
    add r13.flop_ij[1u32][1u32] 1u8 into r908;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r909;
    is.eq r908 26u8 into r910;
    and r909 r910 into r911;
    add r13.flop_ij[1u32][0u32] 1u8 into r912;
    ternary r911 0u8 r908 into r913;
    ternary r911 r912 r906 into r914;
    ternary r907 r13.deck[1u32][2u32] r904 into r915;
    ternary r907 r913 r905 into r916;
    ternary r907 r914 r906 into r917;
    is.eq 3u8 r13.flop_ij[1u32][1u32] into r918;
    add r13.flop_ij[1u32][1u32] 1u8 into r919;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r920;
    is.eq r919 26u8 into r921;
    and r920 r921 into r922;
    add r13.flop_ij[1u32][0u32] 1u8 into r923;
    ternary r922 0u8 r919 into r924;
    ternary r922 r923 r917 into r925;
    ternary r918 r13.deck[1u32][3u32] r915 into r926;
    ternary r918 r924 r916 into r927;
    ternary r918 r925 r917 into r928;
    is.eq 4u8 r13.flop_ij[1u32][1u32] into r929;
    add r13.flop_ij[1u32][1u32] 1u8 into r930;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r931;
    is.eq r930 26u8 into r932;
    and r931 r932 into r933;
    add r13.flop_ij[1u32][0u32] 1u8 into r934;
    ternary r933 0u8 r930 into r935;
    ternary r933 r934 r928 into r936;
    ternary r929 r13.deck[1u32][4u32] r926 into r937;
    ternary r929 r935 r927 into r938;
    ternary r929 r936 r928 into r939;
    is.eq 5u8 r13.flop_ij[1u32][1u32] into r940;
    add r13.flop_ij[1u32][1u32] 1u8 into r941;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r942;
    is.eq r941 26u8 into r943;
    and r942 r943 into r944;
    add r13.flop_ij[1u32][0u32] 1u8 into r945;
    ternary r944 0u8 r941 into r946;
    ternary r944 r945 r939 into r947;
    ternary r940 r13.deck[1u32][5u32] r937 into r948;
    ternary r940 r946 r938 into r949;
    ternary r940 r947 r939 into r950;
    is.eq 6u8 r13.flop_ij[1u32][1u32] into r951;
    add r13.flop_ij[1u32][1u32] 1u8 into r952;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r953;
    is.eq r952 26u8 into r954;
    and r953 r954 into r955;
    add r13.flop_ij[1u32][0u32] 1u8 into r956;
    ternary r955 0u8 r952 into r957;
    ternary r955 r956 r950 into r958;
    ternary r951 r13.deck[1u32][6u32] r948 into r959;
    ternary r951 r957 r949 into r960;
    ternary r951 r958 r950 into r961;
    is.eq 7u8 r13.flop_ij[1u32][1u32] into r962;
    add r13.flop_ij[1u32][1u32] 1u8 into r963;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r964;
    is.eq r963 26u8 into r965;
    and r964 r965 into r966;
    add r13.flop_ij[1u32][0u32] 1u8 into r967;
    ternary r966 0u8 r963 into r968;
    ternary r966 r967 r961 into r969;
    ternary r962 r13.deck[1u32][7u32] r959 into r970;
    ternary r962 r968 r960 into r971;
    ternary r962 r969 r961 into r972;
    is.eq 8u8 r13.flop_ij[1u32][1u32] into r973;
    add r13.flop_ij[1u32][1u32] 1u8 into r974;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r975;
    is.eq r974 26u8 into r976;
    and r975 r976 into r977;
    add r13.flop_ij[1u32][0u32] 1u8 into r978;
    ternary r977 0u8 r974 into r979;
    ternary r977 r978 r972 into r980;
    ternary r973 r13.deck[1u32][8u32] r970 into r981;
    ternary r973 r979 r971 into r982;
    ternary r973 r980 r972 into r983;
    is.eq 9u8 r13.flop_ij[1u32][1u32] into r984;
    add r13.flop_ij[1u32][1u32] 1u8 into r985;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r986;
    is.eq r985 26u8 into r987;
    and r986 r987 into r988;
    add r13.flop_ij[1u32][0u32] 1u8 into r989;
    ternary r988 0u8 r985 into r990;
    ternary r988 r989 r983 into r991;
    ternary r984 r13.deck[1u32][9u32] r981 into r992;
    ternary r984 r990 r982 into r993;
    ternary r984 r991 r983 into r994;
    is.eq 10u8 r13.flop_ij[1u32][1u32] into r995;
    add r13.flop_ij[1u32][1u32] 1u8 into r996;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r997;
    is.eq r996 26u8 into r998;
    and r997 r998 into r999;
    add r13.flop_ij[1u32][0u32] 1u8 into r1000;
    ternary r999 0u8 r996 into r1001;
    ternary r999 r1000 r994 into r1002;
    ternary r995 r13.deck[1u32][10u32] r992 into r1003;
    ternary r995 r1001 r993 into r1004;
    ternary r995 r1002 r994 into r1005;
    is.eq 11u8 r13.flop_ij[1u32][1u32] into r1006;
    add r13.flop_ij[1u32][1u32] 1u8 into r1007;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1008;
    is.eq r1007 26u8 into r1009;
    and r1008 r1009 into r1010;
    add r13.flop_ij[1u32][0u32] 1u8 into r1011;
    ternary r1010 0u8 r1007 into r1012;
    ternary r1010 r1011 r1005 into r1013;
    ternary r1006 r13.deck[1u32][11u32] r1003 into r1014;
    ternary r1006 r1012 r1004 into r1015;
    ternary r1006 r1013 r1005 into r1016;
    is.eq 12u8 r13.flop_ij[1u32][1u32] into r1017;
    add r13.flop_ij[1u32][1u32] 1u8 into r1018;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1019;
    is.eq r1018 26u8 into r1020;
    and r1019 r1020 into r1021;
    add r13.flop_ij[1u32][0u32] 1u8 into r1022;
    ternary r1021 0u8 r1018 into r1023;
    ternary r1021 r1022 r1016 into r1024;
    ternary r1017 r13.deck[1u32][12u32] r1014 into r1025;
    ternary r1017 r1023 r1015 into r1026;
    ternary r1017 r1024 r1016 into r1027;
    is.eq 13u8 r13.flop_ij[1u32][1u32] into r1028;
    add r13.flop_ij[1u32][1u32] 1u8 into r1029;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1030;
    is.eq r1029 26u8 into r1031;
    and r1030 r1031 into r1032;
    add r13.flop_ij[1u32][0u32] 1u8 into r1033;
    ternary r1032 0u8 r1029 into r1034;
    ternary r1032 r1033 r1027 into r1035;
    ternary r1028 r13.deck[1u32][13u32] r1025 into r1036;
    ternary r1028 r1034 r1026 into r1037;
    ternary r1028 r1035 r1027 into r1038;
    is.eq 14u8 r13.flop_ij[1u32][1u32] into r1039;
    add r13.flop_ij[1u32][1u32] 1u8 into r1040;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1041;
    is.eq r1040 26u8 into r1042;
    and r1041 r1042 into r1043;
    add r13.flop_ij[1u32][0u32] 1u8 into r1044;
    ternary r1043 0u8 r1040 into r1045;
    ternary r1043 r1044 r1038 into r1046;
    ternary r1039 r13.deck[1u32][14u32] r1036 into r1047;
    ternary r1039 r1045 r1037 into r1048;
    ternary r1039 r1046 r1038 into r1049;
    is.eq 15u8 r13.flop_ij[1u32][1u32] into r1050;
    add r13.flop_ij[1u32][1u32] 1u8 into r1051;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1052;
    is.eq r1051 26u8 into r1053;
    and r1052 r1053 into r1054;
    add r13.flop_ij[1u32][0u32] 1u8 into r1055;
    ternary r1054 0u8 r1051 into r1056;
    ternary r1054 r1055 r1049 into r1057;
    ternary r1050 r13.deck[1u32][15u32] r1047 into r1058;
    ternary r1050 r1056 r1048 into r1059;
    ternary r1050 r1057 r1049 into r1060;
    is.eq 16u8 r13.flop_ij[1u32][1u32] into r1061;
    add r13.flop_ij[1u32][1u32] 1u8 into r1062;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1063;
    is.eq r1062 26u8 into r1064;
    and r1063 r1064 into r1065;
    add r13.flop_ij[1u32][0u32] 1u8 into r1066;
    ternary r1065 0u8 r1062 into r1067;
    ternary r1065 r1066 r1060 into r1068;
    ternary r1061 r13.deck[1u32][16u32] r1058 into r1069;
    ternary r1061 r1067 r1059 into r1070;
    ternary r1061 r1068 r1060 into r1071;
    is.eq 17u8 r13.flop_ij[1u32][1u32] into r1072;
    add r13.flop_ij[1u32][1u32] 1u8 into r1073;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1074;
    is.eq r1073 26u8 into r1075;
    and r1074 r1075 into r1076;
    add r13.flop_ij[1u32][0u32] 1u8 into r1077;
    ternary r1076 0u8 r1073 into r1078;
    ternary r1076 r1077 r1071 into r1079;
    ternary r1072 r13.deck[1u32][17u32] r1069 into r1080;
    ternary r1072 r1078 r1070 into r1081;
    ternary r1072 r1079 r1071 into r1082;
    is.eq 18u8 r13.flop_ij[1u32][1u32] into r1083;
    add r13.flop_ij[1u32][1u32] 1u8 into r1084;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1085;
    is.eq r1084 26u8 into r1086;
    and r1085 r1086 into r1087;
    add r13.flop_ij[1u32][0u32] 1u8 into r1088;
    ternary r1087 0u8 r1084 into r1089;
    ternary r1087 r1088 r1082 into r1090;
    ternary r1083 r13.deck[1u32][18u32] r1080 into r1091;
    ternary r1083 r1089 r1081 into r1092;
    ternary r1083 r1090 r1082 into r1093;
    is.eq 19u8 r13.flop_ij[1u32][1u32] into r1094;
    add r13.flop_ij[1u32][1u32] 1u8 into r1095;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1096;
    is.eq r1095 26u8 into r1097;
    and r1096 r1097 into r1098;
    add r13.flop_ij[1u32][0u32] 1u8 into r1099;
    ternary r1098 0u8 r1095 into r1100;
    ternary r1098 r1099 r1093 into r1101;
    ternary r1094 r13.deck[1u32][19u32] r1091 into r1102;
    ternary r1094 r1100 r1092 into r1103;
    ternary r1094 r1101 r1093 into r1104;
    is.eq 20u8 r13.flop_ij[1u32][1u32] into r1105;
    add r13.flop_ij[1u32][1u32] 1u8 into r1106;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1107;
    is.eq r1106 26u8 into r1108;
    and r1107 r1108 into r1109;
    add r13.flop_ij[1u32][0u32] 1u8 into r1110;
    ternary r1109 0u8 r1106 into r1111;
    ternary r1109 r1110 r1104 into r1112;
    ternary r1105 r13.deck[1u32][20u32] r1102 into r1113;
    ternary r1105 r1111 r1103 into r1114;
    ternary r1105 r1112 r1104 into r1115;
    is.eq 21u8 r13.flop_ij[1u32][1u32] into r1116;
    add r13.flop_ij[1u32][1u32] 1u8 into r1117;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1118;
    is.eq r1117 26u8 into r1119;
    and r1118 r1119 into r1120;
    add r13.flop_ij[1u32][0u32] 1u8 into r1121;
    ternary r1120 0u8 r1117 into r1122;
    ternary r1120 r1121 r1115 into r1123;
    ternary r1116 r13.deck[1u32][21u32] r1113 into r1124;
    ternary r1116 r1122 r1114 into r1125;
    ternary r1116 r1123 r1115 into r1126;
    is.eq 22u8 r13.flop_ij[1u32][1u32] into r1127;
    add r13.flop_ij[1u32][1u32] 1u8 into r1128;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1129;
    is.eq r1128 26u8 into r1130;
    and r1129 r1130 into r1131;
    add r13.flop_ij[1u32][0u32] 1u8 into r1132;
    ternary r1131 0u8 r1128 into r1133;
    ternary r1131 r1132 r1126 into r1134;
    ternary r1127 r13.deck[1u32][22u32] r1124 into r1135;
    ternary r1127 r1133 r1125 into r1136;
    ternary r1127 r1134 r1126 into r1137;
    is.eq 23u8 r13.flop_ij[1u32][1u32] into r1138;
    add r13.flop_ij[1u32][1u32] 1u8 into r1139;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1140;
    is.eq r1139 26u8 into r1141;
    and r1140 r1141 into r1142;
    add r13.flop_ij[1u32][0u32] 1u8 into r1143;
    ternary r1142 0u8 r1139 into r1144;
    ternary r1142 r1143 r1137 into r1145;
    ternary r1138 r13.deck[1u32][23u32] r1135 into r1146;
    ternary r1138 r1144 r1136 into r1147;
    ternary r1138 r1145 r1137 into r1148;
    is.eq 24u8 r13.flop_ij[1u32][1u32] into r1149;
    add r13.flop_ij[1u32][1u32] 1u8 into r1150;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1151;
    is.eq r1150 26u8 into r1152;
    and r1151 r1152 into r1153;
    add r13.flop_ij[1u32][0u32] 1u8 into r1154;
    ternary r1153 0u8 r1150 into r1155;
    ternary r1153 r1154 r1148 into r1156;
    ternary r1149 r13.deck[1u32][24u32] r1146 into r1157;
    ternary r1149 r1155 r1147 into r1158;
    ternary r1149 r1156 r1148 into r1159;
    is.eq 25u8 r13.flop_ij[1u32][1u32] into r1160;
    add r13.flop_ij[1u32][1u32] 1u8 into r1161;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r1162;
    is.eq r1161 26u8 into r1163;
    and r1162 r1163 into r1164;
    add r13.flop_ij[1u32][0u32] 1u8 into r1165;
    ternary r1164 0u8 r1161 into r1166;
    ternary r1164 r1165 r1159 into r1167;
    ternary r1160 r13.deck[1u32][25u32] r1157 into r1168;
    ternary r1160 r1166 r1158 into r1169;
    ternary r1160 r1167 r1159 into r1170;
    ternary r884 r1168 r881 into r1171;
    ternary r884 r1169 r882 into r1172;
    ternary r884 r1170 r883 into r1173;
    is.eq 0u8 r13.flop_ij[2u32][0u32] into r1174;
    is.eq 0u8 r13.flop_ij[2u32][1u32] into r1175;
    add r13.flop_ij[2u32][1u32] 1u8 into r1176;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1177;
    is.eq r1176 26u8 into r1178;
    and r1177 r1178 into r1179;
    add r13.flop_ij[2u32][0u32] 1u8 into r1180;
    ternary r1179 0u8 r1176 into r1181;
    ternary r1179 r1180 0u8 into r1182;
    ternary r1175 r13.deck[0u32][0u32] 0field into r1183;
    ternary r1175 r1181 0u8 into r1184;
    ternary r1175 r1182 0u8 into r1185;
    is.eq 1u8 r13.flop_ij[2u32][1u32] into r1186;
    add r13.flop_ij[2u32][1u32] 1u8 into r1187;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1188;
    is.eq r1187 26u8 into r1189;
    and r1188 r1189 into r1190;
    add r13.flop_ij[2u32][0u32] 1u8 into r1191;
    ternary r1190 0u8 r1187 into r1192;
    ternary r1190 r1191 r1185 into r1193;
    ternary r1186 r13.deck[0u32][1u32] r1183 into r1194;
    ternary r1186 r1192 r1184 into r1195;
    ternary r1186 r1193 r1185 into r1196;
    is.eq 2u8 r13.flop_ij[2u32][1u32] into r1197;
    add r13.flop_ij[2u32][1u32] 1u8 into r1198;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1199;
    is.eq r1198 26u8 into r1200;
    and r1199 r1200 into r1201;
    add r13.flop_ij[2u32][0u32] 1u8 into r1202;
    ternary r1201 0u8 r1198 into r1203;
    ternary r1201 r1202 r1196 into r1204;
    ternary r1197 r13.deck[0u32][2u32] r1194 into r1205;
    ternary r1197 r1203 r1195 into r1206;
    ternary r1197 r1204 r1196 into r1207;
    is.eq 3u8 r13.flop_ij[2u32][1u32] into r1208;
    add r13.flop_ij[2u32][1u32] 1u8 into r1209;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1210;
    is.eq r1209 26u8 into r1211;
    and r1210 r1211 into r1212;
    add r13.flop_ij[2u32][0u32] 1u8 into r1213;
    ternary r1212 0u8 r1209 into r1214;
    ternary r1212 r1213 r1207 into r1215;
    ternary r1208 r13.deck[0u32][3u32] r1205 into r1216;
    ternary r1208 r1214 r1206 into r1217;
    ternary r1208 r1215 r1207 into r1218;
    is.eq 4u8 r13.flop_ij[2u32][1u32] into r1219;
    add r13.flop_ij[2u32][1u32] 1u8 into r1220;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1221;
    is.eq r1220 26u8 into r1222;
    and r1221 r1222 into r1223;
    add r13.flop_ij[2u32][0u32] 1u8 into r1224;
    ternary r1223 0u8 r1220 into r1225;
    ternary r1223 r1224 r1218 into r1226;
    ternary r1219 r13.deck[0u32][4u32] r1216 into r1227;
    ternary r1219 r1225 r1217 into r1228;
    ternary r1219 r1226 r1218 into r1229;
    is.eq 5u8 r13.flop_ij[2u32][1u32] into r1230;
    add r13.flop_ij[2u32][1u32] 1u8 into r1231;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1232;
    is.eq r1231 26u8 into r1233;
    and r1232 r1233 into r1234;
    add r13.flop_ij[2u32][0u32] 1u8 into r1235;
    ternary r1234 0u8 r1231 into r1236;
    ternary r1234 r1235 r1229 into r1237;
    ternary r1230 r13.deck[0u32][5u32] r1227 into r1238;
    ternary r1230 r1236 r1228 into r1239;
    ternary r1230 r1237 r1229 into r1240;
    is.eq 6u8 r13.flop_ij[2u32][1u32] into r1241;
    add r13.flop_ij[2u32][1u32] 1u8 into r1242;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1243;
    is.eq r1242 26u8 into r1244;
    and r1243 r1244 into r1245;
    add r13.flop_ij[2u32][0u32] 1u8 into r1246;
    ternary r1245 0u8 r1242 into r1247;
    ternary r1245 r1246 r1240 into r1248;
    ternary r1241 r13.deck[0u32][6u32] r1238 into r1249;
    ternary r1241 r1247 r1239 into r1250;
    ternary r1241 r1248 r1240 into r1251;
    is.eq 7u8 r13.flop_ij[2u32][1u32] into r1252;
    add r13.flop_ij[2u32][1u32] 1u8 into r1253;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1254;
    is.eq r1253 26u8 into r1255;
    and r1254 r1255 into r1256;
    add r13.flop_ij[2u32][0u32] 1u8 into r1257;
    ternary r1256 0u8 r1253 into r1258;
    ternary r1256 r1257 r1251 into r1259;
    ternary r1252 r13.deck[0u32][7u32] r1249 into r1260;
    ternary r1252 r1258 r1250 into r1261;
    ternary r1252 r1259 r1251 into r1262;
    is.eq 8u8 r13.flop_ij[2u32][1u32] into r1263;
    add r13.flop_ij[2u32][1u32] 1u8 into r1264;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1265;
    is.eq r1264 26u8 into r1266;
    and r1265 r1266 into r1267;
    add r13.flop_ij[2u32][0u32] 1u8 into r1268;
    ternary r1267 0u8 r1264 into r1269;
    ternary r1267 r1268 r1262 into r1270;
    ternary r1263 r13.deck[0u32][8u32] r1260 into r1271;
    ternary r1263 r1269 r1261 into r1272;
    ternary r1263 r1270 r1262 into r1273;
    is.eq 9u8 r13.flop_ij[2u32][1u32] into r1274;
    add r13.flop_ij[2u32][1u32] 1u8 into r1275;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1276;
    is.eq r1275 26u8 into r1277;
    and r1276 r1277 into r1278;
    add r13.flop_ij[2u32][0u32] 1u8 into r1279;
    ternary r1278 0u8 r1275 into r1280;
    ternary r1278 r1279 r1273 into r1281;
    ternary r1274 r13.deck[0u32][9u32] r1271 into r1282;
    ternary r1274 r1280 r1272 into r1283;
    ternary r1274 r1281 r1273 into r1284;
    is.eq 10u8 r13.flop_ij[2u32][1u32] into r1285;
    add r13.flop_ij[2u32][1u32] 1u8 into r1286;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1287;
    is.eq r1286 26u8 into r1288;
    and r1287 r1288 into r1289;
    add r13.flop_ij[2u32][0u32] 1u8 into r1290;
    ternary r1289 0u8 r1286 into r1291;
    ternary r1289 r1290 r1284 into r1292;
    ternary r1285 r13.deck[0u32][10u32] r1282 into r1293;
    ternary r1285 r1291 r1283 into r1294;
    ternary r1285 r1292 r1284 into r1295;
    is.eq 11u8 r13.flop_ij[2u32][1u32] into r1296;
    add r13.flop_ij[2u32][1u32] 1u8 into r1297;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1298;
    is.eq r1297 26u8 into r1299;
    and r1298 r1299 into r1300;
    add r13.flop_ij[2u32][0u32] 1u8 into r1301;
    ternary r1300 0u8 r1297 into r1302;
    ternary r1300 r1301 r1295 into r1303;
    ternary r1296 r13.deck[0u32][11u32] r1293 into r1304;
    ternary r1296 r1302 r1294 into r1305;
    ternary r1296 r1303 r1295 into r1306;
    is.eq 12u8 r13.flop_ij[2u32][1u32] into r1307;
    add r13.flop_ij[2u32][1u32] 1u8 into r1308;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1309;
    is.eq r1308 26u8 into r1310;
    and r1309 r1310 into r1311;
    add r13.flop_ij[2u32][0u32] 1u8 into r1312;
    ternary r1311 0u8 r1308 into r1313;
    ternary r1311 r1312 r1306 into r1314;
    ternary r1307 r13.deck[0u32][12u32] r1304 into r1315;
    ternary r1307 r1313 r1305 into r1316;
    ternary r1307 r1314 r1306 into r1317;
    is.eq 13u8 r13.flop_ij[2u32][1u32] into r1318;
    add r13.flop_ij[2u32][1u32] 1u8 into r1319;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1320;
    is.eq r1319 26u8 into r1321;
    and r1320 r1321 into r1322;
    add r13.flop_ij[2u32][0u32] 1u8 into r1323;
    ternary r1322 0u8 r1319 into r1324;
    ternary r1322 r1323 r1317 into r1325;
    ternary r1318 r13.deck[0u32][13u32] r1315 into r1326;
    ternary r1318 r1324 r1316 into r1327;
    ternary r1318 r1325 r1317 into r1328;
    is.eq 14u8 r13.flop_ij[2u32][1u32] into r1329;
    add r13.flop_ij[2u32][1u32] 1u8 into r1330;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1331;
    is.eq r1330 26u8 into r1332;
    and r1331 r1332 into r1333;
    add r13.flop_ij[2u32][0u32] 1u8 into r1334;
    ternary r1333 0u8 r1330 into r1335;
    ternary r1333 r1334 r1328 into r1336;
    ternary r1329 r13.deck[0u32][14u32] r1326 into r1337;
    ternary r1329 r1335 r1327 into r1338;
    ternary r1329 r1336 r1328 into r1339;
    is.eq 15u8 r13.flop_ij[2u32][1u32] into r1340;
    add r13.flop_ij[2u32][1u32] 1u8 into r1341;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1342;
    is.eq r1341 26u8 into r1343;
    and r1342 r1343 into r1344;
    add r13.flop_ij[2u32][0u32] 1u8 into r1345;
    ternary r1344 0u8 r1341 into r1346;
    ternary r1344 r1345 r1339 into r1347;
    ternary r1340 r13.deck[0u32][15u32] r1337 into r1348;
    ternary r1340 r1346 r1338 into r1349;
    ternary r1340 r1347 r1339 into r1350;
    is.eq 16u8 r13.flop_ij[2u32][1u32] into r1351;
    add r13.flop_ij[2u32][1u32] 1u8 into r1352;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1353;
    is.eq r1352 26u8 into r1354;
    and r1353 r1354 into r1355;
    add r13.flop_ij[2u32][0u32] 1u8 into r1356;
    ternary r1355 0u8 r1352 into r1357;
    ternary r1355 r1356 r1350 into r1358;
    ternary r1351 r13.deck[0u32][16u32] r1348 into r1359;
    ternary r1351 r1357 r1349 into r1360;
    ternary r1351 r1358 r1350 into r1361;
    is.eq 17u8 r13.flop_ij[2u32][1u32] into r1362;
    add r13.flop_ij[2u32][1u32] 1u8 into r1363;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1364;
    is.eq r1363 26u8 into r1365;
    and r1364 r1365 into r1366;
    add r13.flop_ij[2u32][0u32] 1u8 into r1367;
    ternary r1366 0u8 r1363 into r1368;
    ternary r1366 r1367 r1361 into r1369;
    ternary r1362 r13.deck[0u32][17u32] r1359 into r1370;
    ternary r1362 r1368 r1360 into r1371;
    ternary r1362 r1369 r1361 into r1372;
    is.eq 18u8 r13.flop_ij[2u32][1u32] into r1373;
    add r13.flop_ij[2u32][1u32] 1u8 into r1374;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1375;
    is.eq r1374 26u8 into r1376;
    and r1375 r1376 into r1377;
    add r13.flop_ij[2u32][0u32] 1u8 into r1378;
    ternary r1377 0u8 r1374 into r1379;
    ternary r1377 r1378 r1372 into r1380;
    ternary r1373 r13.deck[0u32][18u32] r1370 into r1381;
    ternary r1373 r1379 r1371 into r1382;
    ternary r1373 r1380 r1372 into r1383;
    is.eq 19u8 r13.flop_ij[2u32][1u32] into r1384;
    add r13.flop_ij[2u32][1u32] 1u8 into r1385;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1386;
    is.eq r1385 26u8 into r1387;
    and r1386 r1387 into r1388;
    add r13.flop_ij[2u32][0u32] 1u8 into r1389;
    ternary r1388 0u8 r1385 into r1390;
    ternary r1388 r1389 r1383 into r1391;
    ternary r1384 r13.deck[0u32][19u32] r1381 into r1392;
    ternary r1384 r1390 r1382 into r1393;
    ternary r1384 r1391 r1383 into r1394;
    is.eq 20u8 r13.flop_ij[2u32][1u32] into r1395;
    add r13.flop_ij[2u32][1u32] 1u8 into r1396;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1397;
    is.eq r1396 26u8 into r1398;
    and r1397 r1398 into r1399;
    add r13.flop_ij[2u32][0u32] 1u8 into r1400;
    ternary r1399 0u8 r1396 into r1401;
    ternary r1399 r1400 r1394 into r1402;
    ternary r1395 r13.deck[0u32][20u32] r1392 into r1403;
    ternary r1395 r1401 r1393 into r1404;
    ternary r1395 r1402 r1394 into r1405;
    is.eq 21u8 r13.flop_ij[2u32][1u32] into r1406;
    add r13.flop_ij[2u32][1u32] 1u8 into r1407;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1408;
    is.eq r1407 26u8 into r1409;
    and r1408 r1409 into r1410;
    add r13.flop_ij[2u32][0u32] 1u8 into r1411;
    ternary r1410 0u8 r1407 into r1412;
    ternary r1410 r1411 r1405 into r1413;
    ternary r1406 r13.deck[0u32][21u32] r1403 into r1414;
    ternary r1406 r1412 r1404 into r1415;
    ternary r1406 r1413 r1405 into r1416;
    is.eq 22u8 r13.flop_ij[2u32][1u32] into r1417;
    add r13.flop_ij[2u32][1u32] 1u8 into r1418;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1419;
    is.eq r1418 26u8 into r1420;
    and r1419 r1420 into r1421;
    add r13.flop_ij[2u32][0u32] 1u8 into r1422;
    ternary r1421 0u8 r1418 into r1423;
    ternary r1421 r1422 r1416 into r1424;
    ternary r1417 r13.deck[0u32][22u32] r1414 into r1425;
    ternary r1417 r1423 r1415 into r1426;
    ternary r1417 r1424 r1416 into r1427;
    is.eq 23u8 r13.flop_ij[2u32][1u32] into r1428;
    add r13.flop_ij[2u32][1u32] 1u8 into r1429;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1430;
    is.eq r1429 26u8 into r1431;
    and r1430 r1431 into r1432;
    add r13.flop_ij[2u32][0u32] 1u8 into r1433;
    ternary r1432 0u8 r1429 into r1434;
    ternary r1432 r1433 r1427 into r1435;
    ternary r1428 r13.deck[0u32][23u32] r1425 into r1436;
    ternary r1428 r1434 r1426 into r1437;
    ternary r1428 r1435 r1427 into r1438;
    is.eq 24u8 r13.flop_ij[2u32][1u32] into r1439;
    add r13.flop_ij[2u32][1u32] 1u8 into r1440;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1441;
    is.eq r1440 26u8 into r1442;
    and r1441 r1442 into r1443;
    add r13.flop_ij[2u32][0u32] 1u8 into r1444;
    ternary r1443 0u8 r1440 into r1445;
    ternary r1443 r1444 r1438 into r1446;
    ternary r1439 r13.deck[0u32][24u32] r1436 into r1447;
    ternary r1439 r1445 r1437 into r1448;
    ternary r1439 r1446 r1438 into r1449;
    is.eq 25u8 r13.flop_ij[2u32][1u32] into r1450;
    add r13.flop_ij[2u32][1u32] 1u8 into r1451;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1452;
    is.eq r1451 26u8 into r1453;
    and r1452 r1453 into r1454;
    add r13.flop_ij[2u32][0u32] 1u8 into r1455;
    ternary r1454 0u8 r1451 into r1456;
    ternary r1454 r1455 r1449 into r1457;
    ternary r1450 r13.deck[0u32][25u32] r1447 into r1458;
    ternary r1450 r1456 r1448 into r1459;
    ternary r1450 r1457 r1449 into r1460;
    ternary r1174 r1458 0field into r1461;
    ternary r1174 r1459 0u8 into r1462;
    ternary r1174 r1460 0u8 into r1463;
    is.eq 1u8 r13.flop_ij[2u32][0u32] into r1464;
    is.eq 0u8 r13.flop_ij[2u32][1u32] into r1465;
    add r13.flop_ij[2u32][1u32] 1u8 into r1466;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1467;
    is.eq r1466 26u8 into r1468;
    and r1467 r1468 into r1469;
    add r13.flop_ij[2u32][0u32] 1u8 into r1470;
    ternary r1469 0u8 r1466 into r1471;
    ternary r1469 r1470 r1463 into r1472;
    ternary r1465 r13.deck[1u32][0u32] r1461 into r1473;
    ternary r1465 r1471 r1462 into r1474;
    ternary r1465 r1472 r1463 into r1475;
    is.eq 1u8 r13.flop_ij[2u32][1u32] into r1476;
    add r13.flop_ij[2u32][1u32] 1u8 into r1477;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1478;
    is.eq r1477 26u8 into r1479;
    and r1478 r1479 into r1480;
    add r13.flop_ij[2u32][0u32] 1u8 into r1481;
    ternary r1480 0u8 r1477 into r1482;
    ternary r1480 r1481 r1475 into r1483;
    ternary r1476 r13.deck[1u32][1u32] r1473 into r1484;
    ternary r1476 r1482 r1474 into r1485;
    ternary r1476 r1483 r1475 into r1486;
    is.eq 2u8 r13.flop_ij[2u32][1u32] into r1487;
    add r13.flop_ij[2u32][1u32] 1u8 into r1488;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1489;
    is.eq r1488 26u8 into r1490;
    and r1489 r1490 into r1491;
    add r13.flop_ij[2u32][0u32] 1u8 into r1492;
    ternary r1491 0u8 r1488 into r1493;
    ternary r1491 r1492 r1486 into r1494;
    ternary r1487 r13.deck[1u32][2u32] r1484 into r1495;
    ternary r1487 r1493 r1485 into r1496;
    ternary r1487 r1494 r1486 into r1497;
    is.eq 3u8 r13.flop_ij[2u32][1u32] into r1498;
    add r13.flop_ij[2u32][1u32] 1u8 into r1499;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1500;
    is.eq r1499 26u8 into r1501;
    and r1500 r1501 into r1502;
    add r13.flop_ij[2u32][0u32] 1u8 into r1503;
    ternary r1502 0u8 r1499 into r1504;
    ternary r1502 r1503 r1497 into r1505;
    ternary r1498 r13.deck[1u32][3u32] r1495 into r1506;
    ternary r1498 r1504 r1496 into r1507;
    ternary r1498 r1505 r1497 into r1508;
    is.eq 4u8 r13.flop_ij[2u32][1u32] into r1509;
    add r13.flop_ij[2u32][1u32] 1u8 into r1510;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1511;
    is.eq r1510 26u8 into r1512;
    and r1511 r1512 into r1513;
    add r13.flop_ij[2u32][0u32] 1u8 into r1514;
    ternary r1513 0u8 r1510 into r1515;
    ternary r1513 r1514 r1508 into r1516;
    ternary r1509 r13.deck[1u32][4u32] r1506 into r1517;
    ternary r1509 r1515 r1507 into r1518;
    ternary r1509 r1516 r1508 into r1519;
    is.eq 5u8 r13.flop_ij[2u32][1u32] into r1520;
    add r13.flop_ij[2u32][1u32] 1u8 into r1521;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1522;
    is.eq r1521 26u8 into r1523;
    and r1522 r1523 into r1524;
    add r13.flop_ij[2u32][0u32] 1u8 into r1525;
    ternary r1524 0u8 r1521 into r1526;
    ternary r1524 r1525 r1519 into r1527;
    ternary r1520 r13.deck[1u32][5u32] r1517 into r1528;
    ternary r1520 r1526 r1518 into r1529;
    ternary r1520 r1527 r1519 into r1530;
    is.eq 6u8 r13.flop_ij[2u32][1u32] into r1531;
    add r13.flop_ij[2u32][1u32] 1u8 into r1532;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1533;
    is.eq r1532 26u8 into r1534;
    and r1533 r1534 into r1535;
    add r13.flop_ij[2u32][0u32] 1u8 into r1536;
    ternary r1535 0u8 r1532 into r1537;
    ternary r1535 r1536 r1530 into r1538;
    ternary r1531 r13.deck[1u32][6u32] r1528 into r1539;
    ternary r1531 r1537 r1529 into r1540;
    ternary r1531 r1538 r1530 into r1541;
    is.eq 7u8 r13.flop_ij[2u32][1u32] into r1542;
    add r13.flop_ij[2u32][1u32] 1u8 into r1543;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1544;
    is.eq r1543 26u8 into r1545;
    and r1544 r1545 into r1546;
    add r13.flop_ij[2u32][0u32] 1u8 into r1547;
    ternary r1546 0u8 r1543 into r1548;
    ternary r1546 r1547 r1541 into r1549;
    ternary r1542 r13.deck[1u32][7u32] r1539 into r1550;
    ternary r1542 r1548 r1540 into r1551;
    ternary r1542 r1549 r1541 into r1552;
    is.eq 8u8 r13.flop_ij[2u32][1u32] into r1553;
    add r13.flop_ij[2u32][1u32] 1u8 into r1554;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1555;
    is.eq r1554 26u8 into r1556;
    and r1555 r1556 into r1557;
    add r13.flop_ij[2u32][0u32] 1u8 into r1558;
    ternary r1557 0u8 r1554 into r1559;
    ternary r1557 r1558 r1552 into r1560;
    ternary r1553 r13.deck[1u32][8u32] r1550 into r1561;
    ternary r1553 r1559 r1551 into r1562;
    ternary r1553 r1560 r1552 into r1563;
    is.eq 9u8 r13.flop_ij[2u32][1u32] into r1564;
    add r13.flop_ij[2u32][1u32] 1u8 into r1565;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1566;
    is.eq r1565 26u8 into r1567;
    and r1566 r1567 into r1568;
    add r13.flop_ij[2u32][0u32] 1u8 into r1569;
    ternary r1568 0u8 r1565 into r1570;
    ternary r1568 r1569 r1563 into r1571;
    ternary r1564 r13.deck[1u32][9u32] r1561 into r1572;
    ternary r1564 r1570 r1562 into r1573;
    ternary r1564 r1571 r1563 into r1574;
    is.eq 10u8 r13.flop_ij[2u32][1u32] into r1575;
    add r13.flop_ij[2u32][1u32] 1u8 into r1576;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1577;
    is.eq r1576 26u8 into r1578;
    and r1577 r1578 into r1579;
    add r13.flop_ij[2u32][0u32] 1u8 into r1580;
    ternary r1579 0u8 r1576 into r1581;
    ternary r1579 r1580 r1574 into r1582;
    ternary r1575 r13.deck[1u32][10u32] r1572 into r1583;
    ternary r1575 r1581 r1573 into r1584;
    ternary r1575 r1582 r1574 into r1585;
    is.eq 11u8 r13.flop_ij[2u32][1u32] into r1586;
    add r13.flop_ij[2u32][1u32] 1u8 into r1587;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1588;
    is.eq r1587 26u8 into r1589;
    and r1588 r1589 into r1590;
    add r13.flop_ij[2u32][0u32] 1u8 into r1591;
    ternary r1590 0u8 r1587 into r1592;
    ternary r1590 r1591 r1585 into r1593;
    ternary r1586 r13.deck[1u32][11u32] r1583 into r1594;
    ternary r1586 r1592 r1584 into r1595;
    ternary r1586 r1593 r1585 into r1596;
    is.eq 12u8 r13.flop_ij[2u32][1u32] into r1597;
    add r13.flop_ij[2u32][1u32] 1u8 into r1598;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1599;
    is.eq r1598 26u8 into r1600;
    and r1599 r1600 into r1601;
    add r13.flop_ij[2u32][0u32] 1u8 into r1602;
    ternary r1601 0u8 r1598 into r1603;
    ternary r1601 r1602 r1596 into r1604;
    ternary r1597 r13.deck[1u32][12u32] r1594 into r1605;
    ternary r1597 r1603 r1595 into r1606;
    ternary r1597 r1604 r1596 into r1607;
    is.eq 13u8 r13.flop_ij[2u32][1u32] into r1608;
    add r13.flop_ij[2u32][1u32] 1u8 into r1609;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1610;
    is.eq r1609 26u8 into r1611;
    and r1610 r1611 into r1612;
    add r13.flop_ij[2u32][0u32] 1u8 into r1613;
    ternary r1612 0u8 r1609 into r1614;
    ternary r1612 r1613 r1607 into r1615;
    ternary r1608 r13.deck[1u32][13u32] r1605 into r1616;
    ternary r1608 r1614 r1606 into r1617;
    ternary r1608 r1615 r1607 into r1618;
    is.eq 14u8 r13.flop_ij[2u32][1u32] into r1619;
    add r13.flop_ij[2u32][1u32] 1u8 into r1620;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1621;
    is.eq r1620 26u8 into r1622;
    and r1621 r1622 into r1623;
    add r13.flop_ij[2u32][0u32] 1u8 into r1624;
    ternary r1623 0u8 r1620 into r1625;
    ternary r1623 r1624 r1618 into r1626;
    ternary r1619 r13.deck[1u32][14u32] r1616 into r1627;
    ternary r1619 r1625 r1617 into r1628;
    ternary r1619 r1626 r1618 into r1629;
    is.eq 15u8 r13.flop_ij[2u32][1u32] into r1630;
    add r13.flop_ij[2u32][1u32] 1u8 into r1631;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1632;
    is.eq r1631 26u8 into r1633;
    and r1632 r1633 into r1634;
    add r13.flop_ij[2u32][0u32] 1u8 into r1635;
    ternary r1634 0u8 r1631 into r1636;
    ternary r1634 r1635 r1629 into r1637;
    ternary r1630 r13.deck[1u32][15u32] r1627 into r1638;
    ternary r1630 r1636 r1628 into r1639;
    ternary r1630 r1637 r1629 into r1640;
    is.eq 16u8 r13.flop_ij[2u32][1u32] into r1641;
    add r13.flop_ij[2u32][1u32] 1u8 into r1642;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1643;
    is.eq r1642 26u8 into r1644;
    and r1643 r1644 into r1645;
    add r13.flop_ij[2u32][0u32] 1u8 into r1646;
    ternary r1645 0u8 r1642 into r1647;
    ternary r1645 r1646 r1640 into r1648;
    ternary r1641 r13.deck[1u32][16u32] r1638 into r1649;
    ternary r1641 r1647 r1639 into r1650;
    ternary r1641 r1648 r1640 into r1651;
    is.eq 17u8 r13.flop_ij[2u32][1u32] into r1652;
    add r13.flop_ij[2u32][1u32] 1u8 into r1653;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1654;
    is.eq r1653 26u8 into r1655;
    and r1654 r1655 into r1656;
    add r13.flop_ij[2u32][0u32] 1u8 into r1657;
    ternary r1656 0u8 r1653 into r1658;
    ternary r1656 r1657 r1651 into r1659;
    ternary r1652 r13.deck[1u32][17u32] r1649 into r1660;
    ternary r1652 r1658 r1650 into r1661;
    ternary r1652 r1659 r1651 into r1662;
    is.eq 18u8 r13.flop_ij[2u32][1u32] into r1663;
    add r13.flop_ij[2u32][1u32] 1u8 into r1664;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1665;
    is.eq r1664 26u8 into r1666;
    and r1665 r1666 into r1667;
    add r13.flop_ij[2u32][0u32] 1u8 into r1668;
    ternary r1667 0u8 r1664 into r1669;
    ternary r1667 r1668 r1662 into r1670;
    ternary r1663 r13.deck[1u32][18u32] r1660 into r1671;
    ternary r1663 r1669 r1661 into r1672;
    ternary r1663 r1670 r1662 into r1673;
    is.eq 19u8 r13.flop_ij[2u32][1u32] into r1674;
    add r13.flop_ij[2u32][1u32] 1u8 into r1675;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1676;
    is.eq r1675 26u8 into r1677;
    and r1676 r1677 into r1678;
    add r13.flop_ij[2u32][0u32] 1u8 into r1679;
    ternary r1678 0u8 r1675 into r1680;
    ternary r1678 r1679 r1673 into r1681;
    ternary r1674 r13.deck[1u32][19u32] r1671 into r1682;
    ternary r1674 r1680 r1672 into r1683;
    ternary r1674 r1681 r1673 into r1684;
    is.eq 20u8 r13.flop_ij[2u32][1u32] into r1685;
    add r13.flop_ij[2u32][1u32] 1u8 into r1686;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1687;
    is.eq r1686 26u8 into r1688;
    and r1687 r1688 into r1689;
    add r13.flop_ij[2u32][0u32] 1u8 into r1690;
    ternary r1689 0u8 r1686 into r1691;
    ternary r1689 r1690 r1684 into r1692;
    ternary r1685 r13.deck[1u32][20u32] r1682 into r1693;
    ternary r1685 r1691 r1683 into r1694;
    ternary r1685 r1692 r1684 into r1695;
    is.eq 21u8 r13.flop_ij[2u32][1u32] into r1696;
    add r13.flop_ij[2u32][1u32] 1u8 into r1697;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1698;
    is.eq r1697 26u8 into r1699;
    and r1698 r1699 into r1700;
    add r13.flop_ij[2u32][0u32] 1u8 into r1701;
    ternary r1700 0u8 r1697 into r1702;
    ternary r1700 r1701 r1695 into r1703;
    ternary r1696 r13.deck[1u32][21u32] r1693 into r1704;
    ternary r1696 r1702 r1694 into r1705;
    ternary r1696 r1703 r1695 into r1706;
    is.eq 22u8 r13.flop_ij[2u32][1u32] into r1707;
    add r13.flop_ij[2u32][1u32] 1u8 into r1708;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1709;
    is.eq r1708 26u8 into r1710;
    and r1709 r1710 into r1711;
    add r13.flop_ij[2u32][0u32] 1u8 into r1712;
    ternary r1711 0u8 r1708 into r1713;
    ternary r1711 r1712 r1706 into r1714;
    ternary r1707 r13.deck[1u32][22u32] r1704 into r1715;
    ternary r1707 r1713 r1705 into r1716;
    ternary r1707 r1714 r1706 into r1717;
    is.eq 23u8 r13.flop_ij[2u32][1u32] into r1718;
    add r13.flop_ij[2u32][1u32] 1u8 into r1719;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1720;
    is.eq r1719 26u8 into r1721;
    and r1720 r1721 into r1722;
    add r13.flop_ij[2u32][0u32] 1u8 into r1723;
    ternary r1722 0u8 r1719 into r1724;
    ternary r1722 r1723 r1717 into r1725;
    ternary r1718 r13.deck[1u32][23u32] r1715 into r1726;
    ternary r1718 r1724 r1716 into r1727;
    ternary r1718 r1725 r1717 into r1728;
    is.eq 24u8 r13.flop_ij[2u32][1u32] into r1729;
    add r13.flop_ij[2u32][1u32] 1u8 into r1730;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1731;
    is.eq r1730 26u8 into r1732;
    and r1731 r1732 into r1733;
    add r13.flop_ij[2u32][0u32] 1u8 into r1734;
    ternary r1733 0u8 r1730 into r1735;
    ternary r1733 r1734 r1728 into r1736;
    ternary r1729 r13.deck[1u32][24u32] r1726 into r1737;
    ternary r1729 r1735 r1727 into r1738;
    ternary r1729 r1736 r1728 into r1739;
    is.eq 25u8 r13.flop_ij[2u32][1u32] into r1740;
    add r13.flop_ij[2u32][1u32] 1u8 into r1741;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r1742;
    is.eq r1741 26u8 into r1743;
    and r1742 r1743 into r1744;
    add r13.flop_ij[2u32][0u32] 1u8 into r1745;
    ternary r1744 0u8 r1741 into r1746;
    ternary r1744 r1745 r1739 into r1747;
    ternary r1740 r13.deck[1u32][25u32] r1737 into r1748;
    ternary r1740 r1746 r1738 into r1749;
    ternary r1740 r1747 r1739 into r1750;
    ternary r1464 r1748 r1461 into r1751;
    ternary r1464 r1749 r1462 into r1752;
    ternary r1464 r1750 r1463 into r1753;
    is.eq 0u8 r13.flop_ij[0u32][0u32] into r1754;
    is.eq 0u8 r13.flop_ij[0u32][1u32] into r1755;
    add r13.flop_ij[0u32][1u32] 1u8 into r1756;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1757;
    is.eq r1756 26u8 into r1758;
    and r1757 r1758 into r1759;
    add r13.flop_ij[0u32][0u32] 1u8 into r1760;
    ternary r1759 0u8 r1756 into r1761;
    ternary r1759 r1760 0u8 into r1762;
    ternary r1755 r3[0u32][0u32] 0field into r1763;
    ternary r1755 r1761 0u8 into r1764;
    ternary r1755 r1762 0u8 into r1765;
    is.eq 1u8 r13.flop_ij[0u32][1u32] into r1766;
    add r13.flop_ij[0u32][1u32] 1u8 into r1767;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1768;
    is.eq r1767 26u8 into r1769;
    and r1768 r1769 into r1770;
    add r13.flop_ij[0u32][0u32] 1u8 into r1771;
    ternary r1770 0u8 r1767 into r1772;
    ternary r1770 r1771 r1765 into r1773;
    ternary r1766 r3[0u32][1u32] r1763 into r1774;
    ternary r1766 r1772 r1764 into r1775;
    ternary r1766 r1773 r1765 into r1776;
    is.eq 2u8 r13.flop_ij[0u32][1u32] into r1777;
    add r13.flop_ij[0u32][1u32] 1u8 into r1778;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1779;
    is.eq r1778 26u8 into r1780;
    and r1779 r1780 into r1781;
    add r13.flop_ij[0u32][0u32] 1u8 into r1782;
    ternary r1781 0u8 r1778 into r1783;
    ternary r1781 r1782 r1776 into r1784;
    ternary r1777 r3[0u32][2u32] r1774 into r1785;
    ternary r1777 r1783 r1775 into r1786;
    ternary r1777 r1784 r1776 into r1787;
    is.eq 3u8 r13.flop_ij[0u32][1u32] into r1788;
    add r13.flop_ij[0u32][1u32] 1u8 into r1789;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1790;
    is.eq r1789 26u8 into r1791;
    and r1790 r1791 into r1792;
    add r13.flop_ij[0u32][0u32] 1u8 into r1793;
    ternary r1792 0u8 r1789 into r1794;
    ternary r1792 r1793 r1787 into r1795;
    ternary r1788 r3[0u32][3u32] r1785 into r1796;
    ternary r1788 r1794 r1786 into r1797;
    ternary r1788 r1795 r1787 into r1798;
    is.eq 4u8 r13.flop_ij[0u32][1u32] into r1799;
    add r13.flop_ij[0u32][1u32] 1u8 into r1800;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1801;
    is.eq r1800 26u8 into r1802;
    and r1801 r1802 into r1803;
    add r13.flop_ij[0u32][0u32] 1u8 into r1804;
    ternary r1803 0u8 r1800 into r1805;
    ternary r1803 r1804 r1798 into r1806;
    ternary r1799 r3[0u32][4u32] r1796 into r1807;
    ternary r1799 r1805 r1797 into r1808;
    ternary r1799 r1806 r1798 into r1809;
    is.eq 5u8 r13.flop_ij[0u32][1u32] into r1810;
    add r13.flop_ij[0u32][1u32] 1u8 into r1811;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1812;
    is.eq r1811 26u8 into r1813;
    and r1812 r1813 into r1814;
    add r13.flop_ij[0u32][0u32] 1u8 into r1815;
    ternary r1814 0u8 r1811 into r1816;
    ternary r1814 r1815 r1809 into r1817;
    ternary r1810 r3[0u32][5u32] r1807 into r1818;
    ternary r1810 r1816 r1808 into r1819;
    ternary r1810 r1817 r1809 into r1820;
    is.eq 6u8 r13.flop_ij[0u32][1u32] into r1821;
    add r13.flop_ij[0u32][1u32] 1u8 into r1822;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1823;
    is.eq r1822 26u8 into r1824;
    and r1823 r1824 into r1825;
    add r13.flop_ij[0u32][0u32] 1u8 into r1826;
    ternary r1825 0u8 r1822 into r1827;
    ternary r1825 r1826 r1820 into r1828;
    ternary r1821 r3[0u32][6u32] r1818 into r1829;
    ternary r1821 r1827 r1819 into r1830;
    ternary r1821 r1828 r1820 into r1831;
    is.eq 7u8 r13.flop_ij[0u32][1u32] into r1832;
    add r13.flop_ij[0u32][1u32] 1u8 into r1833;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1834;
    is.eq r1833 26u8 into r1835;
    and r1834 r1835 into r1836;
    add r13.flop_ij[0u32][0u32] 1u8 into r1837;
    ternary r1836 0u8 r1833 into r1838;
    ternary r1836 r1837 r1831 into r1839;
    ternary r1832 r3[0u32][7u32] r1829 into r1840;
    ternary r1832 r1838 r1830 into r1841;
    ternary r1832 r1839 r1831 into r1842;
    is.eq 8u8 r13.flop_ij[0u32][1u32] into r1843;
    add r13.flop_ij[0u32][1u32] 1u8 into r1844;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1845;
    is.eq r1844 26u8 into r1846;
    and r1845 r1846 into r1847;
    add r13.flop_ij[0u32][0u32] 1u8 into r1848;
    ternary r1847 0u8 r1844 into r1849;
    ternary r1847 r1848 r1842 into r1850;
    ternary r1843 r3[0u32][8u32] r1840 into r1851;
    ternary r1843 r1849 r1841 into r1852;
    ternary r1843 r1850 r1842 into r1853;
    is.eq 9u8 r13.flop_ij[0u32][1u32] into r1854;
    add r13.flop_ij[0u32][1u32] 1u8 into r1855;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1856;
    is.eq r1855 26u8 into r1857;
    and r1856 r1857 into r1858;
    add r13.flop_ij[0u32][0u32] 1u8 into r1859;
    ternary r1858 0u8 r1855 into r1860;
    ternary r1858 r1859 r1853 into r1861;
    ternary r1854 r3[0u32][9u32] r1851 into r1862;
    ternary r1854 r1860 r1852 into r1863;
    ternary r1854 r1861 r1853 into r1864;
    is.eq 10u8 r13.flop_ij[0u32][1u32] into r1865;
    add r13.flop_ij[0u32][1u32] 1u8 into r1866;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1867;
    is.eq r1866 26u8 into r1868;
    and r1867 r1868 into r1869;
    add r13.flop_ij[0u32][0u32] 1u8 into r1870;
    ternary r1869 0u8 r1866 into r1871;
    ternary r1869 r1870 r1864 into r1872;
    ternary r1865 r3[0u32][10u32] r1862 into r1873;
    ternary r1865 r1871 r1863 into r1874;
    ternary r1865 r1872 r1864 into r1875;
    is.eq 11u8 r13.flop_ij[0u32][1u32] into r1876;
    add r13.flop_ij[0u32][1u32] 1u8 into r1877;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1878;
    is.eq r1877 26u8 into r1879;
    and r1878 r1879 into r1880;
    add r13.flop_ij[0u32][0u32] 1u8 into r1881;
    ternary r1880 0u8 r1877 into r1882;
    ternary r1880 r1881 r1875 into r1883;
    ternary r1876 r3[0u32][11u32] r1873 into r1884;
    ternary r1876 r1882 r1874 into r1885;
    ternary r1876 r1883 r1875 into r1886;
    is.eq 12u8 r13.flop_ij[0u32][1u32] into r1887;
    add r13.flop_ij[0u32][1u32] 1u8 into r1888;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1889;
    is.eq r1888 26u8 into r1890;
    and r1889 r1890 into r1891;
    add r13.flop_ij[0u32][0u32] 1u8 into r1892;
    ternary r1891 0u8 r1888 into r1893;
    ternary r1891 r1892 r1886 into r1894;
    ternary r1887 r3[0u32][12u32] r1884 into r1895;
    ternary r1887 r1893 r1885 into r1896;
    ternary r1887 r1894 r1886 into r1897;
    is.eq 13u8 r13.flop_ij[0u32][1u32] into r1898;
    add r13.flop_ij[0u32][1u32] 1u8 into r1899;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1900;
    is.eq r1899 26u8 into r1901;
    and r1900 r1901 into r1902;
    add r13.flop_ij[0u32][0u32] 1u8 into r1903;
    ternary r1902 0u8 r1899 into r1904;
    ternary r1902 r1903 r1897 into r1905;
    ternary r1898 r3[0u32][13u32] r1895 into r1906;
    ternary r1898 r1904 r1896 into r1907;
    ternary r1898 r1905 r1897 into r1908;
    is.eq 14u8 r13.flop_ij[0u32][1u32] into r1909;
    add r13.flop_ij[0u32][1u32] 1u8 into r1910;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1911;
    is.eq r1910 26u8 into r1912;
    and r1911 r1912 into r1913;
    add r13.flop_ij[0u32][0u32] 1u8 into r1914;
    ternary r1913 0u8 r1910 into r1915;
    ternary r1913 r1914 r1908 into r1916;
    ternary r1909 r3[0u32][14u32] r1906 into r1917;
    ternary r1909 r1915 r1907 into r1918;
    ternary r1909 r1916 r1908 into r1919;
    is.eq 15u8 r13.flop_ij[0u32][1u32] into r1920;
    add r13.flop_ij[0u32][1u32] 1u8 into r1921;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1922;
    is.eq r1921 26u8 into r1923;
    and r1922 r1923 into r1924;
    add r13.flop_ij[0u32][0u32] 1u8 into r1925;
    ternary r1924 0u8 r1921 into r1926;
    ternary r1924 r1925 r1919 into r1927;
    ternary r1920 r3[0u32][15u32] r1917 into r1928;
    ternary r1920 r1926 r1918 into r1929;
    ternary r1920 r1927 r1919 into r1930;
    is.eq 16u8 r13.flop_ij[0u32][1u32] into r1931;
    add r13.flop_ij[0u32][1u32] 1u8 into r1932;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1933;
    is.eq r1932 26u8 into r1934;
    and r1933 r1934 into r1935;
    add r13.flop_ij[0u32][0u32] 1u8 into r1936;
    ternary r1935 0u8 r1932 into r1937;
    ternary r1935 r1936 r1930 into r1938;
    ternary r1931 r3[0u32][16u32] r1928 into r1939;
    ternary r1931 r1937 r1929 into r1940;
    ternary r1931 r1938 r1930 into r1941;
    is.eq 17u8 r13.flop_ij[0u32][1u32] into r1942;
    add r13.flop_ij[0u32][1u32] 1u8 into r1943;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1944;
    is.eq r1943 26u8 into r1945;
    and r1944 r1945 into r1946;
    add r13.flop_ij[0u32][0u32] 1u8 into r1947;
    ternary r1946 0u8 r1943 into r1948;
    ternary r1946 r1947 r1941 into r1949;
    ternary r1942 r3[0u32][17u32] r1939 into r1950;
    ternary r1942 r1948 r1940 into r1951;
    ternary r1942 r1949 r1941 into r1952;
    is.eq 18u8 r13.flop_ij[0u32][1u32] into r1953;
    add r13.flop_ij[0u32][1u32] 1u8 into r1954;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1955;
    is.eq r1954 26u8 into r1956;
    and r1955 r1956 into r1957;
    add r13.flop_ij[0u32][0u32] 1u8 into r1958;
    ternary r1957 0u8 r1954 into r1959;
    ternary r1957 r1958 r1952 into r1960;
    ternary r1953 r3[0u32][18u32] r1950 into r1961;
    ternary r1953 r1959 r1951 into r1962;
    ternary r1953 r1960 r1952 into r1963;
    is.eq 19u8 r13.flop_ij[0u32][1u32] into r1964;
    add r13.flop_ij[0u32][1u32] 1u8 into r1965;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1966;
    is.eq r1965 26u8 into r1967;
    and r1966 r1967 into r1968;
    add r13.flop_ij[0u32][0u32] 1u8 into r1969;
    ternary r1968 0u8 r1965 into r1970;
    ternary r1968 r1969 r1963 into r1971;
    ternary r1964 r3[0u32][19u32] r1961 into r1972;
    ternary r1964 r1970 r1962 into r1973;
    ternary r1964 r1971 r1963 into r1974;
    is.eq 20u8 r13.flop_ij[0u32][1u32] into r1975;
    add r13.flop_ij[0u32][1u32] 1u8 into r1976;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1977;
    is.eq r1976 26u8 into r1978;
    and r1977 r1978 into r1979;
    add r13.flop_ij[0u32][0u32] 1u8 into r1980;
    ternary r1979 0u8 r1976 into r1981;
    ternary r1979 r1980 r1974 into r1982;
    ternary r1975 r3[0u32][20u32] r1972 into r1983;
    ternary r1975 r1981 r1973 into r1984;
    ternary r1975 r1982 r1974 into r1985;
    is.eq 21u8 r13.flop_ij[0u32][1u32] into r1986;
    add r13.flop_ij[0u32][1u32] 1u8 into r1987;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1988;
    is.eq r1987 26u8 into r1989;
    and r1988 r1989 into r1990;
    add r13.flop_ij[0u32][0u32] 1u8 into r1991;
    ternary r1990 0u8 r1987 into r1992;
    ternary r1990 r1991 r1985 into r1993;
    ternary r1986 r3[0u32][21u32] r1983 into r1994;
    ternary r1986 r1992 r1984 into r1995;
    ternary r1986 r1993 r1985 into r1996;
    is.eq 22u8 r13.flop_ij[0u32][1u32] into r1997;
    add r13.flop_ij[0u32][1u32] 1u8 into r1998;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r1999;
    is.eq r1998 26u8 into r2000;
    and r1999 r2000 into r2001;
    add r13.flop_ij[0u32][0u32] 1u8 into r2002;
    ternary r2001 0u8 r1998 into r2003;
    ternary r2001 r2002 r1996 into r2004;
    ternary r1997 r3[0u32][22u32] r1994 into r2005;
    ternary r1997 r2003 r1995 into r2006;
    ternary r1997 r2004 r1996 into r2007;
    is.eq 23u8 r13.flop_ij[0u32][1u32] into r2008;
    add r13.flop_ij[0u32][1u32] 1u8 into r2009;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2010;
    is.eq r2009 26u8 into r2011;
    and r2010 r2011 into r2012;
    add r13.flop_ij[0u32][0u32] 1u8 into r2013;
    ternary r2012 0u8 r2009 into r2014;
    ternary r2012 r2013 r2007 into r2015;
    ternary r2008 r3[0u32][23u32] r2005 into r2016;
    ternary r2008 r2014 r2006 into r2017;
    ternary r2008 r2015 r2007 into r2018;
    is.eq 24u8 r13.flop_ij[0u32][1u32] into r2019;
    add r13.flop_ij[0u32][1u32] 1u8 into r2020;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2021;
    is.eq r2020 26u8 into r2022;
    and r2021 r2022 into r2023;
    add r13.flop_ij[0u32][0u32] 1u8 into r2024;
    ternary r2023 0u8 r2020 into r2025;
    ternary r2023 r2024 r2018 into r2026;
    ternary r2019 r3[0u32][24u32] r2016 into r2027;
    ternary r2019 r2025 r2017 into r2028;
    ternary r2019 r2026 r2018 into r2029;
    is.eq 25u8 r13.flop_ij[0u32][1u32] into r2030;
    add r13.flop_ij[0u32][1u32] 1u8 into r2031;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2032;
    is.eq r2031 26u8 into r2033;
    and r2032 r2033 into r2034;
    add r13.flop_ij[0u32][0u32] 1u8 into r2035;
    ternary r2034 0u8 r2031 into r2036;
    ternary r2034 r2035 r2029 into r2037;
    ternary r2030 r3[0u32][25u32] r2027 into r2038;
    ternary r2030 r2036 r2028 into r2039;
    ternary r2030 r2037 r2029 into r2040;
    ternary r1754 r2038 0field into r2041;
    ternary r1754 r2039 0u8 into r2042;
    ternary r1754 r2040 0u8 into r2043;
    is.eq 1u8 r13.flop_ij[0u32][0u32] into r2044;
    is.eq 0u8 r13.flop_ij[0u32][1u32] into r2045;
    add r13.flop_ij[0u32][1u32] 1u8 into r2046;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2047;
    is.eq r2046 26u8 into r2048;
    and r2047 r2048 into r2049;
    add r13.flop_ij[0u32][0u32] 1u8 into r2050;
    ternary r2049 0u8 r2046 into r2051;
    ternary r2049 r2050 r2043 into r2052;
    ternary r2045 r3[1u32][0u32] r2041 into r2053;
    ternary r2045 r2051 r2042 into r2054;
    ternary r2045 r2052 r2043 into r2055;
    is.eq 1u8 r13.flop_ij[0u32][1u32] into r2056;
    add r13.flop_ij[0u32][1u32] 1u8 into r2057;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2058;
    is.eq r2057 26u8 into r2059;
    and r2058 r2059 into r2060;
    add r13.flop_ij[0u32][0u32] 1u8 into r2061;
    ternary r2060 0u8 r2057 into r2062;
    ternary r2060 r2061 r2055 into r2063;
    ternary r2056 r3[1u32][1u32] r2053 into r2064;
    ternary r2056 r2062 r2054 into r2065;
    ternary r2056 r2063 r2055 into r2066;
    is.eq 2u8 r13.flop_ij[0u32][1u32] into r2067;
    add r13.flop_ij[0u32][1u32] 1u8 into r2068;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2069;
    is.eq r2068 26u8 into r2070;
    and r2069 r2070 into r2071;
    add r13.flop_ij[0u32][0u32] 1u8 into r2072;
    ternary r2071 0u8 r2068 into r2073;
    ternary r2071 r2072 r2066 into r2074;
    ternary r2067 r3[1u32][2u32] r2064 into r2075;
    ternary r2067 r2073 r2065 into r2076;
    ternary r2067 r2074 r2066 into r2077;
    is.eq 3u8 r13.flop_ij[0u32][1u32] into r2078;
    add r13.flop_ij[0u32][1u32] 1u8 into r2079;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2080;
    is.eq r2079 26u8 into r2081;
    and r2080 r2081 into r2082;
    add r13.flop_ij[0u32][0u32] 1u8 into r2083;
    ternary r2082 0u8 r2079 into r2084;
    ternary r2082 r2083 r2077 into r2085;
    ternary r2078 r3[1u32][3u32] r2075 into r2086;
    ternary r2078 r2084 r2076 into r2087;
    ternary r2078 r2085 r2077 into r2088;
    is.eq 4u8 r13.flop_ij[0u32][1u32] into r2089;
    add r13.flop_ij[0u32][1u32] 1u8 into r2090;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2091;
    is.eq r2090 26u8 into r2092;
    and r2091 r2092 into r2093;
    add r13.flop_ij[0u32][0u32] 1u8 into r2094;
    ternary r2093 0u8 r2090 into r2095;
    ternary r2093 r2094 r2088 into r2096;
    ternary r2089 r3[1u32][4u32] r2086 into r2097;
    ternary r2089 r2095 r2087 into r2098;
    ternary r2089 r2096 r2088 into r2099;
    is.eq 5u8 r13.flop_ij[0u32][1u32] into r2100;
    add r13.flop_ij[0u32][1u32] 1u8 into r2101;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2102;
    is.eq r2101 26u8 into r2103;
    and r2102 r2103 into r2104;
    add r13.flop_ij[0u32][0u32] 1u8 into r2105;
    ternary r2104 0u8 r2101 into r2106;
    ternary r2104 r2105 r2099 into r2107;
    ternary r2100 r3[1u32][5u32] r2097 into r2108;
    ternary r2100 r2106 r2098 into r2109;
    ternary r2100 r2107 r2099 into r2110;
    is.eq 6u8 r13.flop_ij[0u32][1u32] into r2111;
    add r13.flop_ij[0u32][1u32] 1u8 into r2112;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2113;
    is.eq r2112 26u8 into r2114;
    and r2113 r2114 into r2115;
    add r13.flop_ij[0u32][0u32] 1u8 into r2116;
    ternary r2115 0u8 r2112 into r2117;
    ternary r2115 r2116 r2110 into r2118;
    ternary r2111 r3[1u32][6u32] r2108 into r2119;
    ternary r2111 r2117 r2109 into r2120;
    ternary r2111 r2118 r2110 into r2121;
    is.eq 7u8 r13.flop_ij[0u32][1u32] into r2122;
    add r13.flop_ij[0u32][1u32] 1u8 into r2123;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2124;
    is.eq r2123 26u8 into r2125;
    and r2124 r2125 into r2126;
    add r13.flop_ij[0u32][0u32] 1u8 into r2127;
    ternary r2126 0u8 r2123 into r2128;
    ternary r2126 r2127 r2121 into r2129;
    ternary r2122 r3[1u32][7u32] r2119 into r2130;
    ternary r2122 r2128 r2120 into r2131;
    ternary r2122 r2129 r2121 into r2132;
    is.eq 8u8 r13.flop_ij[0u32][1u32] into r2133;
    add r13.flop_ij[0u32][1u32] 1u8 into r2134;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2135;
    is.eq r2134 26u8 into r2136;
    and r2135 r2136 into r2137;
    add r13.flop_ij[0u32][0u32] 1u8 into r2138;
    ternary r2137 0u8 r2134 into r2139;
    ternary r2137 r2138 r2132 into r2140;
    ternary r2133 r3[1u32][8u32] r2130 into r2141;
    ternary r2133 r2139 r2131 into r2142;
    ternary r2133 r2140 r2132 into r2143;
    is.eq 9u8 r13.flop_ij[0u32][1u32] into r2144;
    add r13.flop_ij[0u32][1u32] 1u8 into r2145;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2146;
    is.eq r2145 26u8 into r2147;
    and r2146 r2147 into r2148;
    add r13.flop_ij[0u32][0u32] 1u8 into r2149;
    ternary r2148 0u8 r2145 into r2150;
    ternary r2148 r2149 r2143 into r2151;
    ternary r2144 r3[1u32][9u32] r2141 into r2152;
    ternary r2144 r2150 r2142 into r2153;
    ternary r2144 r2151 r2143 into r2154;
    is.eq 10u8 r13.flop_ij[0u32][1u32] into r2155;
    add r13.flop_ij[0u32][1u32] 1u8 into r2156;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2157;
    is.eq r2156 26u8 into r2158;
    and r2157 r2158 into r2159;
    add r13.flop_ij[0u32][0u32] 1u8 into r2160;
    ternary r2159 0u8 r2156 into r2161;
    ternary r2159 r2160 r2154 into r2162;
    ternary r2155 r3[1u32][10u32] r2152 into r2163;
    ternary r2155 r2161 r2153 into r2164;
    ternary r2155 r2162 r2154 into r2165;
    is.eq 11u8 r13.flop_ij[0u32][1u32] into r2166;
    add r13.flop_ij[0u32][1u32] 1u8 into r2167;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2168;
    is.eq r2167 26u8 into r2169;
    and r2168 r2169 into r2170;
    add r13.flop_ij[0u32][0u32] 1u8 into r2171;
    ternary r2170 0u8 r2167 into r2172;
    ternary r2170 r2171 r2165 into r2173;
    ternary r2166 r3[1u32][11u32] r2163 into r2174;
    ternary r2166 r2172 r2164 into r2175;
    ternary r2166 r2173 r2165 into r2176;
    is.eq 12u8 r13.flop_ij[0u32][1u32] into r2177;
    add r13.flop_ij[0u32][1u32] 1u8 into r2178;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2179;
    is.eq r2178 26u8 into r2180;
    and r2179 r2180 into r2181;
    add r13.flop_ij[0u32][0u32] 1u8 into r2182;
    ternary r2181 0u8 r2178 into r2183;
    ternary r2181 r2182 r2176 into r2184;
    ternary r2177 r3[1u32][12u32] r2174 into r2185;
    ternary r2177 r2183 r2175 into r2186;
    ternary r2177 r2184 r2176 into r2187;
    is.eq 13u8 r13.flop_ij[0u32][1u32] into r2188;
    add r13.flop_ij[0u32][1u32] 1u8 into r2189;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2190;
    is.eq r2189 26u8 into r2191;
    and r2190 r2191 into r2192;
    add r13.flop_ij[0u32][0u32] 1u8 into r2193;
    ternary r2192 0u8 r2189 into r2194;
    ternary r2192 r2193 r2187 into r2195;
    ternary r2188 r3[1u32][13u32] r2185 into r2196;
    ternary r2188 r2194 r2186 into r2197;
    ternary r2188 r2195 r2187 into r2198;
    is.eq 14u8 r13.flop_ij[0u32][1u32] into r2199;
    add r13.flop_ij[0u32][1u32] 1u8 into r2200;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2201;
    is.eq r2200 26u8 into r2202;
    and r2201 r2202 into r2203;
    add r13.flop_ij[0u32][0u32] 1u8 into r2204;
    ternary r2203 0u8 r2200 into r2205;
    ternary r2203 r2204 r2198 into r2206;
    ternary r2199 r3[1u32][14u32] r2196 into r2207;
    ternary r2199 r2205 r2197 into r2208;
    ternary r2199 r2206 r2198 into r2209;
    is.eq 15u8 r13.flop_ij[0u32][1u32] into r2210;
    add r13.flop_ij[0u32][1u32] 1u8 into r2211;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2212;
    is.eq r2211 26u8 into r2213;
    and r2212 r2213 into r2214;
    add r13.flop_ij[0u32][0u32] 1u8 into r2215;
    ternary r2214 0u8 r2211 into r2216;
    ternary r2214 r2215 r2209 into r2217;
    ternary r2210 r3[1u32][15u32] r2207 into r2218;
    ternary r2210 r2216 r2208 into r2219;
    ternary r2210 r2217 r2209 into r2220;
    is.eq 16u8 r13.flop_ij[0u32][1u32] into r2221;
    add r13.flop_ij[0u32][1u32] 1u8 into r2222;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2223;
    is.eq r2222 26u8 into r2224;
    and r2223 r2224 into r2225;
    add r13.flop_ij[0u32][0u32] 1u8 into r2226;
    ternary r2225 0u8 r2222 into r2227;
    ternary r2225 r2226 r2220 into r2228;
    ternary r2221 r3[1u32][16u32] r2218 into r2229;
    ternary r2221 r2227 r2219 into r2230;
    ternary r2221 r2228 r2220 into r2231;
    is.eq 17u8 r13.flop_ij[0u32][1u32] into r2232;
    add r13.flop_ij[0u32][1u32] 1u8 into r2233;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2234;
    is.eq r2233 26u8 into r2235;
    and r2234 r2235 into r2236;
    add r13.flop_ij[0u32][0u32] 1u8 into r2237;
    ternary r2236 0u8 r2233 into r2238;
    ternary r2236 r2237 r2231 into r2239;
    ternary r2232 r3[1u32][17u32] r2229 into r2240;
    ternary r2232 r2238 r2230 into r2241;
    ternary r2232 r2239 r2231 into r2242;
    is.eq 18u8 r13.flop_ij[0u32][1u32] into r2243;
    add r13.flop_ij[0u32][1u32] 1u8 into r2244;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2245;
    is.eq r2244 26u8 into r2246;
    and r2245 r2246 into r2247;
    add r13.flop_ij[0u32][0u32] 1u8 into r2248;
    ternary r2247 0u8 r2244 into r2249;
    ternary r2247 r2248 r2242 into r2250;
    ternary r2243 r3[1u32][18u32] r2240 into r2251;
    ternary r2243 r2249 r2241 into r2252;
    ternary r2243 r2250 r2242 into r2253;
    is.eq 19u8 r13.flop_ij[0u32][1u32] into r2254;
    add r13.flop_ij[0u32][1u32] 1u8 into r2255;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2256;
    is.eq r2255 26u8 into r2257;
    and r2256 r2257 into r2258;
    add r13.flop_ij[0u32][0u32] 1u8 into r2259;
    ternary r2258 0u8 r2255 into r2260;
    ternary r2258 r2259 r2253 into r2261;
    ternary r2254 r3[1u32][19u32] r2251 into r2262;
    ternary r2254 r2260 r2252 into r2263;
    ternary r2254 r2261 r2253 into r2264;
    is.eq 20u8 r13.flop_ij[0u32][1u32] into r2265;
    add r13.flop_ij[0u32][1u32] 1u8 into r2266;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2267;
    is.eq r2266 26u8 into r2268;
    and r2267 r2268 into r2269;
    add r13.flop_ij[0u32][0u32] 1u8 into r2270;
    ternary r2269 0u8 r2266 into r2271;
    ternary r2269 r2270 r2264 into r2272;
    ternary r2265 r3[1u32][20u32] r2262 into r2273;
    ternary r2265 r2271 r2263 into r2274;
    ternary r2265 r2272 r2264 into r2275;
    is.eq 21u8 r13.flop_ij[0u32][1u32] into r2276;
    add r13.flop_ij[0u32][1u32] 1u8 into r2277;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2278;
    is.eq r2277 26u8 into r2279;
    and r2278 r2279 into r2280;
    add r13.flop_ij[0u32][0u32] 1u8 into r2281;
    ternary r2280 0u8 r2277 into r2282;
    ternary r2280 r2281 r2275 into r2283;
    ternary r2276 r3[1u32][21u32] r2273 into r2284;
    ternary r2276 r2282 r2274 into r2285;
    ternary r2276 r2283 r2275 into r2286;
    is.eq 22u8 r13.flop_ij[0u32][1u32] into r2287;
    add r13.flop_ij[0u32][1u32] 1u8 into r2288;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2289;
    is.eq r2288 26u8 into r2290;
    and r2289 r2290 into r2291;
    add r13.flop_ij[0u32][0u32] 1u8 into r2292;
    ternary r2291 0u8 r2288 into r2293;
    ternary r2291 r2292 r2286 into r2294;
    ternary r2287 r3[1u32][22u32] r2284 into r2295;
    ternary r2287 r2293 r2285 into r2296;
    ternary r2287 r2294 r2286 into r2297;
    is.eq 23u8 r13.flop_ij[0u32][1u32] into r2298;
    add r13.flop_ij[0u32][1u32] 1u8 into r2299;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2300;
    is.eq r2299 26u8 into r2301;
    and r2300 r2301 into r2302;
    add r13.flop_ij[0u32][0u32] 1u8 into r2303;
    ternary r2302 0u8 r2299 into r2304;
    ternary r2302 r2303 r2297 into r2305;
    ternary r2298 r3[1u32][23u32] r2295 into r2306;
    ternary r2298 r2304 r2296 into r2307;
    ternary r2298 r2305 r2297 into r2308;
    is.eq 24u8 r13.flop_ij[0u32][1u32] into r2309;
    add r13.flop_ij[0u32][1u32] 1u8 into r2310;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2311;
    is.eq r2310 26u8 into r2312;
    and r2311 r2312 into r2313;
    add r13.flop_ij[0u32][0u32] 1u8 into r2314;
    ternary r2313 0u8 r2310 into r2315;
    ternary r2313 r2314 r2308 into r2316;
    ternary r2309 r3[1u32][24u32] r2306 into r2317;
    ternary r2309 r2315 r2307 into r2318;
    ternary r2309 r2316 r2308 into r2319;
    is.eq 25u8 r13.flop_ij[0u32][1u32] into r2320;
    add r13.flop_ij[0u32][1u32] 1u8 into r2321;
    is.eq r13.flop_ij[0u32][0u32] 0u8 into r2322;
    is.eq r2321 26u8 into r2323;
    and r2322 r2323 into r2324;
    add r13.flop_ij[0u32][0u32] 1u8 into r2325;
    ternary r2324 0u8 r2321 into r2326;
    ternary r2324 r2325 r2319 into r2327;
    ternary r2320 r3[1u32][25u32] r2317 into r2328;
    ternary r2320 r2326 r2318 into r2329;
    ternary r2320 r2327 r2319 into r2330;
    ternary r2044 r2328 r2041 into r2331;
    ternary r2044 r2329 r2042 into r2332;
    ternary r2044 r2330 r2043 into r2333;
    is.eq 0u8 r13.flop_ij[1u32][0u32] into r2334;
    is.eq 0u8 r13.flop_ij[1u32][1u32] into r2335;
    add r13.flop_ij[1u32][1u32] 1u8 into r2336;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2337;
    is.eq r2336 26u8 into r2338;
    and r2337 r2338 into r2339;
    add r13.flop_ij[1u32][0u32] 1u8 into r2340;
    ternary r2339 0u8 r2336 into r2341;
    ternary r2339 r2340 0u8 into r2342;
    ternary r2335 r3[0u32][0u32] 0field into r2343;
    ternary r2335 r2341 0u8 into r2344;
    ternary r2335 r2342 0u8 into r2345;
    is.eq 1u8 r13.flop_ij[1u32][1u32] into r2346;
    add r13.flop_ij[1u32][1u32] 1u8 into r2347;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2348;
    is.eq r2347 26u8 into r2349;
    and r2348 r2349 into r2350;
    add r13.flop_ij[1u32][0u32] 1u8 into r2351;
    ternary r2350 0u8 r2347 into r2352;
    ternary r2350 r2351 r2345 into r2353;
    ternary r2346 r3[0u32][1u32] r2343 into r2354;
    ternary r2346 r2352 r2344 into r2355;
    ternary r2346 r2353 r2345 into r2356;
    is.eq 2u8 r13.flop_ij[1u32][1u32] into r2357;
    add r13.flop_ij[1u32][1u32] 1u8 into r2358;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2359;
    is.eq r2358 26u8 into r2360;
    and r2359 r2360 into r2361;
    add r13.flop_ij[1u32][0u32] 1u8 into r2362;
    ternary r2361 0u8 r2358 into r2363;
    ternary r2361 r2362 r2356 into r2364;
    ternary r2357 r3[0u32][2u32] r2354 into r2365;
    ternary r2357 r2363 r2355 into r2366;
    ternary r2357 r2364 r2356 into r2367;
    is.eq 3u8 r13.flop_ij[1u32][1u32] into r2368;
    add r13.flop_ij[1u32][1u32] 1u8 into r2369;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2370;
    is.eq r2369 26u8 into r2371;
    and r2370 r2371 into r2372;
    add r13.flop_ij[1u32][0u32] 1u8 into r2373;
    ternary r2372 0u8 r2369 into r2374;
    ternary r2372 r2373 r2367 into r2375;
    ternary r2368 r3[0u32][3u32] r2365 into r2376;
    ternary r2368 r2374 r2366 into r2377;
    ternary r2368 r2375 r2367 into r2378;
    is.eq 4u8 r13.flop_ij[1u32][1u32] into r2379;
    add r13.flop_ij[1u32][1u32] 1u8 into r2380;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2381;
    is.eq r2380 26u8 into r2382;
    and r2381 r2382 into r2383;
    add r13.flop_ij[1u32][0u32] 1u8 into r2384;
    ternary r2383 0u8 r2380 into r2385;
    ternary r2383 r2384 r2378 into r2386;
    ternary r2379 r3[0u32][4u32] r2376 into r2387;
    ternary r2379 r2385 r2377 into r2388;
    ternary r2379 r2386 r2378 into r2389;
    is.eq 5u8 r13.flop_ij[1u32][1u32] into r2390;
    add r13.flop_ij[1u32][1u32] 1u8 into r2391;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2392;
    is.eq r2391 26u8 into r2393;
    and r2392 r2393 into r2394;
    add r13.flop_ij[1u32][0u32] 1u8 into r2395;
    ternary r2394 0u8 r2391 into r2396;
    ternary r2394 r2395 r2389 into r2397;
    ternary r2390 r3[0u32][5u32] r2387 into r2398;
    ternary r2390 r2396 r2388 into r2399;
    ternary r2390 r2397 r2389 into r2400;
    is.eq 6u8 r13.flop_ij[1u32][1u32] into r2401;
    add r13.flop_ij[1u32][1u32] 1u8 into r2402;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2403;
    is.eq r2402 26u8 into r2404;
    and r2403 r2404 into r2405;
    add r13.flop_ij[1u32][0u32] 1u8 into r2406;
    ternary r2405 0u8 r2402 into r2407;
    ternary r2405 r2406 r2400 into r2408;
    ternary r2401 r3[0u32][6u32] r2398 into r2409;
    ternary r2401 r2407 r2399 into r2410;
    ternary r2401 r2408 r2400 into r2411;
    is.eq 7u8 r13.flop_ij[1u32][1u32] into r2412;
    add r13.flop_ij[1u32][1u32] 1u8 into r2413;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2414;
    is.eq r2413 26u8 into r2415;
    and r2414 r2415 into r2416;
    add r13.flop_ij[1u32][0u32] 1u8 into r2417;
    ternary r2416 0u8 r2413 into r2418;
    ternary r2416 r2417 r2411 into r2419;
    ternary r2412 r3[0u32][7u32] r2409 into r2420;
    ternary r2412 r2418 r2410 into r2421;
    ternary r2412 r2419 r2411 into r2422;
    is.eq 8u8 r13.flop_ij[1u32][1u32] into r2423;
    add r13.flop_ij[1u32][1u32] 1u8 into r2424;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2425;
    is.eq r2424 26u8 into r2426;
    and r2425 r2426 into r2427;
    add r13.flop_ij[1u32][0u32] 1u8 into r2428;
    ternary r2427 0u8 r2424 into r2429;
    ternary r2427 r2428 r2422 into r2430;
    ternary r2423 r3[0u32][8u32] r2420 into r2431;
    ternary r2423 r2429 r2421 into r2432;
    ternary r2423 r2430 r2422 into r2433;
    is.eq 9u8 r13.flop_ij[1u32][1u32] into r2434;
    add r13.flop_ij[1u32][1u32] 1u8 into r2435;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2436;
    is.eq r2435 26u8 into r2437;
    and r2436 r2437 into r2438;
    add r13.flop_ij[1u32][0u32] 1u8 into r2439;
    ternary r2438 0u8 r2435 into r2440;
    ternary r2438 r2439 r2433 into r2441;
    ternary r2434 r3[0u32][9u32] r2431 into r2442;
    ternary r2434 r2440 r2432 into r2443;
    ternary r2434 r2441 r2433 into r2444;
    is.eq 10u8 r13.flop_ij[1u32][1u32] into r2445;
    add r13.flop_ij[1u32][1u32] 1u8 into r2446;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2447;
    is.eq r2446 26u8 into r2448;
    and r2447 r2448 into r2449;
    add r13.flop_ij[1u32][0u32] 1u8 into r2450;
    ternary r2449 0u8 r2446 into r2451;
    ternary r2449 r2450 r2444 into r2452;
    ternary r2445 r3[0u32][10u32] r2442 into r2453;
    ternary r2445 r2451 r2443 into r2454;
    ternary r2445 r2452 r2444 into r2455;
    is.eq 11u8 r13.flop_ij[1u32][1u32] into r2456;
    add r13.flop_ij[1u32][1u32] 1u8 into r2457;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2458;
    is.eq r2457 26u8 into r2459;
    and r2458 r2459 into r2460;
    add r13.flop_ij[1u32][0u32] 1u8 into r2461;
    ternary r2460 0u8 r2457 into r2462;
    ternary r2460 r2461 r2455 into r2463;
    ternary r2456 r3[0u32][11u32] r2453 into r2464;
    ternary r2456 r2462 r2454 into r2465;
    ternary r2456 r2463 r2455 into r2466;
    is.eq 12u8 r13.flop_ij[1u32][1u32] into r2467;
    add r13.flop_ij[1u32][1u32] 1u8 into r2468;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2469;
    is.eq r2468 26u8 into r2470;
    and r2469 r2470 into r2471;
    add r13.flop_ij[1u32][0u32] 1u8 into r2472;
    ternary r2471 0u8 r2468 into r2473;
    ternary r2471 r2472 r2466 into r2474;
    ternary r2467 r3[0u32][12u32] r2464 into r2475;
    ternary r2467 r2473 r2465 into r2476;
    ternary r2467 r2474 r2466 into r2477;
    is.eq 13u8 r13.flop_ij[1u32][1u32] into r2478;
    add r13.flop_ij[1u32][1u32] 1u8 into r2479;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2480;
    is.eq r2479 26u8 into r2481;
    and r2480 r2481 into r2482;
    add r13.flop_ij[1u32][0u32] 1u8 into r2483;
    ternary r2482 0u8 r2479 into r2484;
    ternary r2482 r2483 r2477 into r2485;
    ternary r2478 r3[0u32][13u32] r2475 into r2486;
    ternary r2478 r2484 r2476 into r2487;
    ternary r2478 r2485 r2477 into r2488;
    is.eq 14u8 r13.flop_ij[1u32][1u32] into r2489;
    add r13.flop_ij[1u32][1u32] 1u8 into r2490;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2491;
    is.eq r2490 26u8 into r2492;
    and r2491 r2492 into r2493;
    add r13.flop_ij[1u32][0u32] 1u8 into r2494;
    ternary r2493 0u8 r2490 into r2495;
    ternary r2493 r2494 r2488 into r2496;
    ternary r2489 r3[0u32][14u32] r2486 into r2497;
    ternary r2489 r2495 r2487 into r2498;
    ternary r2489 r2496 r2488 into r2499;
    is.eq 15u8 r13.flop_ij[1u32][1u32] into r2500;
    add r13.flop_ij[1u32][1u32] 1u8 into r2501;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2502;
    is.eq r2501 26u8 into r2503;
    and r2502 r2503 into r2504;
    add r13.flop_ij[1u32][0u32] 1u8 into r2505;
    ternary r2504 0u8 r2501 into r2506;
    ternary r2504 r2505 r2499 into r2507;
    ternary r2500 r3[0u32][15u32] r2497 into r2508;
    ternary r2500 r2506 r2498 into r2509;
    ternary r2500 r2507 r2499 into r2510;
    is.eq 16u8 r13.flop_ij[1u32][1u32] into r2511;
    add r13.flop_ij[1u32][1u32] 1u8 into r2512;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2513;
    is.eq r2512 26u8 into r2514;
    and r2513 r2514 into r2515;
    add r13.flop_ij[1u32][0u32] 1u8 into r2516;
    ternary r2515 0u8 r2512 into r2517;
    ternary r2515 r2516 r2510 into r2518;
    ternary r2511 r3[0u32][16u32] r2508 into r2519;
    ternary r2511 r2517 r2509 into r2520;
    ternary r2511 r2518 r2510 into r2521;
    is.eq 17u8 r13.flop_ij[1u32][1u32] into r2522;
    add r13.flop_ij[1u32][1u32] 1u8 into r2523;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2524;
    is.eq r2523 26u8 into r2525;
    and r2524 r2525 into r2526;
    add r13.flop_ij[1u32][0u32] 1u8 into r2527;
    ternary r2526 0u8 r2523 into r2528;
    ternary r2526 r2527 r2521 into r2529;
    ternary r2522 r3[0u32][17u32] r2519 into r2530;
    ternary r2522 r2528 r2520 into r2531;
    ternary r2522 r2529 r2521 into r2532;
    is.eq 18u8 r13.flop_ij[1u32][1u32] into r2533;
    add r13.flop_ij[1u32][1u32] 1u8 into r2534;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2535;
    is.eq r2534 26u8 into r2536;
    and r2535 r2536 into r2537;
    add r13.flop_ij[1u32][0u32] 1u8 into r2538;
    ternary r2537 0u8 r2534 into r2539;
    ternary r2537 r2538 r2532 into r2540;
    ternary r2533 r3[0u32][18u32] r2530 into r2541;
    ternary r2533 r2539 r2531 into r2542;
    ternary r2533 r2540 r2532 into r2543;
    is.eq 19u8 r13.flop_ij[1u32][1u32] into r2544;
    add r13.flop_ij[1u32][1u32] 1u8 into r2545;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2546;
    is.eq r2545 26u8 into r2547;
    and r2546 r2547 into r2548;
    add r13.flop_ij[1u32][0u32] 1u8 into r2549;
    ternary r2548 0u8 r2545 into r2550;
    ternary r2548 r2549 r2543 into r2551;
    ternary r2544 r3[0u32][19u32] r2541 into r2552;
    ternary r2544 r2550 r2542 into r2553;
    ternary r2544 r2551 r2543 into r2554;
    is.eq 20u8 r13.flop_ij[1u32][1u32] into r2555;
    add r13.flop_ij[1u32][1u32] 1u8 into r2556;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2557;
    is.eq r2556 26u8 into r2558;
    and r2557 r2558 into r2559;
    add r13.flop_ij[1u32][0u32] 1u8 into r2560;
    ternary r2559 0u8 r2556 into r2561;
    ternary r2559 r2560 r2554 into r2562;
    ternary r2555 r3[0u32][20u32] r2552 into r2563;
    ternary r2555 r2561 r2553 into r2564;
    ternary r2555 r2562 r2554 into r2565;
    is.eq 21u8 r13.flop_ij[1u32][1u32] into r2566;
    add r13.flop_ij[1u32][1u32] 1u8 into r2567;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2568;
    is.eq r2567 26u8 into r2569;
    and r2568 r2569 into r2570;
    add r13.flop_ij[1u32][0u32] 1u8 into r2571;
    ternary r2570 0u8 r2567 into r2572;
    ternary r2570 r2571 r2565 into r2573;
    ternary r2566 r3[0u32][21u32] r2563 into r2574;
    ternary r2566 r2572 r2564 into r2575;
    ternary r2566 r2573 r2565 into r2576;
    is.eq 22u8 r13.flop_ij[1u32][1u32] into r2577;
    add r13.flop_ij[1u32][1u32] 1u8 into r2578;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2579;
    is.eq r2578 26u8 into r2580;
    and r2579 r2580 into r2581;
    add r13.flop_ij[1u32][0u32] 1u8 into r2582;
    ternary r2581 0u8 r2578 into r2583;
    ternary r2581 r2582 r2576 into r2584;
    ternary r2577 r3[0u32][22u32] r2574 into r2585;
    ternary r2577 r2583 r2575 into r2586;
    ternary r2577 r2584 r2576 into r2587;
    is.eq 23u8 r13.flop_ij[1u32][1u32] into r2588;
    add r13.flop_ij[1u32][1u32] 1u8 into r2589;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2590;
    is.eq r2589 26u8 into r2591;
    and r2590 r2591 into r2592;
    add r13.flop_ij[1u32][0u32] 1u8 into r2593;
    ternary r2592 0u8 r2589 into r2594;
    ternary r2592 r2593 r2587 into r2595;
    ternary r2588 r3[0u32][23u32] r2585 into r2596;
    ternary r2588 r2594 r2586 into r2597;
    ternary r2588 r2595 r2587 into r2598;
    is.eq 24u8 r13.flop_ij[1u32][1u32] into r2599;
    add r13.flop_ij[1u32][1u32] 1u8 into r2600;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2601;
    is.eq r2600 26u8 into r2602;
    and r2601 r2602 into r2603;
    add r13.flop_ij[1u32][0u32] 1u8 into r2604;
    ternary r2603 0u8 r2600 into r2605;
    ternary r2603 r2604 r2598 into r2606;
    ternary r2599 r3[0u32][24u32] r2596 into r2607;
    ternary r2599 r2605 r2597 into r2608;
    ternary r2599 r2606 r2598 into r2609;
    is.eq 25u8 r13.flop_ij[1u32][1u32] into r2610;
    add r13.flop_ij[1u32][1u32] 1u8 into r2611;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2612;
    is.eq r2611 26u8 into r2613;
    and r2612 r2613 into r2614;
    add r13.flop_ij[1u32][0u32] 1u8 into r2615;
    ternary r2614 0u8 r2611 into r2616;
    ternary r2614 r2615 r2609 into r2617;
    ternary r2610 r3[0u32][25u32] r2607 into r2618;
    ternary r2610 r2616 r2608 into r2619;
    ternary r2610 r2617 r2609 into r2620;
    ternary r2334 r2618 0field into r2621;
    ternary r2334 r2619 0u8 into r2622;
    ternary r2334 r2620 0u8 into r2623;
    is.eq 1u8 r13.flop_ij[1u32][0u32] into r2624;
    is.eq 0u8 r13.flop_ij[1u32][1u32] into r2625;
    add r13.flop_ij[1u32][1u32] 1u8 into r2626;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2627;
    is.eq r2626 26u8 into r2628;
    and r2627 r2628 into r2629;
    add r13.flop_ij[1u32][0u32] 1u8 into r2630;
    ternary r2629 0u8 r2626 into r2631;
    ternary r2629 r2630 r2623 into r2632;
    ternary r2625 r3[1u32][0u32] r2621 into r2633;
    ternary r2625 r2631 r2622 into r2634;
    ternary r2625 r2632 r2623 into r2635;
    is.eq 1u8 r13.flop_ij[1u32][1u32] into r2636;
    add r13.flop_ij[1u32][1u32] 1u8 into r2637;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2638;
    is.eq r2637 26u8 into r2639;
    and r2638 r2639 into r2640;
    add r13.flop_ij[1u32][0u32] 1u8 into r2641;
    ternary r2640 0u8 r2637 into r2642;
    ternary r2640 r2641 r2635 into r2643;
    ternary r2636 r3[1u32][1u32] r2633 into r2644;
    ternary r2636 r2642 r2634 into r2645;
    ternary r2636 r2643 r2635 into r2646;
    is.eq 2u8 r13.flop_ij[1u32][1u32] into r2647;
    add r13.flop_ij[1u32][1u32] 1u8 into r2648;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2649;
    is.eq r2648 26u8 into r2650;
    and r2649 r2650 into r2651;
    add r13.flop_ij[1u32][0u32] 1u8 into r2652;
    ternary r2651 0u8 r2648 into r2653;
    ternary r2651 r2652 r2646 into r2654;
    ternary r2647 r3[1u32][2u32] r2644 into r2655;
    ternary r2647 r2653 r2645 into r2656;
    ternary r2647 r2654 r2646 into r2657;
    is.eq 3u8 r13.flop_ij[1u32][1u32] into r2658;
    add r13.flop_ij[1u32][1u32] 1u8 into r2659;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2660;
    is.eq r2659 26u8 into r2661;
    and r2660 r2661 into r2662;
    add r13.flop_ij[1u32][0u32] 1u8 into r2663;
    ternary r2662 0u8 r2659 into r2664;
    ternary r2662 r2663 r2657 into r2665;
    ternary r2658 r3[1u32][3u32] r2655 into r2666;
    ternary r2658 r2664 r2656 into r2667;
    ternary r2658 r2665 r2657 into r2668;
    is.eq 4u8 r13.flop_ij[1u32][1u32] into r2669;
    add r13.flop_ij[1u32][1u32] 1u8 into r2670;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2671;
    is.eq r2670 26u8 into r2672;
    and r2671 r2672 into r2673;
    add r13.flop_ij[1u32][0u32] 1u8 into r2674;
    ternary r2673 0u8 r2670 into r2675;
    ternary r2673 r2674 r2668 into r2676;
    ternary r2669 r3[1u32][4u32] r2666 into r2677;
    ternary r2669 r2675 r2667 into r2678;
    ternary r2669 r2676 r2668 into r2679;
    is.eq 5u8 r13.flop_ij[1u32][1u32] into r2680;
    add r13.flop_ij[1u32][1u32] 1u8 into r2681;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2682;
    is.eq r2681 26u8 into r2683;
    and r2682 r2683 into r2684;
    add r13.flop_ij[1u32][0u32] 1u8 into r2685;
    ternary r2684 0u8 r2681 into r2686;
    ternary r2684 r2685 r2679 into r2687;
    ternary r2680 r3[1u32][5u32] r2677 into r2688;
    ternary r2680 r2686 r2678 into r2689;
    ternary r2680 r2687 r2679 into r2690;
    is.eq 6u8 r13.flop_ij[1u32][1u32] into r2691;
    add r13.flop_ij[1u32][1u32] 1u8 into r2692;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2693;
    is.eq r2692 26u8 into r2694;
    and r2693 r2694 into r2695;
    add r13.flop_ij[1u32][0u32] 1u8 into r2696;
    ternary r2695 0u8 r2692 into r2697;
    ternary r2695 r2696 r2690 into r2698;
    ternary r2691 r3[1u32][6u32] r2688 into r2699;
    ternary r2691 r2697 r2689 into r2700;
    ternary r2691 r2698 r2690 into r2701;
    is.eq 7u8 r13.flop_ij[1u32][1u32] into r2702;
    add r13.flop_ij[1u32][1u32] 1u8 into r2703;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2704;
    is.eq r2703 26u8 into r2705;
    and r2704 r2705 into r2706;
    add r13.flop_ij[1u32][0u32] 1u8 into r2707;
    ternary r2706 0u8 r2703 into r2708;
    ternary r2706 r2707 r2701 into r2709;
    ternary r2702 r3[1u32][7u32] r2699 into r2710;
    ternary r2702 r2708 r2700 into r2711;
    ternary r2702 r2709 r2701 into r2712;
    is.eq 8u8 r13.flop_ij[1u32][1u32] into r2713;
    add r13.flop_ij[1u32][1u32] 1u8 into r2714;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2715;
    is.eq r2714 26u8 into r2716;
    and r2715 r2716 into r2717;
    add r13.flop_ij[1u32][0u32] 1u8 into r2718;
    ternary r2717 0u8 r2714 into r2719;
    ternary r2717 r2718 r2712 into r2720;
    ternary r2713 r3[1u32][8u32] r2710 into r2721;
    ternary r2713 r2719 r2711 into r2722;
    ternary r2713 r2720 r2712 into r2723;
    is.eq 9u8 r13.flop_ij[1u32][1u32] into r2724;
    add r13.flop_ij[1u32][1u32] 1u8 into r2725;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2726;
    is.eq r2725 26u8 into r2727;
    and r2726 r2727 into r2728;
    add r13.flop_ij[1u32][0u32] 1u8 into r2729;
    ternary r2728 0u8 r2725 into r2730;
    ternary r2728 r2729 r2723 into r2731;
    ternary r2724 r3[1u32][9u32] r2721 into r2732;
    ternary r2724 r2730 r2722 into r2733;
    ternary r2724 r2731 r2723 into r2734;
    is.eq 10u8 r13.flop_ij[1u32][1u32] into r2735;
    add r13.flop_ij[1u32][1u32] 1u8 into r2736;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2737;
    is.eq r2736 26u8 into r2738;
    and r2737 r2738 into r2739;
    add r13.flop_ij[1u32][0u32] 1u8 into r2740;
    ternary r2739 0u8 r2736 into r2741;
    ternary r2739 r2740 r2734 into r2742;
    ternary r2735 r3[1u32][10u32] r2732 into r2743;
    ternary r2735 r2741 r2733 into r2744;
    ternary r2735 r2742 r2734 into r2745;
    is.eq 11u8 r13.flop_ij[1u32][1u32] into r2746;
    add r13.flop_ij[1u32][1u32] 1u8 into r2747;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2748;
    is.eq r2747 26u8 into r2749;
    and r2748 r2749 into r2750;
    add r13.flop_ij[1u32][0u32] 1u8 into r2751;
    ternary r2750 0u8 r2747 into r2752;
    ternary r2750 r2751 r2745 into r2753;
    ternary r2746 r3[1u32][11u32] r2743 into r2754;
    ternary r2746 r2752 r2744 into r2755;
    ternary r2746 r2753 r2745 into r2756;
    is.eq 12u8 r13.flop_ij[1u32][1u32] into r2757;
    add r13.flop_ij[1u32][1u32] 1u8 into r2758;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2759;
    is.eq r2758 26u8 into r2760;
    and r2759 r2760 into r2761;
    add r13.flop_ij[1u32][0u32] 1u8 into r2762;
    ternary r2761 0u8 r2758 into r2763;
    ternary r2761 r2762 r2756 into r2764;
    ternary r2757 r3[1u32][12u32] r2754 into r2765;
    ternary r2757 r2763 r2755 into r2766;
    ternary r2757 r2764 r2756 into r2767;
    is.eq 13u8 r13.flop_ij[1u32][1u32] into r2768;
    add r13.flop_ij[1u32][1u32] 1u8 into r2769;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2770;
    is.eq r2769 26u8 into r2771;
    and r2770 r2771 into r2772;
    add r13.flop_ij[1u32][0u32] 1u8 into r2773;
    ternary r2772 0u8 r2769 into r2774;
    ternary r2772 r2773 r2767 into r2775;
    ternary r2768 r3[1u32][13u32] r2765 into r2776;
    ternary r2768 r2774 r2766 into r2777;
    ternary r2768 r2775 r2767 into r2778;
    is.eq 14u8 r13.flop_ij[1u32][1u32] into r2779;
    add r13.flop_ij[1u32][1u32] 1u8 into r2780;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2781;
    is.eq r2780 26u8 into r2782;
    and r2781 r2782 into r2783;
    add r13.flop_ij[1u32][0u32] 1u8 into r2784;
    ternary r2783 0u8 r2780 into r2785;
    ternary r2783 r2784 r2778 into r2786;
    ternary r2779 r3[1u32][14u32] r2776 into r2787;
    ternary r2779 r2785 r2777 into r2788;
    ternary r2779 r2786 r2778 into r2789;
    is.eq 15u8 r13.flop_ij[1u32][1u32] into r2790;
    add r13.flop_ij[1u32][1u32] 1u8 into r2791;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2792;
    is.eq r2791 26u8 into r2793;
    and r2792 r2793 into r2794;
    add r13.flop_ij[1u32][0u32] 1u8 into r2795;
    ternary r2794 0u8 r2791 into r2796;
    ternary r2794 r2795 r2789 into r2797;
    ternary r2790 r3[1u32][15u32] r2787 into r2798;
    ternary r2790 r2796 r2788 into r2799;
    ternary r2790 r2797 r2789 into r2800;
    is.eq 16u8 r13.flop_ij[1u32][1u32] into r2801;
    add r13.flop_ij[1u32][1u32] 1u8 into r2802;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2803;
    is.eq r2802 26u8 into r2804;
    and r2803 r2804 into r2805;
    add r13.flop_ij[1u32][0u32] 1u8 into r2806;
    ternary r2805 0u8 r2802 into r2807;
    ternary r2805 r2806 r2800 into r2808;
    ternary r2801 r3[1u32][16u32] r2798 into r2809;
    ternary r2801 r2807 r2799 into r2810;
    ternary r2801 r2808 r2800 into r2811;
    is.eq 17u8 r13.flop_ij[1u32][1u32] into r2812;
    add r13.flop_ij[1u32][1u32] 1u8 into r2813;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2814;
    is.eq r2813 26u8 into r2815;
    and r2814 r2815 into r2816;
    add r13.flop_ij[1u32][0u32] 1u8 into r2817;
    ternary r2816 0u8 r2813 into r2818;
    ternary r2816 r2817 r2811 into r2819;
    ternary r2812 r3[1u32][17u32] r2809 into r2820;
    ternary r2812 r2818 r2810 into r2821;
    ternary r2812 r2819 r2811 into r2822;
    is.eq 18u8 r13.flop_ij[1u32][1u32] into r2823;
    add r13.flop_ij[1u32][1u32] 1u8 into r2824;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2825;
    is.eq r2824 26u8 into r2826;
    and r2825 r2826 into r2827;
    add r13.flop_ij[1u32][0u32] 1u8 into r2828;
    ternary r2827 0u8 r2824 into r2829;
    ternary r2827 r2828 r2822 into r2830;
    ternary r2823 r3[1u32][18u32] r2820 into r2831;
    ternary r2823 r2829 r2821 into r2832;
    ternary r2823 r2830 r2822 into r2833;
    is.eq 19u8 r13.flop_ij[1u32][1u32] into r2834;
    add r13.flop_ij[1u32][1u32] 1u8 into r2835;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2836;
    is.eq r2835 26u8 into r2837;
    and r2836 r2837 into r2838;
    add r13.flop_ij[1u32][0u32] 1u8 into r2839;
    ternary r2838 0u8 r2835 into r2840;
    ternary r2838 r2839 r2833 into r2841;
    ternary r2834 r3[1u32][19u32] r2831 into r2842;
    ternary r2834 r2840 r2832 into r2843;
    ternary r2834 r2841 r2833 into r2844;
    is.eq 20u8 r13.flop_ij[1u32][1u32] into r2845;
    add r13.flop_ij[1u32][1u32] 1u8 into r2846;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2847;
    is.eq r2846 26u8 into r2848;
    and r2847 r2848 into r2849;
    add r13.flop_ij[1u32][0u32] 1u8 into r2850;
    ternary r2849 0u8 r2846 into r2851;
    ternary r2849 r2850 r2844 into r2852;
    ternary r2845 r3[1u32][20u32] r2842 into r2853;
    ternary r2845 r2851 r2843 into r2854;
    ternary r2845 r2852 r2844 into r2855;
    is.eq 21u8 r13.flop_ij[1u32][1u32] into r2856;
    add r13.flop_ij[1u32][1u32] 1u8 into r2857;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2858;
    is.eq r2857 26u8 into r2859;
    and r2858 r2859 into r2860;
    add r13.flop_ij[1u32][0u32] 1u8 into r2861;
    ternary r2860 0u8 r2857 into r2862;
    ternary r2860 r2861 r2855 into r2863;
    ternary r2856 r3[1u32][21u32] r2853 into r2864;
    ternary r2856 r2862 r2854 into r2865;
    ternary r2856 r2863 r2855 into r2866;
    is.eq 22u8 r13.flop_ij[1u32][1u32] into r2867;
    add r13.flop_ij[1u32][1u32] 1u8 into r2868;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2869;
    is.eq r2868 26u8 into r2870;
    and r2869 r2870 into r2871;
    add r13.flop_ij[1u32][0u32] 1u8 into r2872;
    ternary r2871 0u8 r2868 into r2873;
    ternary r2871 r2872 r2866 into r2874;
    ternary r2867 r3[1u32][22u32] r2864 into r2875;
    ternary r2867 r2873 r2865 into r2876;
    ternary r2867 r2874 r2866 into r2877;
    is.eq 23u8 r13.flop_ij[1u32][1u32] into r2878;
    add r13.flop_ij[1u32][1u32] 1u8 into r2879;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2880;
    is.eq r2879 26u8 into r2881;
    and r2880 r2881 into r2882;
    add r13.flop_ij[1u32][0u32] 1u8 into r2883;
    ternary r2882 0u8 r2879 into r2884;
    ternary r2882 r2883 r2877 into r2885;
    ternary r2878 r3[1u32][23u32] r2875 into r2886;
    ternary r2878 r2884 r2876 into r2887;
    ternary r2878 r2885 r2877 into r2888;
    is.eq 24u8 r13.flop_ij[1u32][1u32] into r2889;
    add r13.flop_ij[1u32][1u32] 1u8 into r2890;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2891;
    is.eq r2890 26u8 into r2892;
    and r2891 r2892 into r2893;
    add r13.flop_ij[1u32][0u32] 1u8 into r2894;
    ternary r2893 0u8 r2890 into r2895;
    ternary r2893 r2894 r2888 into r2896;
    ternary r2889 r3[1u32][24u32] r2886 into r2897;
    ternary r2889 r2895 r2887 into r2898;
    ternary r2889 r2896 r2888 into r2899;
    is.eq 25u8 r13.flop_ij[1u32][1u32] into r2900;
    add r13.flop_ij[1u32][1u32] 1u8 into r2901;
    is.eq r13.flop_ij[1u32][0u32] 0u8 into r2902;
    is.eq r2901 26u8 into r2903;
    and r2902 r2903 into r2904;
    add r13.flop_ij[1u32][0u32] 1u8 into r2905;
    ternary r2904 0u8 r2901 into r2906;
    ternary r2904 r2905 r2899 into r2907;
    ternary r2900 r3[1u32][25u32] r2897 into r2908;
    ternary r2900 r2906 r2898 into r2909;
    ternary r2900 r2907 r2899 into r2910;
    ternary r2624 r2908 r2621 into r2911;
    ternary r2624 r2909 r2622 into r2912;
    ternary r2624 r2910 r2623 into r2913;
    is.eq 0u8 r13.flop_ij[2u32][0u32] into r2914;
    is.eq 0u8 r13.flop_ij[2u32][1u32] into r2915;
    add r13.flop_ij[2u32][1u32] 1u8 into r2916;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2917;
    is.eq r2916 26u8 into r2918;
    and r2917 r2918 into r2919;
    add r13.flop_ij[2u32][0u32] 1u8 into r2920;
    ternary r2919 0u8 r2916 into r2921;
    ternary r2919 r2920 0u8 into r2922;
    ternary r2915 r3[0u32][0u32] 0field into r2923;
    ternary r2915 r2921 0u8 into r2924;
    ternary r2915 r2922 0u8 into r2925;
    is.eq 1u8 r13.flop_ij[2u32][1u32] into r2926;
    add r13.flop_ij[2u32][1u32] 1u8 into r2927;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2928;
    is.eq r2927 26u8 into r2929;
    and r2928 r2929 into r2930;
    add r13.flop_ij[2u32][0u32] 1u8 into r2931;
    ternary r2930 0u8 r2927 into r2932;
    ternary r2930 r2931 r2925 into r2933;
    ternary r2926 r3[0u32][1u32] r2923 into r2934;
    ternary r2926 r2932 r2924 into r2935;
    ternary r2926 r2933 r2925 into r2936;
    is.eq 2u8 r13.flop_ij[2u32][1u32] into r2937;
    add r13.flop_ij[2u32][1u32] 1u8 into r2938;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2939;
    is.eq r2938 26u8 into r2940;
    and r2939 r2940 into r2941;
    add r13.flop_ij[2u32][0u32] 1u8 into r2942;
    ternary r2941 0u8 r2938 into r2943;
    ternary r2941 r2942 r2936 into r2944;
    ternary r2937 r3[0u32][2u32] r2934 into r2945;
    ternary r2937 r2943 r2935 into r2946;
    ternary r2937 r2944 r2936 into r2947;
    is.eq 3u8 r13.flop_ij[2u32][1u32] into r2948;
    add r13.flop_ij[2u32][1u32] 1u8 into r2949;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2950;
    is.eq r2949 26u8 into r2951;
    and r2950 r2951 into r2952;
    add r13.flop_ij[2u32][0u32] 1u8 into r2953;
    ternary r2952 0u8 r2949 into r2954;
    ternary r2952 r2953 r2947 into r2955;
    ternary r2948 r3[0u32][3u32] r2945 into r2956;
    ternary r2948 r2954 r2946 into r2957;
    ternary r2948 r2955 r2947 into r2958;
    is.eq 4u8 r13.flop_ij[2u32][1u32] into r2959;
    add r13.flop_ij[2u32][1u32] 1u8 into r2960;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2961;
    is.eq r2960 26u8 into r2962;
    and r2961 r2962 into r2963;
    add r13.flop_ij[2u32][0u32] 1u8 into r2964;
    ternary r2963 0u8 r2960 into r2965;
    ternary r2963 r2964 r2958 into r2966;
    ternary r2959 r3[0u32][4u32] r2956 into r2967;
    ternary r2959 r2965 r2957 into r2968;
    ternary r2959 r2966 r2958 into r2969;
    is.eq 5u8 r13.flop_ij[2u32][1u32] into r2970;
    add r13.flop_ij[2u32][1u32] 1u8 into r2971;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2972;
    is.eq r2971 26u8 into r2973;
    and r2972 r2973 into r2974;
    add r13.flop_ij[2u32][0u32] 1u8 into r2975;
    ternary r2974 0u8 r2971 into r2976;
    ternary r2974 r2975 r2969 into r2977;
    ternary r2970 r3[0u32][5u32] r2967 into r2978;
    ternary r2970 r2976 r2968 into r2979;
    ternary r2970 r2977 r2969 into r2980;
    is.eq 6u8 r13.flop_ij[2u32][1u32] into r2981;
    add r13.flop_ij[2u32][1u32] 1u8 into r2982;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2983;
    is.eq r2982 26u8 into r2984;
    and r2983 r2984 into r2985;
    add r13.flop_ij[2u32][0u32] 1u8 into r2986;
    ternary r2985 0u8 r2982 into r2987;
    ternary r2985 r2986 r2980 into r2988;
    ternary r2981 r3[0u32][6u32] r2978 into r2989;
    ternary r2981 r2987 r2979 into r2990;
    ternary r2981 r2988 r2980 into r2991;
    is.eq 7u8 r13.flop_ij[2u32][1u32] into r2992;
    add r13.flop_ij[2u32][1u32] 1u8 into r2993;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r2994;
    is.eq r2993 26u8 into r2995;
    and r2994 r2995 into r2996;
    add r13.flop_ij[2u32][0u32] 1u8 into r2997;
    ternary r2996 0u8 r2993 into r2998;
    ternary r2996 r2997 r2991 into r2999;
    ternary r2992 r3[0u32][7u32] r2989 into r3000;
    ternary r2992 r2998 r2990 into r3001;
    ternary r2992 r2999 r2991 into r3002;
    is.eq 8u8 r13.flop_ij[2u32][1u32] into r3003;
    add r13.flop_ij[2u32][1u32] 1u8 into r3004;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3005;
    is.eq r3004 26u8 into r3006;
    and r3005 r3006 into r3007;
    add r13.flop_ij[2u32][0u32] 1u8 into r3008;
    ternary r3007 0u8 r3004 into r3009;
    ternary r3007 r3008 r3002 into r3010;
    ternary r3003 r3[0u32][8u32] r3000 into r3011;
    ternary r3003 r3009 r3001 into r3012;
    ternary r3003 r3010 r3002 into r3013;
    is.eq 9u8 r13.flop_ij[2u32][1u32] into r3014;
    add r13.flop_ij[2u32][1u32] 1u8 into r3015;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3016;
    is.eq r3015 26u8 into r3017;
    and r3016 r3017 into r3018;
    add r13.flop_ij[2u32][0u32] 1u8 into r3019;
    ternary r3018 0u8 r3015 into r3020;
    ternary r3018 r3019 r3013 into r3021;
    ternary r3014 r3[0u32][9u32] r3011 into r3022;
    ternary r3014 r3020 r3012 into r3023;
    ternary r3014 r3021 r3013 into r3024;
    is.eq 10u8 r13.flop_ij[2u32][1u32] into r3025;
    add r13.flop_ij[2u32][1u32] 1u8 into r3026;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3027;
    is.eq r3026 26u8 into r3028;
    and r3027 r3028 into r3029;
    add r13.flop_ij[2u32][0u32] 1u8 into r3030;
    ternary r3029 0u8 r3026 into r3031;
    ternary r3029 r3030 r3024 into r3032;
    ternary r3025 r3[0u32][10u32] r3022 into r3033;
    ternary r3025 r3031 r3023 into r3034;
    ternary r3025 r3032 r3024 into r3035;
    is.eq 11u8 r13.flop_ij[2u32][1u32] into r3036;
    add r13.flop_ij[2u32][1u32] 1u8 into r3037;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3038;
    is.eq r3037 26u8 into r3039;
    and r3038 r3039 into r3040;
    add r13.flop_ij[2u32][0u32] 1u8 into r3041;
    ternary r3040 0u8 r3037 into r3042;
    ternary r3040 r3041 r3035 into r3043;
    ternary r3036 r3[0u32][11u32] r3033 into r3044;
    ternary r3036 r3042 r3034 into r3045;
    ternary r3036 r3043 r3035 into r3046;
    is.eq 12u8 r13.flop_ij[2u32][1u32] into r3047;
    add r13.flop_ij[2u32][1u32] 1u8 into r3048;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3049;
    is.eq r3048 26u8 into r3050;
    and r3049 r3050 into r3051;
    add r13.flop_ij[2u32][0u32] 1u8 into r3052;
    ternary r3051 0u8 r3048 into r3053;
    ternary r3051 r3052 r3046 into r3054;
    ternary r3047 r3[0u32][12u32] r3044 into r3055;
    ternary r3047 r3053 r3045 into r3056;
    ternary r3047 r3054 r3046 into r3057;
    is.eq 13u8 r13.flop_ij[2u32][1u32] into r3058;
    add r13.flop_ij[2u32][1u32] 1u8 into r3059;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3060;
    is.eq r3059 26u8 into r3061;
    and r3060 r3061 into r3062;
    add r13.flop_ij[2u32][0u32] 1u8 into r3063;
    ternary r3062 0u8 r3059 into r3064;
    ternary r3062 r3063 r3057 into r3065;
    ternary r3058 r3[0u32][13u32] r3055 into r3066;
    ternary r3058 r3064 r3056 into r3067;
    ternary r3058 r3065 r3057 into r3068;
    is.eq 14u8 r13.flop_ij[2u32][1u32] into r3069;
    add r13.flop_ij[2u32][1u32] 1u8 into r3070;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3071;
    is.eq r3070 26u8 into r3072;
    and r3071 r3072 into r3073;
    add r13.flop_ij[2u32][0u32] 1u8 into r3074;
    ternary r3073 0u8 r3070 into r3075;
    ternary r3073 r3074 r3068 into r3076;
    ternary r3069 r3[0u32][14u32] r3066 into r3077;
    ternary r3069 r3075 r3067 into r3078;
    ternary r3069 r3076 r3068 into r3079;
    is.eq 15u8 r13.flop_ij[2u32][1u32] into r3080;
    add r13.flop_ij[2u32][1u32] 1u8 into r3081;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3082;
    is.eq r3081 26u8 into r3083;
    and r3082 r3083 into r3084;
    add r13.flop_ij[2u32][0u32] 1u8 into r3085;
    ternary r3084 0u8 r3081 into r3086;
    ternary r3084 r3085 r3079 into r3087;
    ternary r3080 r3[0u32][15u32] r3077 into r3088;
    ternary r3080 r3086 r3078 into r3089;
    ternary r3080 r3087 r3079 into r3090;
    is.eq 16u8 r13.flop_ij[2u32][1u32] into r3091;
    add r13.flop_ij[2u32][1u32] 1u8 into r3092;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3093;
    is.eq r3092 26u8 into r3094;
    and r3093 r3094 into r3095;
    add r13.flop_ij[2u32][0u32] 1u8 into r3096;
    ternary r3095 0u8 r3092 into r3097;
    ternary r3095 r3096 r3090 into r3098;
    ternary r3091 r3[0u32][16u32] r3088 into r3099;
    ternary r3091 r3097 r3089 into r3100;
    ternary r3091 r3098 r3090 into r3101;
    is.eq 17u8 r13.flop_ij[2u32][1u32] into r3102;
    add r13.flop_ij[2u32][1u32] 1u8 into r3103;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3104;
    is.eq r3103 26u8 into r3105;
    and r3104 r3105 into r3106;
    add r13.flop_ij[2u32][0u32] 1u8 into r3107;
    ternary r3106 0u8 r3103 into r3108;
    ternary r3106 r3107 r3101 into r3109;
    ternary r3102 r3[0u32][17u32] r3099 into r3110;
    ternary r3102 r3108 r3100 into r3111;
    ternary r3102 r3109 r3101 into r3112;
    is.eq 18u8 r13.flop_ij[2u32][1u32] into r3113;
    add r13.flop_ij[2u32][1u32] 1u8 into r3114;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3115;
    is.eq r3114 26u8 into r3116;
    and r3115 r3116 into r3117;
    add r13.flop_ij[2u32][0u32] 1u8 into r3118;
    ternary r3117 0u8 r3114 into r3119;
    ternary r3117 r3118 r3112 into r3120;
    ternary r3113 r3[0u32][18u32] r3110 into r3121;
    ternary r3113 r3119 r3111 into r3122;
    ternary r3113 r3120 r3112 into r3123;
    is.eq 19u8 r13.flop_ij[2u32][1u32] into r3124;
    add r13.flop_ij[2u32][1u32] 1u8 into r3125;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3126;
    is.eq r3125 26u8 into r3127;
    and r3126 r3127 into r3128;
    add r13.flop_ij[2u32][0u32] 1u8 into r3129;
    ternary r3128 0u8 r3125 into r3130;
    ternary r3128 r3129 r3123 into r3131;
    ternary r3124 r3[0u32][19u32] r3121 into r3132;
    ternary r3124 r3130 r3122 into r3133;
    ternary r3124 r3131 r3123 into r3134;
    is.eq 20u8 r13.flop_ij[2u32][1u32] into r3135;
    add r13.flop_ij[2u32][1u32] 1u8 into r3136;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3137;
    is.eq r3136 26u8 into r3138;
    and r3137 r3138 into r3139;
    add r13.flop_ij[2u32][0u32] 1u8 into r3140;
    ternary r3139 0u8 r3136 into r3141;
    ternary r3139 r3140 r3134 into r3142;
    ternary r3135 r3[0u32][20u32] r3132 into r3143;
    ternary r3135 r3141 r3133 into r3144;
    ternary r3135 r3142 r3134 into r3145;
    is.eq 21u8 r13.flop_ij[2u32][1u32] into r3146;
    add r13.flop_ij[2u32][1u32] 1u8 into r3147;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3148;
    is.eq r3147 26u8 into r3149;
    and r3148 r3149 into r3150;
    add r13.flop_ij[2u32][0u32] 1u8 into r3151;
    ternary r3150 0u8 r3147 into r3152;
    ternary r3150 r3151 r3145 into r3153;
    ternary r3146 r3[0u32][21u32] r3143 into r3154;
    ternary r3146 r3152 r3144 into r3155;
    ternary r3146 r3153 r3145 into r3156;
    is.eq 22u8 r13.flop_ij[2u32][1u32] into r3157;
    add r13.flop_ij[2u32][1u32] 1u8 into r3158;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3159;
    is.eq r3158 26u8 into r3160;
    and r3159 r3160 into r3161;
    add r13.flop_ij[2u32][0u32] 1u8 into r3162;
    ternary r3161 0u8 r3158 into r3163;
    ternary r3161 r3162 r3156 into r3164;
    ternary r3157 r3[0u32][22u32] r3154 into r3165;
    ternary r3157 r3163 r3155 into r3166;
    ternary r3157 r3164 r3156 into r3167;
    is.eq 23u8 r13.flop_ij[2u32][1u32] into r3168;
    add r13.flop_ij[2u32][1u32] 1u8 into r3169;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3170;
    is.eq r3169 26u8 into r3171;
    and r3170 r3171 into r3172;
    add r13.flop_ij[2u32][0u32] 1u8 into r3173;
    ternary r3172 0u8 r3169 into r3174;
    ternary r3172 r3173 r3167 into r3175;
    ternary r3168 r3[0u32][23u32] r3165 into r3176;
    ternary r3168 r3174 r3166 into r3177;
    ternary r3168 r3175 r3167 into r3178;
    is.eq 24u8 r13.flop_ij[2u32][1u32] into r3179;
    add r13.flop_ij[2u32][1u32] 1u8 into r3180;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3181;
    is.eq r3180 26u8 into r3182;
    and r3181 r3182 into r3183;
    add r13.flop_ij[2u32][0u32] 1u8 into r3184;
    ternary r3183 0u8 r3180 into r3185;
    ternary r3183 r3184 r3178 into r3186;
    ternary r3179 r3[0u32][24u32] r3176 into r3187;
    ternary r3179 r3185 r3177 into r3188;
    ternary r3179 r3186 r3178 into r3189;
    is.eq 25u8 r13.flop_ij[2u32][1u32] into r3190;
    add r13.flop_ij[2u32][1u32] 1u8 into r3191;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3192;
    is.eq r3191 26u8 into r3193;
    and r3192 r3193 into r3194;
    add r13.flop_ij[2u32][0u32] 1u8 into r3195;
    ternary r3194 0u8 r3191 into r3196;
    ternary r3194 r3195 r3189 into r3197;
    ternary r3190 r3[0u32][25u32] r3187 into r3198;
    ternary r3190 r3196 r3188 into r3199;
    ternary r3190 r3197 r3189 into r3200;
    ternary r2914 r3198 0field into r3201;
    ternary r2914 r3199 0u8 into r3202;
    ternary r2914 r3200 0u8 into r3203;
    is.eq 1u8 r13.flop_ij[2u32][0u32] into r3204;
    is.eq 0u8 r13.flop_ij[2u32][1u32] into r3205;
    add r13.flop_ij[2u32][1u32] 1u8 into r3206;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3207;
    is.eq r3206 26u8 into r3208;
    and r3207 r3208 into r3209;
    add r13.flop_ij[2u32][0u32] 1u8 into r3210;
    ternary r3209 0u8 r3206 into r3211;
    ternary r3209 r3210 r3203 into r3212;
    ternary r3205 r3[1u32][0u32] r3201 into r3213;
    ternary r3205 r3211 r3202 into r3214;
    ternary r3205 r3212 r3203 into r3215;
    is.eq 1u8 r13.flop_ij[2u32][1u32] into r3216;
    add r13.flop_ij[2u32][1u32] 1u8 into r3217;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3218;
    is.eq r3217 26u8 into r3219;
    and r3218 r3219 into r3220;
    add r13.flop_ij[2u32][0u32] 1u8 into r3221;
    ternary r3220 0u8 r3217 into r3222;
    ternary r3220 r3221 r3215 into r3223;
    ternary r3216 r3[1u32][1u32] r3213 into r3224;
    ternary r3216 r3222 r3214 into r3225;
    ternary r3216 r3223 r3215 into r3226;
    is.eq 2u8 r13.flop_ij[2u32][1u32] into r3227;
    add r13.flop_ij[2u32][1u32] 1u8 into r3228;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3229;
    is.eq r3228 26u8 into r3230;
    and r3229 r3230 into r3231;
    add r13.flop_ij[2u32][0u32] 1u8 into r3232;
    ternary r3231 0u8 r3228 into r3233;
    ternary r3231 r3232 r3226 into r3234;
    ternary r3227 r3[1u32][2u32] r3224 into r3235;
    ternary r3227 r3233 r3225 into r3236;
    ternary r3227 r3234 r3226 into r3237;
    is.eq 3u8 r13.flop_ij[2u32][1u32] into r3238;
    add r13.flop_ij[2u32][1u32] 1u8 into r3239;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3240;
    is.eq r3239 26u8 into r3241;
    and r3240 r3241 into r3242;
    add r13.flop_ij[2u32][0u32] 1u8 into r3243;
    ternary r3242 0u8 r3239 into r3244;
    ternary r3242 r3243 r3237 into r3245;
    ternary r3238 r3[1u32][3u32] r3235 into r3246;
    ternary r3238 r3244 r3236 into r3247;
    ternary r3238 r3245 r3237 into r3248;
    is.eq 4u8 r13.flop_ij[2u32][1u32] into r3249;
    add r13.flop_ij[2u32][1u32] 1u8 into r3250;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3251;
    is.eq r3250 26u8 into r3252;
    and r3251 r3252 into r3253;
    add r13.flop_ij[2u32][0u32] 1u8 into r3254;
    ternary r3253 0u8 r3250 into r3255;
    ternary r3253 r3254 r3248 into r3256;
    ternary r3249 r3[1u32][4u32] r3246 into r3257;
    ternary r3249 r3255 r3247 into r3258;
    ternary r3249 r3256 r3248 into r3259;
    is.eq 5u8 r13.flop_ij[2u32][1u32] into r3260;
    add r13.flop_ij[2u32][1u32] 1u8 into r3261;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3262;
    is.eq r3261 26u8 into r3263;
    and r3262 r3263 into r3264;
    add r13.flop_ij[2u32][0u32] 1u8 into r3265;
    ternary r3264 0u8 r3261 into r3266;
    ternary r3264 r3265 r3259 into r3267;
    ternary r3260 r3[1u32][5u32] r3257 into r3268;
    ternary r3260 r3266 r3258 into r3269;
    ternary r3260 r3267 r3259 into r3270;
    is.eq 6u8 r13.flop_ij[2u32][1u32] into r3271;
    add r13.flop_ij[2u32][1u32] 1u8 into r3272;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3273;
    is.eq r3272 26u8 into r3274;
    and r3273 r3274 into r3275;
    add r13.flop_ij[2u32][0u32] 1u8 into r3276;
    ternary r3275 0u8 r3272 into r3277;
    ternary r3275 r3276 r3270 into r3278;
    ternary r3271 r3[1u32][6u32] r3268 into r3279;
    ternary r3271 r3277 r3269 into r3280;
    ternary r3271 r3278 r3270 into r3281;
    is.eq 7u8 r13.flop_ij[2u32][1u32] into r3282;
    add r13.flop_ij[2u32][1u32] 1u8 into r3283;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3284;
    is.eq r3283 26u8 into r3285;
    and r3284 r3285 into r3286;
    add r13.flop_ij[2u32][0u32] 1u8 into r3287;
    ternary r3286 0u8 r3283 into r3288;
    ternary r3286 r3287 r3281 into r3289;
    ternary r3282 r3[1u32][7u32] r3279 into r3290;
    ternary r3282 r3288 r3280 into r3291;
    ternary r3282 r3289 r3281 into r3292;
    is.eq 8u8 r13.flop_ij[2u32][1u32] into r3293;
    add r13.flop_ij[2u32][1u32] 1u8 into r3294;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3295;
    is.eq r3294 26u8 into r3296;
    and r3295 r3296 into r3297;
    add r13.flop_ij[2u32][0u32] 1u8 into r3298;
    ternary r3297 0u8 r3294 into r3299;
    ternary r3297 r3298 r3292 into r3300;
    ternary r3293 r3[1u32][8u32] r3290 into r3301;
    ternary r3293 r3299 r3291 into r3302;
    ternary r3293 r3300 r3292 into r3303;
    is.eq 9u8 r13.flop_ij[2u32][1u32] into r3304;
    add r13.flop_ij[2u32][1u32] 1u8 into r3305;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3306;
    is.eq r3305 26u8 into r3307;
    and r3306 r3307 into r3308;
    add r13.flop_ij[2u32][0u32] 1u8 into r3309;
    ternary r3308 0u8 r3305 into r3310;
    ternary r3308 r3309 r3303 into r3311;
    ternary r3304 r3[1u32][9u32] r3301 into r3312;
    ternary r3304 r3310 r3302 into r3313;
    ternary r3304 r3311 r3303 into r3314;
    is.eq 10u8 r13.flop_ij[2u32][1u32] into r3315;
    add r13.flop_ij[2u32][1u32] 1u8 into r3316;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3317;
    is.eq r3316 26u8 into r3318;
    and r3317 r3318 into r3319;
    add r13.flop_ij[2u32][0u32] 1u8 into r3320;
    ternary r3319 0u8 r3316 into r3321;
    ternary r3319 r3320 r3314 into r3322;
    ternary r3315 r3[1u32][10u32] r3312 into r3323;
    ternary r3315 r3321 r3313 into r3324;
    ternary r3315 r3322 r3314 into r3325;
    is.eq 11u8 r13.flop_ij[2u32][1u32] into r3326;
    add r13.flop_ij[2u32][1u32] 1u8 into r3327;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3328;
    is.eq r3327 26u8 into r3329;
    and r3328 r3329 into r3330;
    add r13.flop_ij[2u32][0u32] 1u8 into r3331;
    ternary r3330 0u8 r3327 into r3332;
    ternary r3330 r3331 r3325 into r3333;
    ternary r3326 r3[1u32][11u32] r3323 into r3334;
    ternary r3326 r3332 r3324 into r3335;
    ternary r3326 r3333 r3325 into r3336;
    is.eq 12u8 r13.flop_ij[2u32][1u32] into r3337;
    add r13.flop_ij[2u32][1u32] 1u8 into r3338;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3339;
    is.eq r3338 26u8 into r3340;
    and r3339 r3340 into r3341;
    add r13.flop_ij[2u32][0u32] 1u8 into r3342;
    ternary r3341 0u8 r3338 into r3343;
    ternary r3341 r3342 r3336 into r3344;
    ternary r3337 r3[1u32][12u32] r3334 into r3345;
    ternary r3337 r3343 r3335 into r3346;
    ternary r3337 r3344 r3336 into r3347;
    is.eq 13u8 r13.flop_ij[2u32][1u32] into r3348;
    add r13.flop_ij[2u32][1u32] 1u8 into r3349;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3350;
    is.eq r3349 26u8 into r3351;
    and r3350 r3351 into r3352;
    add r13.flop_ij[2u32][0u32] 1u8 into r3353;
    ternary r3352 0u8 r3349 into r3354;
    ternary r3352 r3353 r3347 into r3355;
    ternary r3348 r3[1u32][13u32] r3345 into r3356;
    ternary r3348 r3354 r3346 into r3357;
    ternary r3348 r3355 r3347 into r3358;
    is.eq 14u8 r13.flop_ij[2u32][1u32] into r3359;
    add r13.flop_ij[2u32][1u32] 1u8 into r3360;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3361;
    is.eq r3360 26u8 into r3362;
    and r3361 r3362 into r3363;
    add r13.flop_ij[2u32][0u32] 1u8 into r3364;
    ternary r3363 0u8 r3360 into r3365;
    ternary r3363 r3364 r3358 into r3366;
    ternary r3359 r3[1u32][14u32] r3356 into r3367;
    ternary r3359 r3365 r3357 into r3368;
    ternary r3359 r3366 r3358 into r3369;
    is.eq 15u8 r13.flop_ij[2u32][1u32] into r3370;
    add r13.flop_ij[2u32][1u32] 1u8 into r3371;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3372;
    is.eq r3371 26u8 into r3373;
    and r3372 r3373 into r3374;
    add r13.flop_ij[2u32][0u32] 1u8 into r3375;
    ternary r3374 0u8 r3371 into r3376;
    ternary r3374 r3375 r3369 into r3377;
    ternary r3370 r3[1u32][15u32] r3367 into r3378;
    ternary r3370 r3376 r3368 into r3379;
    ternary r3370 r3377 r3369 into r3380;
    is.eq 16u8 r13.flop_ij[2u32][1u32] into r3381;
    add r13.flop_ij[2u32][1u32] 1u8 into r3382;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3383;
    is.eq r3382 26u8 into r3384;
    and r3383 r3384 into r3385;
    add r13.flop_ij[2u32][0u32] 1u8 into r3386;
    ternary r3385 0u8 r3382 into r3387;
    ternary r3385 r3386 r3380 into r3388;
    ternary r3381 r3[1u32][16u32] r3378 into r3389;
    ternary r3381 r3387 r3379 into r3390;
    ternary r3381 r3388 r3380 into r3391;
    is.eq 17u8 r13.flop_ij[2u32][1u32] into r3392;
    add r13.flop_ij[2u32][1u32] 1u8 into r3393;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3394;
    is.eq r3393 26u8 into r3395;
    and r3394 r3395 into r3396;
    add r13.flop_ij[2u32][0u32] 1u8 into r3397;
    ternary r3396 0u8 r3393 into r3398;
    ternary r3396 r3397 r3391 into r3399;
    ternary r3392 r3[1u32][17u32] r3389 into r3400;
    ternary r3392 r3398 r3390 into r3401;
    ternary r3392 r3399 r3391 into r3402;
    is.eq 18u8 r13.flop_ij[2u32][1u32] into r3403;
    add r13.flop_ij[2u32][1u32] 1u8 into r3404;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3405;
    is.eq r3404 26u8 into r3406;
    and r3405 r3406 into r3407;
    add r13.flop_ij[2u32][0u32] 1u8 into r3408;
    ternary r3407 0u8 r3404 into r3409;
    ternary r3407 r3408 r3402 into r3410;
    ternary r3403 r3[1u32][18u32] r3400 into r3411;
    ternary r3403 r3409 r3401 into r3412;
    ternary r3403 r3410 r3402 into r3413;
    is.eq 19u8 r13.flop_ij[2u32][1u32] into r3414;
    add r13.flop_ij[2u32][1u32] 1u8 into r3415;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3416;
    is.eq r3415 26u8 into r3417;
    and r3416 r3417 into r3418;
    add r13.flop_ij[2u32][0u32] 1u8 into r3419;
    ternary r3418 0u8 r3415 into r3420;
    ternary r3418 r3419 r3413 into r3421;
    ternary r3414 r3[1u32][19u32] r3411 into r3422;
    ternary r3414 r3420 r3412 into r3423;
    ternary r3414 r3421 r3413 into r3424;
    is.eq 20u8 r13.flop_ij[2u32][1u32] into r3425;
    add r13.flop_ij[2u32][1u32] 1u8 into r3426;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3427;
    is.eq r3426 26u8 into r3428;
    and r3427 r3428 into r3429;
    add r13.flop_ij[2u32][0u32] 1u8 into r3430;
    ternary r3429 0u8 r3426 into r3431;
    ternary r3429 r3430 r3424 into r3432;
    ternary r3425 r3[1u32][20u32] r3422 into r3433;
    ternary r3425 r3431 r3423 into r3434;
    ternary r3425 r3432 r3424 into r3435;
    is.eq 21u8 r13.flop_ij[2u32][1u32] into r3436;
    add r13.flop_ij[2u32][1u32] 1u8 into r3437;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3438;
    is.eq r3437 26u8 into r3439;
    and r3438 r3439 into r3440;
    add r13.flop_ij[2u32][0u32] 1u8 into r3441;
    ternary r3440 0u8 r3437 into r3442;
    ternary r3440 r3441 r3435 into r3443;
    ternary r3436 r3[1u32][21u32] r3433 into r3444;
    ternary r3436 r3442 r3434 into r3445;
    ternary r3436 r3443 r3435 into r3446;
    is.eq 22u8 r13.flop_ij[2u32][1u32] into r3447;
    add r13.flop_ij[2u32][1u32] 1u8 into r3448;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3449;
    is.eq r3448 26u8 into r3450;
    and r3449 r3450 into r3451;
    add r13.flop_ij[2u32][0u32] 1u8 into r3452;
    ternary r3451 0u8 r3448 into r3453;
    ternary r3451 r3452 r3446 into r3454;
    ternary r3447 r3[1u32][22u32] r3444 into r3455;
    ternary r3447 r3453 r3445 into r3456;
    ternary r3447 r3454 r3446 into r3457;
    is.eq 23u8 r13.flop_ij[2u32][1u32] into r3458;
    add r13.flop_ij[2u32][1u32] 1u8 into r3459;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3460;
    is.eq r3459 26u8 into r3461;
    and r3460 r3461 into r3462;
    add r13.flop_ij[2u32][0u32] 1u8 into r3463;
    ternary r3462 0u8 r3459 into r3464;
    ternary r3462 r3463 r3457 into r3465;
    ternary r3458 r3[1u32][23u32] r3455 into r3466;
    ternary r3458 r3464 r3456 into r3467;
    ternary r3458 r3465 r3457 into r3468;
    is.eq 24u8 r13.flop_ij[2u32][1u32] into r3469;
    add r13.flop_ij[2u32][1u32] 1u8 into r3470;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3471;
    is.eq r3470 26u8 into r3472;
    and r3471 r3472 into r3473;
    add r13.flop_ij[2u32][0u32] 1u8 into r3474;
    ternary r3473 0u8 r3470 into r3475;
    ternary r3473 r3474 r3468 into r3476;
    ternary r3469 r3[1u32][24u32] r3466 into r3477;
    ternary r3469 r3475 r3467 into r3478;
    ternary r3469 r3476 r3468 into r3479;
    is.eq 25u8 r13.flop_ij[2u32][1u32] into r3480;
    add r13.flop_ij[2u32][1u32] 1u8 into r3481;
    is.eq r13.flop_ij[2u32][0u32] 0u8 into r3482;
    is.eq r3481 26u8 into r3483;
    and r3482 r3483 into r3484;
    add r13.flop_ij[2u32][0u32] 1u8 into r3485;
    ternary r3484 0u8 r3481 into r3486;
    ternary r3484 r3485 r3479 into r3487;
    ternary r3480 r3[1u32][25u32] r3477 into r3488;
    ternary r3480 r3486 r3478 into r3489;
    ternary r3480 r3487 r3479 into r3490;
    ternary r3204 r3488 r3201 into r3491;
    ternary r3204 r3489 r3202 into r3492;
    ternary r3204 r3490 r3203 into r3493;
    assert.eq r591 r7;
    assert.eq r1171 r8;
    assert.eq r1751 r9;
    assert.eq r2331 r10;
    assert.eq r2911 r11;
    assert.eq r3491 r12;
    is.eq r2 0u8 into r3494;
    cast  r10 r11 r12 into r3495 as [field; 3u32];
    cast  r3495 r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3496 as [[field; 3u32]; 9u32];
    is.eq r2 1u8 into r3497;
    cast  r10 r11 r12 into r3498 as [field; 3u32];
    cast  r13.flop_d[0u32] r3498 r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3499 as [[field; 3u32]; 9u32];
    is.eq r2 2u8 into r3500;
    cast  r10 r11 r12 into r3501 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r3501 r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3502 as [[field; 3u32]; 9u32];
    is.eq r2 3u8 into r3503;
    cast  r10 r11 r12 into r3504 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r3504 r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3505 as [[field; 3u32]; 9u32];
    is.eq r2 4u8 into r3506;
    cast  r10 r11 r12 into r3507 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r3507 r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3508 as [[field; 3u32]; 9u32];
    is.eq r2 5u8 into r3509;
    cast  r10 r11 r12 into r3510 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r3510 r13.flop_d[6u32] r13.flop_d[7u32] r13.flop_d[8u32] into r3511 as [[field; 3u32]; 9u32];
    is.eq r2 6u8 into r3512;
    cast  r10 r11 r12 into r3513 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r3513 r13.flop_d[7u32] r13.flop_d[8u32] into r3514 as [[field; 3u32]; 9u32];
    is.eq r2 7u8 into r3515;
    cast  r10 r11 r12 into r3516 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r3516 r13.flop_d[8u32] into r3517 as [[field; 3u32]; 9u32];
    is.eq r2 8u8 into r3518;
    cast  r10 r11 r12 into r3519 as [field; 3u32];
    cast  r13.flop_d[0u32] r13.flop_d[1u32] r13.flop_d[2u32] r13.flop_d[3u32] r13.flop_d[4u32] r13.flop_d[5u32] r13.flop_d[6u32] r13.flop_d[7u32] r3519 into r3520 as [[field; 3u32]; 9u32];
    ternary r3518 r3520[0u32][0u32] r13.flop_d[0u32][0u32] into r3521;
    ternary r3518 r3520[0u32][1u32] r13.flop_d[0u32][1u32] into r3522;
    ternary r3518 r3520[0u32][2u32] r13.flop_d[0u32][2u32] into r3523;
    cast  r3521 r3522 r3523 into r3524 as [field; 3u32];
    ternary r3518 r3520[1u32][0u32] r13.flop_d[1u32][0u32] into r3525;
    ternary r3518 r3520[1u32][1u32] r13.flop_d[1u32][1u32] into r3526;
    ternary r3518 r3520[1u32][2u32] r13.flop_d[1u32][2u32] into r3527;
    cast  r3525 r3526 r3527 into r3528 as [field; 3u32];
    ternary r3518 r3520[2u32][0u32] r13.flop_d[2u32][0u32] into r3529;
    ternary r3518 r3520[2u32][1u32] r13.flop_d[2u32][1u32] into r3530;
    ternary r3518 r3520[2u32][2u32] r13.flop_d[2u32][2u32] into r3531;
    cast  r3529 r3530 r3531 into r3532 as [field; 3u32];
    ternary r3518 r3520[3u32][0u32] r13.flop_d[3u32][0u32] into r3533;
    ternary r3518 r3520[3u32][1u32] r13.flop_d[3u32][1u32] into r3534;
    ternary r3518 r3520[3u32][2u32] r13.flop_d[3u32][2u32] into r3535;
    cast  r3533 r3534 r3535 into r3536 as [field; 3u32];
    ternary r3518 r3520[4u32][0u32] r13.flop_d[4u32][0u32] into r3537;
    ternary r3518 r3520[4u32][1u32] r13.flop_d[4u32][1u32] into r3538;
    ternary r3518 r3520[4u32][2u32] r13.flop_d[4u32][2u32] into r3539;
    cast  r3537 r3538 r3539 into r3540 as [field; 3u32];
    ternary r3518 r3520[5u32][0u32] r13.flop_d[5u32][0u32] into r3541;
    ternary r3518 r3520[5u32][1u32] r13.flop_d[5u32][1u32] into r3542;
    ternary r3518 r3520[5u32][2u32] r13.flop_d[5u32][2u32] into r3543;
    cast  r3541 r3542 r3543 into r3544 as [field; 3u32];
    ternary r3518 r3520[6u32][0u32] r13.flop_d[6u32][0u32] into r3545;
    ternary r3518 r3520[6u32][1u32] r13.flop_d[6u32][1u32] into r3546;
    ternary r3518 r3520[6u32][2u32] r13.flop_d[6u32][2u32] into r3547;
    cast  r3545 r3546 r3547 into r3548 as [field; 3u32];
    ternary r3518 r3520[7u32][0u32] r13.flop_d[7u32][0u32] into r3549;
    ternary r3518 r3520[7u32][1u32] r13.flop_d[7u32][1u32] into r3550;
    ternary r3518 r3520[7u32][2u32] r13.flop_d[7u32][2u32] into r3551;
    cast  r3549 r3550 r3551 into r3552 as [field; 3u32];
    ternary r3518 r3520[8u32][0u32] r13.flop_d[8u32][0u32] into r3553;
    ternary r3518 r3520[8u32][1u32] r13.flop_d[8u32][1u32] into r3554;
    ternary r3518 r3520[8u32][2u32] r13.flop_d[8u32][2u32] into r3555;
    cast  r3553 r3554 r3555 into r3556 as [field; 3u32];
    cast  r3524 r3528 r3532 r3536 r3540 r3544 r3548 r3552 r3556 into r3557 as [[field; 3u32]; 9u32];
    ternary r3515 r3517[0u32][0u32] r3557[0u32][0u32] into r3558;
    ternary r3515 r3517[0u32][1u32] r3557[0u32][1u32] into r3559;
    ternary r3515 r3517[0u32][2u32] r3557[0u32][2u32] into r3560;
    cast  r3558 r3559 r3560 into r3561 as [field; 3u32];
    ternary r3515 r3517[1u32][0u32] r3557[1u32][0u32] into r3562;
    ternary r3515 r3517[1u32][1u32] r3557[1u32][1u32] into r3563;
    ternary r3515 r3517[1u32][2u32] r3557[1u32][2u32] into r3564;
    cast  r3562 r3563 r3564 into r3565 as [field; 3u32];
    ternary r3515 r3517[2u32][0u32] r3557[2u32][0u32] into r3566;
    ternary r3515 r3517[2u32][1u32] r3557[2u32][1u32] into r3567;
    ternary r3515 r3517[2u32][2u32] r3557[2u32][2u32] into r3568;
    cast  r3566 r3567 r3568 into r3569 as [field; 3u32];
    ternary r3515 r3517[3u32][0u32] r3557[3u32][0u32] into r3570;
    ternary r3515 r3517[3u32][1u32] r3557[3u32][1u32] into r3571;
    ternary r3515 r3517[3u32][2u32] r3557[3u32][2u32] into r3572;
    cast  r3570 r3571 r3572 into r3573 as [field; 3u32];
    ternary r3515 r3517[4u32][0u32] r3557[4u32][0u32] into r3574;
    ternary r3515 r3517[4u32][1u32] r3557[4u32][1u32] into r3575;
    ternary r3515 r3517[4u32][2u32] r3557[4u32][2u32] into r3576;
    cast  r3574 r3575 r3576 into r3577 as [field; 3u32];
    ternary r3515 r3517[5u32][0u32] r3557[5u32][0u32] into r3578;
    ternary r3515 r3517[5u32][1u32] r3557[5u32][1u32] into r3579;
    ternary r3515 r3517[5u32][2u32] r3557[5u32][2u32] into r3580;
    cast  r3578 r3579 r3580 into r3581 as [field; 3u32];
    ternary r3515 r3517[6u32][0u32] r3557[6u32][0u32] into r3582;
    ternary r3515 r3517[6u32][1u32] r3557[6u32][1u32] into r3583;
    ternary r3515 r3517[6u32][2u32] r3557[6u32][2u32] into r3584;
    cast  r3582 r3583 r3584 into r3585 as [field; 3u32];
    ternary r3515 r3517[7u32][0u32] r3557[7u32][0u32] into r3586;
    ternary r3515 r3517[7u32][1u32] r3557[7u32][1u32] into r3587;
    ternary r3515 r3517[7u32][2u32] r3557[7u32][2u32] into r3588;
    cast  r3586 r3587 r3588 into r3589 as [field; 3u32];
    ternary r3515 r3517[8u32][0u32] r3557[8u32][0u32] into r3590;
    ternary r3515 r3517[8u32][1u32] r3557[8u32][1u32] into r3591;
    ternary r3515 r3517[8u32][2u32] r3557[8u32][2u32] into r3592;
    cast  r3590 r3591 r3592 into r3593 as [field; 3u32];
    cast  r3561 r3565 r3569 r3573 r3577 r3581 r3585 r3589 r3593 into r3594 as [[field; 3u32]; 9u32];
    ternary r3512 r3514[0u32][0u32] r3594[0u32][0u32] into r3595;
    ternary r3512 r3514[0u32][1u32] r3594[0u32][1u32] into r3596;
    ternary r3512 r3514[0u32][2u32] r3594[0u32][2u32] into r3597;
    cast  r3595 r3596 r3597 into r3598 as [field; 3u32];
    ternary r3512 r3514[1u32][0u32] r3594[1u32][0u32] into r3599;
    ternary r3512 r3514[1u32][1u32] r3594[1u32][1u32] into r3600;
    ternary r3512 r3514[1u32][2u32] r3594[1u32][2u32] into r3601;
    cast  r3599 r3600 r3601 into r3602 as [field; 3u32];
    ternary r3512 r3514[2u32][0u32] r3594[2u32][0u32] into r3603;
    ternary r3512 r3514[2u32][1u32] r3594[2u32][1u32] into r3604;
    ternary r3512 r3514[2u32][2u32] r3594[2u32][2u32] into r3605;
    cast  r3603 r3604 r3605 into r3606 as [field; 3u32];
    ternary r3512 r3514[3u32][0u32] r3594[3u32][0u32] into r3607;
    ternary r3512 r3514[3u32][1u32] r3594[3u32][1u32] into r3608;
    ternary r3512 r3514[3u32][2u32] r3594[3u32][2u32] into r3609;
    cast  r3607 r3608 r3609 into r3610 as [field; 3u32];
    ternary r3512 r3514[4u32][0u32] r3594[4u32][0u32] into r3611;
    ternary r3512 r3514[4u32][1u32] r3594[4u32][1u32] into r3612;
    ternary r3512 r3514[4u32][2u32] r3594[4u32][2u32] into r3613;
    cast  r3611 r3612 r3613 into r3614 as [field; 3u32];
    ternary r3512 r3514[5u32][0u32] r3594[5u32][0u32] into r3615;
    ternary r3512 r3514[5u32][1u32] r3594[5u32][1u32] into r3616;
    ternary r3512 r3514[5u32][2u32] r3594[5u32][2u32] into r3617;
    cast  r3615 r3616 r3617 into r3618 as [field; 3u32];
    ternary r3512 r3514[6u32][0u32] r3594[6u32][0u32] into r3619;
    ternary r3512 r3514[6u32][1u32] r3594[6u32][1u32] into r3620;
    ternary r3512 r3514[6u32][2u32] r3594[6u32][2u32] into r3621;
    cast  r3619 r3620 r3621 into r3622 as [field; 3u32];
    ternary r3512 r3514[7u32][0u32] r3594[7u32][0u32] into r3623;
    ternary r3512 r3514[7u32][1u32] r3594[7u32][1u32] into r3624;
    ternary r3512 r3514[7u32][2u32] r3594[7u32][2u32] into r3625;
    cast  r3623 r3624 r3625 into r3626 as [field; 3u32];
    ternary r3512 r3514[8u32][0u32] r3594[8u32][0u32] into r3627;
    ternary r3512 r3514[8u32][1u32] r3594[8u32][1u32] into r3628;
    ternary r3512 r3514[8u32][2u32] r3594[8u32][2u32] into r3629;
    cast  r3627 r3628 r3629 into r3630 as [field; 3u32];
    cast  r3598 r3602 r3606 r3610 r3614 r3618 r3622 r3626 r3630 into r3631 as [[field; 3u32]; 9u32];
    ternary r3509 r3511[0u32][0u32] r3631[0u32][0u32] into r3632;
    ternary r3509 r3511[0u32][1u32] r3631[0u32][1u32] into r3633;
    ternary r3509 r3511[0u32][2u32] r3631[0u32][2u32] into r3634;
    cast  r3632 r3633 r3634 into r3635 as [field; 3u32];
    ternary r3509 r3511[1u32][0u32] r3631[1u32][0u32] into r3636;
    ternary r3509 r3511[1u32][1u32] r3631[1u32][1u32] into r3637;
    ternary r3509 r3511[1u32][2u32] r3631[1u32][2u32] into r3638;
    cast  r3636 r3637 r3638 into r3639 as [field; 3u32];
    ternary r3509 r3511[2u32][0u32] r3631[2u32][0u32] into r3640;
    ternary r3509 r3511[2u32][1u32] r3631[2u32][1u32] into r3641;
    ternary r3509 r3511[2u32][2u32] r3631[2u32][2u32] into r3642;
    cast  r3640 r3641 r3642 into r3643 as [field; 3u32];
    ternary r3509 r3511[3u32][0u32] r3631[3u32][0u32] into r3644;
    ternary r3509 r3511[3u32][1u32] r3631[3u32][1u32] into r3645;
    ternary r3509 r3511[3u32][2u32] r3631[3u32][2u32] into r3646;
    cast  r3644 r3645 r3646 into r3647 as [field; 3u32];
    ternary r3509 r3511[4u32][0u32] r3631[4u32][0u32] into r3648;
    ternary r3509 r3511[4u32][1u32] r3631[4u32][1u32] into r3649;
    ternary r3509 r3511[4u32][2u32] r3631[4u32][2u32] into r3650;
    cast  r3648 r3649 r3650 into r3651 as [field; 3u32];
    ternary r3509 r3511[5u32][0u32] r3631[5u32][0u32] into r3652;
    ternary r3509 r3511[5u32][1u32] r3631[5u32][1u32] into r3653;
    ternary r3509 r3511[5u32][2u32] r3631[5u32][2u32] into r3654;
    cast  r3652 r3653 r3654 into r3655 as [field; 3u32];
    ternary r3509 r3511[6u32][0u32] r3631[6u32][0u32] into r3656;
    ternary r3509 r3511[6u32][1u32] r3631[6u32][1u32] into r3657;
    ternary r3509 r3511[6u32][2u32] r3631[6u32][2u32] into r3658;
    cast  r3656 r3657 r3658 into r3659 as [field; 3u32];
    ternary r3509 r3511[7u32][0u32] r3631[7u32][0u32] into r3660;
    ternary r3509 r3511[7u32][1u32] r3631[7u32][1u32] into r3661;
    ternary r3509 r3511[7u32][2u32] r3631[7u32][2u32] into r3662;
    cast  r3660 r3661 r3662 into r3663 as [field; 3u32];
    ternary r3509 r3511[8u32][0u32] r3631[8u32][0u32] into r3664;
    ternary r3509 r3511[8u32][1u32] r3631[8u32][1u32] into r3665;
    ternary r3509 r3511[8u32][2u32] r3631[8u32][2u32] into r3666;
    cast  r3664 r3665 r3666 into r3667 as [field; 3u32];
    cast  r3635 r3639 r3643 r3647 r3651 r3655 r3659 r3663 r3667 into r3668 as [[field; 3u32]; 9u32];
    ternary r3506 r3508[0u32][0u32] r3668[0u32][0u32] into r3669;
    ternary r3506 r3508[0u32][1u32] r3668[0u32][1u32] into r3670;
    ternary r3506 r3508[0u32][2u32] r3668[0u32][2u32] into r3671;
    cast  r3669 r3670 r3671 into r3672 as [field; 3u32];
    ternary r3506 r3508[1u32][0u32] r3668[1u32][0u32] into r3673;
    ternary r3506 r3508[1u32][1u32] r3668[1u32][1u32] into r3674;
    ternary r3506 r3508[1u32][2u32] r3668[1u32][2u32] into r3675;
    cast  r3673 r3674 r3675 into r3676 as [field; 3u32];
    ternary r3506 r3508[2u32][0u32] r3668[2u32][0u32] into r3677;
    ternary r3506 r3508[2u32][1u32] r3668[2u32][1u32] into r3678;
    ternary r3506 r3508[2u32][2u32] r3668[2u32][2u32] into r3679;
    cast  r3677 r3678 r3679 into r3680 as [field; 3u32];
    ternary r3506 r3508[3u32][0u32] r3668[3u32][0u32] into r3681;
    ternary r3506 r3508[3u32][1u32] r3668[3u32][1u32] into r3682;
    ternary r3506 r3508[3u32][2u32] r3668[3u32][2u32] into r3683;
    cast  r3681 r3682 r3683 into r3684 as [field; 3u32];
    ternary r3506 r3508[4u32][0u32] r3668[4u32][0u32] into r3685;
    ternary r3506 r3508[4u32][1u32] r3668[4u32][1u32] into r3686;
    ternary r3506 r3508[4u32][2u32] r3668[4u32][2u32] into r3687;
    cast  r3685 r3686 r3687 into r3688 as [field; 3u32];
    ternary r3506 r3508[5u32][0u32] r3668[5u32][0u32] into r3689;
    ternary r3506 r3508[5u32][1u32] r3668[5u32][1u32] into r3690;
    ternary r3506 r3508[5u32][2u32] r3668[5u32][2u32] into r3691;
    cast  r3689 r3690 r3691 into r3692 as [field; 3u32];
    ternary r3506 r3508[6u32][0u32] r3668[6u32][0u32] into r3693;
    ternary r3506 r3508[6u32][1u32] r3668[6u32][1u32] into r3694;
    ternary r3506 r3508[6u32][2u32] r3668[6u32][2u32] into r3695;
    cast  r3693 r3694 r3695 into r3696 as [field; 3u32];
    ternary r3506 r3508[7u32][0u32] r3668[7u32][0u32] into r3697;
    ternary r3506 r3508[7u32][1u32] r3668[7u32][1u32] into r3698;
    ternary r3506 r3508[7u32][2u32] r3668[7u32][2u32] into r3699;
    cast  r3697 r3698 r3699 into r3700 as [field; 3u32];
    ternary r3506 r3508[8u32][0u32] r3668[8u32][0u32] into r3701;
    ternary r3506 r3508[8u32][1u32] r3668[8u32][1u32] into r3702;
    ternary r3506 r3508[8u32][2u32] r3668[8u32][2u32] into r3703;
    cast  r3701 r3702 r3703 into r3704 as [field; 3u32];
    cast  r3672 r3676 r3680 r3684 r3688 r3692 r3696 r3700 r3704 into r3705 as [[field; 3u32]; 9u32];
    ternary r3503 r3505[0u32][0u32] r3705[0u32][0u32] into r3706;
    ternary r3503 r3505[0u32][1u32] r3705[0u32][1u32] into r3707;
    ternary r3503 r3505[0u32][2u32] r3705[0u32][2u32] into r3708;
    cast  r3706 r3707 r3708 into r3709 as [field; 3u32];
    ternary r3503 r3505[1u32][0u32] r3705[1u32][0u32] into r3710;
    ternary r3503 r3505[1u32][1u32] r3705[1u32][1u32] into r3711;
    ternary r3503 r3505[1u32][2u32] r3705[1u32][2u32] into r3712;
    cast  r3710 r3711 r3712 into r3713 as [field; 3u32];
    ternary r3503 r3505[2u32][0u32] r3705[2u32][0u32] into r3714;
    ternary r3503 r3505[2u32][1u32] r3705[2u32][1u32] into r3715;
    ternary r3503 r3505[2u32][2u32] r3705[2u32][2u32] into r3716;
    cast  r3714 r3715 r3716 into r3717 as [field; 3u32];
    ternary r3503 r3505[3u32][0u32] r3705[3u32][0u32] into r3718;
    ternary r3503 r3505[3u32][1u32] r3705[3u32][1u32] into r3719;
    ternary r3503 r3505[3u32][2u32] r3705[3u32][2u32] into r3720;
    cast  r3718 r3719 r3720 into r3721 as [field; 3u32];
    ternary r3503 r3505[4u32][0u32] r3705[4u32][0u32] into r3722;
    ternary r3503 r3505[4u32][1u32] r3705[4u32][1u32] into r3723;
    ternary r3503 r3505[4u32][2u32] r3705[4u32][2u32] into r3724;
    cast  r3722 r3723 r3724 into r3725 as [field; 3u32];
    ternary r3503 r3505[5u32][0u32] r3705[5u32][0u32] into r3726;
    ternary r3503 r3505[5u32][1u32] r3705[5u32][1u32] into r3727;
    ternary r3503 r3505[5u32][2u32] r3705[5u32][2u32] into r3728;
    cast  r3726 r3727 r3728 into r3729 as [field; 3u32];
    ternary r3503 r3505[6u32][0u32] r3705[6u32][0u32] into r3730;
    ternary r3503 r3505[6u32][1u32] r3705[6u32][1u32] into r3731;
    ternary r3503 r3505[6u32][2u32] r3705[6u32][2u32] into r3732;
    cast  r3730 r3731 r3732 into r3733 as [field; 3u32];
    ternary r3503 r3505[7u32][0u32] r3705[7u32][0u32] into r3734;
    ternary r3503 r3505[7u32][1u32] r3705[7u32][1u32] into r3735;
    ternary r3503 r3505[7u32][2u32] r3705[7u32][2u32] into r3736;
    cast  r3734 r3735 r3736 into r3737 as [field; 3u32];
    ternary r3503 r3505[8u32][0u32] r3705[8u32][0u32] into r3738;
    ternary r3503 r3505[8u32][1u32] r3705[8u32][1u32] into r3739;
    ternary r3503 r3505[8u32][2u32] r3705[8u32][2u32] into r3740;
    cast  r3738 r3739 r3740 into r3741 as [field; 3u32];
    cast  r3709 r3713 r3717 r3721 r3725 r3729 r3733 r3737 r3741 into r3742 as [[field; 3u32]; 9u32];
    ternary r3500 r3502[0u32][0u32] r3742[0u32][0u32] into r3743;
    ternary r3500 r3502[0u32][1u32] r3742[0u32][1u32] into r3744;
    ternary r3500 r3502[0u32][2u32] r3742[0u32][2u32] into r3745;
    cast  r3743 r3744 r3745 into r3746 as [field; 3u32];
    ternary r3500 r3502[1u32][0u32] r3742[1u32][0u32] into r3747;
    ternary r3500 r3502[1u32][1u32] r3742[1u32][1u32] into r3748;
    ternary r3500 r3502[1u32][2u32] r3742[1u32][2u32] into r3749;
    cast  r3747 r3748 r3749 into r3750 as [field; 3u32];
    ternary r3500 r3502[2u32][0u32] r3742[2u32][0u32] into r3751;
    ternary r3500 r3502[2u32][1u32] r3742[2u32][1u32] into r3752;
    ternary r3500 r3502[2u32][2u32] r3742[2u32][2u32] into r3753;
    cast  r3751 r3752 r3753 into r3754 as [field; 3u32];
    ternary r3500 r3502[3u32][0u32] r3742[3u32][0u32] into r3755;
    ternary r3500 r3502[3u32][1u32] r3742[3u32][1u32] into r3756;
    ternary r3500 r3502[3u32][2u32] r3742[3u32][2u32] into r3757;
    cast  r3755 r3756 r3757 into r3758 as [field; 3u32];
    ternary r3500 r3502[4u32][0u32] r3742[4u32][0u32] into r3759;
    ternary r3500 r3502[4u32][1u32] r3742[4u32][1u32] into r3760;
    ternary r3500 r3502[4u32][2u32] r3742[4u32][2u32] into r3761;
    cast  r3759 r3760 r3761 into r3762 as [field; 3u32];
    ternary r3500 r3502[5u32][0u32] r3742[5u32][0u32] into r3763;
    ternary r3500 r3502[5u32][1u32] r3742[5u32][1u32] into r3764;
    ternary r3500 r3502[5u32][2u32] r3742[5u32][2u32] into r3765;
    cast  r3763 r3764 r3765 into r3766 as [field; 3u32];
    ternary r3500 r3502[6u32][0u32] r3742[6u32][0u32] into r3767;
    ternary r3500 r3502[6u32][1u32] r3742[6u32][1u32] into r3768;
    ternary r3500 r3502[6u32][2u32] r3742[6u32][2u32] into r3769;
    cast  r3767 r3768 r3769 into r3770 as [field; 3u32];
    ternary r3500 r3502[7u32][0u32] r3742[7u32][0u32] into r3771;
    ternary r3500 r3502[7u32][1u32] r3742[7u32][1u32] into r3772;
    ternary r3500 r3502[7u32][2u32] r3742[7u32][2u32] into r3773;
    cast  r3771 r3772 r3773 into r3774 as [field; 3u32];
    ternary r3500 r3502[8u32][0u32] r3742[8u32][0u32] into r3775;
    ternary r3500 r3502[8u32][1u32] r3742[8u32][1u32] into r3776;
    ternary r3500 r3502[8u32][2u32] r3742[8u32][2u32] into r3777;
    cast  r3775 r3776 r3777 into r3778 as [field; 3u32];
    cast  r3746 r3750 r3754 r3758 r3762 r3766 r3770 r3774 r3778 into r3779 as [[field; 3u32]; 9u32];
    ternary r3497 r3499[0u32][0u32] r3779[0u32][0u32] into r3780;
    ternary r3497 r3499[0u32][1u32] r3779[0u32][1u32] into r3781;
    ternary r3497 r3499[0u32][2u32] r3779[0u32][2u32] into r3782;
    cast  r3780 r3781 r3782 into r3783 as [field; 3u32];
    ternary r3497 r3499[1u32][0u32] r3779[1u32][0u32] into r3784;
    ternary r3497 r3499[1u32][1u32] r3779[1u32][1u32] into r3785;
    ternary r3497 r3499[1u32][2u32] r3779[1u32][2u32] into r3786;
    cast  r3784 r3785 r3786 into r3787 as [field; 3u32];
    ternary r3497 r3499[2u32][0u32] r3779[2u32][0u32] into r3788;
    ternary r3497 r3499[2u32][1u32] r3779[2u32][1u32] into r3789;
    ternary r3497 r3499[2u32][2u32] r3779[2u32][2u32] into r3790;
    cast  r3788 r3789 r3790 into r3791 as [field; 3u32];
    ternary r3497 r3499[3u32][0u32] r3779[3u32][0u32] into r3792;
    ternary r3497 r3499[3u32][1u32] r3779[3u32][1u32] into r3793;
    ternary r3497 r3499[3u32][2u32] r3779[3u32][2u32] into r3794;
    cast  r3792 r3793 r3794 into r3795 as [field; 3u32];
    ternary r3497 r3499[4u32][0u32] r3779[4u32][0u32] into r3796;
    ternary r3497 r3499[4u32][1u32] r3779[4u32][1u32] into r3797;
    ternary r3497 r3499[4u32][2u32] r3779[4u32][2u32] into r3798;
    cast  r3796 r3797 r3798 into r3799 as [field; 3u32];
    ternary r3497 r3499[5u32][0u32] r3779[5u32][0u32] into r3800;
    ternary r3497 r3499[5u32][1u32] r3779[5u32][1u32] into r3801;
    ternary r3497 r3499[5u32][2u32] r3779[5u32][2u32] into r3802;
    cast  r3800 r3801 r3802 into r3803 as [field; 3u32];
    ternary r3497 r3499[6u32][0u32] r3779[6u32][0u32] into r3804;
    ternary r3497 r3499[6u32][1u32] r3779[6u32][1u32] into r3805;
    ternary r3497 r3499[6u32][2u32] r3779[6u32][2u32] into r3806;
    cast  r3804 r3805 r3806 into r3807 as [field; 3u32];
    ternary r3497 r3499[7u32][0u32] r3779[7u32][0u32] into r3808;
    ternary r3497 r3499[7u32][1u32] r3779[7u32][1u32] into r3809;
    ternary r3497 r3499[7u32][2u32] r3779[7u32][2u32] into r3810;
    cast  r3808 r3809 r3810 into r3811 as [field; 3u32];
    ternary r3497 r3499[8u32][0u32] r3779[8u32][0u32] into r3812;
    ternary r3497 r3499[8u32][1u32] r3779[8u32][1u32] into r3813;
    ternary r3497 r3499[8u32][2u32] r3779[8u32][2u32] into r3814;
    cast  r3812 r3813 r3814 into r3815 as [field; 3u32];
    cast  r3783 r3787 r3791 r3795 r3799 r3803 r3807 r3811 r3815 into r3816 as [[field; 3u32]; 9u32];
    ternary r3494 r3496[0u32][0u32] r3816[0u32][0u32] into r3817;
    ternary r3494 r3496[0u32][1u32] r3816[0u32][1u32] into r3818;
    ternary r3494 r3496[0u32][2u32] r3816[0u32][2u32] into r3819;
    cast  r3817 r3818 r3819 into r3820 as [field; 3u32];
    ternary r3494 r3496[1u32][0u32] r3816[1u32][0u32] into r3821;
    ternary r3494 r3496[1u32][1u32] r3816[1u32][1u32] into r3822;
    ternary r3494 r3496[1u32][2u32] r3816[1u32][2u32] into r3823;
    cast  r3821 r3822 r3823 into r3824 as [field; 3u32];
    ternary r3494 r3496[2u32][0u32] r3816[2u32][0u32] into r3825;
    ternary r3494 r3496[2u32][1u32] r3816[2u32][1u32] into r3826;
    ternary r3494 r3496[2u32][2u32] r3816[2u32][2u32] into r3827;
    cast  r3825 r3826 r3827 into r3828 as [field; 3u32];
    ternary r3494 r3496[3u32][0u32] r3816[3u32][0u32] into r3829;
    ternary r3494 r3496[3u32][1u32] r3816[3u32][1u32] into r3830;
    ternary r3494 r3496[3u32][2u32] r3816[3u32][2u32] into r3831;
    cast  r3829 r3830 r3831 into r3832 as [field; 3u32];
    ternary r3494 r3496[4u32][0u32] r3816[4u32][0u32] into r3833;
    ternary r3494 r3496[4u32][1u32] r3816[4u32][1u32] into r3834;
    ternary r3494 r3496[4u32][2u32] r3816[4u32][2u32] into r3835;
    cast  r3833 r3834 r3835 into r3836 as [field; 3u32];
    ternary r3494 r3496[5u32][0u32] r3816[5u32][0u32] into r3837;
    ternary r3494 r3496[5u32][1u32] r3816[5u32][1u32] into r3838;
    ternary r3494 r3496[5u32][2u32] r3816[5u32][2u32] into r3839;
    cast  r3837 r3838 r3839 into r3840 as [field; 3u32];
    ternary r3494 r3496[6u32][0u32] r3816[6u32][0u32] into r3841;
    ternary r3494 r3496[6u32][1u32] r3816[6u32][1u32] into r3842;
    ternary r3494 r3496[6u32][2u32] r3816[6u32][2u32] into r3843;
    cast  r3841 r3842 r3843 into r3844 as [field; 3u32];
    ternary r3494 r3496[7u32][0u32] r3816[7u32][0u32] into r3845;
    ternary r3494 r3496[7u32][1u32] r3816[7u32][1u32] into r3846;
    ternary r3494 r3496[7u32][2u32] r3816[7u32][2u32] into r3847;
    cast  r3845 r3846 r3847 into r3848 as [field; 3u32];
    ternary r3494 r3496[8u32][0u32] r3816[8u32][0u32] into r3849;
    ternary r3494 r3496[8u32][1u32] r3816[8u32][1u32] into r3850;
    ternary r3494 r3496[8u32][2u32] r3816[8u32][2u32] into r3851;
    cast  r3849 r3850 r3851 into r3852 as [field; 3u32];
    cast  r3820 r3824 r3828 r3832 r3836 r3840 r3844 r3848 r3852 into r3853 as [[field; 3u32]; 9u32];
    cast  r4 r5 r6 into r3854 as [field; 3u32];
    cast true r13.player_count r13.players r13.next_players r13.phi r13.n r13.deck r13.pointer_i r13.pointer_j r13.hands r3854 0field 0field r13.hands_ij r13.flop_ij r13.turn_ij r13.river_ij r13.hands_d r3853 r13.turn_d r13.river_d r13.deck_ready r13.hands_dealt r13.flop_dealt r13.turn_dealt r13.river_dealt into r3855 as GameState;
    set r3855 into game_state_map[r1];
